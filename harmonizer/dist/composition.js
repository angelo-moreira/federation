var composition = (function (exports, require$$0$2) {
	'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0$2);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var dist$3 = {};

	var compose$1 = {};

	var dist$2 = {};

	var definitions = {};

	// Note: This file is autogenerated using "resources/gen-version.js" script and
	// automatically updated by "npm version" command.

	/**
	 * A string containing the version of the GraphQL.js library
	 */
	const version$2 = '16.3.0';
	/**
	 * An object containing the components of the GraphQL.js version string
	 */

	const versionInfo = Object.freeze({
	  major: 16,
	  minor: 3,
	  patch: 0,
	  preReleaseTag: null,
	});

	function devAssert(condition, message) {
	  const booleanCondition = Boolean(condition);

	  if (!booleanCondition) {
	    throw new Error(message);
	  }
	}

	/**
	 * Returns true if the value acts like a Promise, i.e. has a "then" function,
	 * otherwise returns false.
	 */
	function isPromise(value) {
	  return (
	    typeof (value === null || value === void 0 ? void 0 : value.then) ===
	    'function'
	  );
	}

	/**
	 * Return true if `value` is object-like. A value is object-like if it's not
	 * `null` and has a `typeof` result of "object".
	 */
	function isObjectLike(value) {
	  return typeof value == 'object' && value !== null;
	}

	function invariant(condition, message) {
	  const booleanCondition = Boolean(condition);

	  if (!booleanCondition) {
	    throw new Error(
	      message != null ? message : 'Unexpected invariant triggered.',
	    );
	  }
	}

	const LineRegExp = /\r\n|[\n\r]/g;
	/**
	 * Represents a location in a Source.
	 */

	/**
	 * Takes a Source and a UTF-8 character offset, and returns the corresponding
	 * line and column as a SourceLocation.
	 */
	function getLocation(source, position) {
	  let lastLineStart = 0;
	  let line = 1;

	  for (const match of source.body.matchAll(LineRegExp)) {
	    typeof match.index === 'number' || invariant(false);

	    if (match.index >= position) {
	      break;
	    }

	    lastLineStart = match.index + match[0].length;
	    line += 1;
	  }

	  return {
	    line,
	    column: position + 1 - lastLineStart,
	  };
	}

	/**
	 * Render a helpful description of the location in the GraphQL Source document.
	 */
	function printLocation(location) {
	  return printSourceLocation(
	    location.source,
	    getLocation(location.source, location.start),
	  );
	}
	/**
	 * Render a helpful description of the location in the GraphQL Source document.
	 */

	function printSourceLocation(source, sourceLocation) {
	  const firstLineColumnOffset = source.locationOffset.column - 1;
	  const body = ''.padStart(firstLineColumnOffset) + source.body;
	  const lineIndex = sourceLocation.line - 1;
	  const lineOffset = source.locationOffset.line - 1;
	  const lineNum = sourceLocation.line + lineOffset;
	  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
	  const columnNum = sourceLocation.column + columnOffset;
	  const locationStr = `${source.name}:${lineNum}:${columnNum}\n`;
	  const lines = body.split(/\r\n|[\n\r]/g);
	  const locationLine = lines[lineIndex]; // Special case for minified documents

	  if (locationLine.length > 120) {
	    const subLineIndex = Math.floor(columnNum / 80);
	    const subLineColumnNum = columnNum % 80;
	    const subLines = [];

	    for (let i = 0; i < locationLine.length; i += 80) {
	      subLines.push(locationLine.slice(i, i + 80));
	    }

	    return (
	      locationStr +
	      printPrefixedLines([
	        [`${lineNum} |`, subLines[0]],
	        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),
	        ['|', '^'.padStart(subLineColumnNum)],
	        ['|', subLines[subLineIndex + 1]],
	      ])
	    );
	  }

	  return (
	    locationStr +
	    printPrefixedLines([
	      // Lines specified like this: ["prefix", "string"],
	      [`${lineNum - 1} |`, lines[lineIndex - 1]],
	      [`${lineNum} |`, locationLine],
	      ['|', '^'.padStart(columnNum)],
	      [`${lineNum + 1} |`, lines[lineIndex + 1]],
	    ])
	  );
	}

	function printPrefixedLines(lines) {
	  const existingLines = lines.filter(([_, line]) => line !== undefined);
	  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));
	  return existingLines
	    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))
	    .join('\n');
	}

	function toNormalizedArgs(args) {
	  const firstArg = args[0];

	  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {
	    return {
	      nodes: firstArg,
	      source: args[1],
	      positions: args[2],
	      path: args[3],
	      originalError: args[4],
	      extensions: args[5],
	    };
	  }

	  return firstArg;
	}
	/**
	 * A GraphQLError describes an Error found during the parse, validate, or
	 * execute phases of performing a GraphQL operation. In addition to a message
	 * and stack trace, it also includes information about the locations in a
	 * GraphQL document and/or execution result that correspond to the Error.
	 */

	class GraphQLError extends Error {
	  /**
	   * An array of `{ line, column }` locations within the source GraphQL document
	   * which correspond to this error.
	   *
	   * Errors during validation often contain multiple locations, for example to
	   * point out two things with the same name. Errors during execution include a
	   * single location, the field which produced the error.
	   *
	   * Enumerable, and appears in the result of JSON.stringify().
	   */

	  /**
	   * An array describing the JSON-path into the execution response which
	   * corresponds to this error. Only included for errors during execution.
	   *
	   * Enumerable, and appears in the result of JSON.stringify().
	   */

	  /**
	   * An array of GraphQL AST Nodes corresponding to this error.
	   */

	  /**
	   * The source GraphQL document for the first location of this error.
	   *
	   * Note that if this Error represents more than one node, the source may not
	   * represent nodes after the first node.
	   */

	  /**
	   * An array of character offsets within the source GraphQL document
	   * which correspond to this error.
	   */

	  /**
	   * The original error thrown from a field resolver during execution.
	   */

	  /**
	   * Extension fields to add to the formatted error.
	   */

	  /**
	   * @deprecated Please use the `GraphQLErrorArgs` constructor overload instead.
	   */
	  constructor(message, ...rawArgs) {
	    var _this$nodes, _nodeLocations$, _ref;

	    const { nodes, source, positions, path, originalError, extensions } =
	      toNormalizedArgs(rawArgs);
	    super(message);
	    this.name = 'GraphQLError';
	    this.path = path !== null && path !== void 0 ? path : undefined;
	    this.originalError =
	      originalError !== null && originalError !== void 0
	        ? originalError
	        : undefined; // Compute list of blame nodes.

	    this.nodes = undefinedIfEmpty(
	      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,
	    );
	    const nodeLocations = undefinedIfEmpty(
	      (_this$nodes = this.nodes) === null || _this$nodes === void 0
	        ? void 0
	        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),
	    ); // Compute locations in the source for the given nodes/positions.

	    this.source =
	      source !== null && source !== void 0
	        ? source
	        : nodeLocations === null || nodeLocations === void 0
	        ? void 0
	        : (_nodeLocations$ = nodeLocations[0]) === null ||
	          _nodeLocations$ === void 0
	        ? void 0
	        : _nodeLocations$.source;
	    this.positions =
	      positions !== null && positions !== void 0
	        ? positions
	        : nodeLocations === null || nodeLocations === void 0
	        ? void 0
	        : nodeLocations.map((loc) => loc.start);
	    this.locations =
	      positions && source
	        ? positions.map((pos) => getLocation(source, pos))
	        : nodeLocations === null || nodeLocations === void 0
	        ? void 0
	        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));
	    const originalExtensions = isObjectLike(
	      originalError === null || originalError === void 0
	        ? void 0
	        : originalError.extensions,
	    )
	      ? originalError === null || originalError === void 0
	        ? void 0
	        : originalError.extensions
	      : undefined;
	    this.extensions =
	      (_ref =
	        extensions !== null && extensions !== void 0
	          ? extensions
	          : originalExtensions) !== null && _ref !== void 0
	        ? _ref
	        : Object.create(null); // Only properties prescribed by the spec should be enumerable.
	    // Keep the rest as non-enumerable.

	    Object.defineProperties(this, {
	      message: {
	        writable: true,
	        enumerable: true,
	      },
	      name: {
	        enumerable: false,
	      },
	      nodes: {
	        enumerable: false,
	      },
	      source: {
	        enumerable: false,
	      },
	      positions: {
	        enumerable: false,
	      },
	      originalError: {
	        enumerable: false,
	      },
	    }); // Include (non-enumerable) stack trace.

	    /* c8 ignore start */
	    // FIXME: https://github.com/graphql/graphql-js/issues/2317

	    if (
	      originalError !== null &&
	      originalError !== void 0 &&
	      originalError.stack
	    ) {
	      Object.defineProperty(this, 'stack', {
	        value: originalError.stack,
	        writable: true,
	        configurable: true,
	      });
	    } else if (Error.captureStackTrace) {
	      Error.captureStackTrace(this, GraphQLError);
	    } else {
	      Object.defineProperty(this, 'stack', {
	        value: Error().stack,
	        writable: true,
	        configurable: true,
	      });
	    }
	    /* c8 ignore stop */
	  }

	  get [Symbol.toStringTag]() {
	    return 'GraphQLError';
	  }

	  toString() {
	    let output = this.message;

	    if (this.nodes) {
	      for (const node of this.nodes) {
	        if (node.loc) {
	          output += '\n\n' + printLocation(node.loc);
	        }
	      }
	    } else if (this.source && this.locations) {
	      for (const location of this.locations) {
	        output += '\n\n' + printSourceLocation(this.source, location);
	      }
	    }

	    return output;
	  }

	  toJSON() {
	    const formattedError = {
	      message: this.message,
	    };

	    if (this.locations != null) {
	      formattedError.locations = this.locations;
	    }

	    if (this.path != null) {
	      formattedError.path = this.path;
	    }

	    if (this.extensions != null && Object.keys(this.extensions).length > 0) {
	      formattedError.extensions = this.extensions;
	    }

	    return formattedError;
	  }
	}

	function undefinedIfEmpty(array) {
	  return array === undefined || array.length === 0 ? undefined : array;
	}
	/**
	 * See: https://spec.graphql.org/draft/#sec-Errors
	 */

	/**
	 * Prints a GraphQLError to a string, representing useful location information
	 * about the error's position in the source.
	 *
	 * @deprecated Please use `error.toString` instead. Will be removed in v17
	 */
	function printError(error) {
	  return error.toString();
	}
	/**
	 * Given a GraphQLError, format it according to the rules described by the
	 * Response Format, Errors section of the GraphQL Specification.
	 *
	 * @deprecated Please use `error.toString` instead. Will be removed in v17
	 */

	function formatError$1(error) {
	  return error.toJSON();
	}

	/**
	 * Produces a GraphQLError representing a syntax error, containing useful
	 * descriptive information about the syntax error's position in the source.
	 */

	function syntaxError(source, position, description) {
	  return new GraphQLError(`Syntax Error: ${description}`, undefined, source, [
	    position,
	  ]);
	}

	/**
	 * Contains a range of UTF-8 character offsets and token references that
	 * identify the region of the source from which the AST derived.
	 */
	class Location {
	  /**
	   * The character offset at which this Node begins.
	   */

	  /**
	   * The character offset at which this Node ends.
	   */

	  /**
	   * The Token at which this Node begins.
	   */

	  /**
	   * The Token at which this Node ends.
	   */

	  /**
	   * The Source document the AST represents.
	   */
	  constructor(startToken, endToken, source) {
	    this.start = startToken.start;
	    this.end = endToken.end;
	    this.startToken = startToken;
	    this.endToken = endToken;
	    this.source = source;
	  }

	  get [Symbol.toStringTag]() {
	    return 'Location';
	  }

	  toJSON() {
	    return {
	      start: this.start,
	      end: this.end,
	    };
	  }
	}
	/**
	 * Represents a range of characters represented by a lexical token
	 * within a Source.
	 */

	class Token {
	  /**
	   * The kind of Token.
	   */

	  /**
	   * The character offset at which this Node begins.
	   */

	  /**
	   * The character offset at which this Node ends.
	   */

	  /**
	   * The 1-indexed line number on which this Token appears.
	   */

	  /**
	   * The 1-indexed column number at which this Token begins.
	   */

	  /**
	   * For non-punctuation tokens, represents the interpreted value of the token.
	   *
	   * Note: is undefined for punctuation tokens, but typed as string for
	   * convenience in the parser.
	   */

	  /**
	   * Tokens exist as nodes in a double-linked-list amongst all tokens
	   * including ignored tokens. <SOF> is always the first node and <EOF>
	   * the last.
	   */
	  constructor(kind, start, end, line, column, value) {
	    this.kind = kind;
	    this.start = start;
	    this.end = end;
	    this.line = line;
	    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

	    this.value = value;
	    this.prev = null;
	    this.next = null;
	  }

	  get [Symbol.toStringTag]() {
	    return 'Token';
	  }

	  toJSON() {
	    return {
	      kind: this.kind,
	      value: this.value,
	      line: this.line,
	      column: this.column,
	    };
	  }
	}
	/**
	 * The list of all possible AST node types.
	 */

	/**
	 * @internal
	 */
	const QueryDocumentKeys = {
	  Name: [],
	  Document: ['definitions'],
	  OperationDefinition: [
	    'name',
	    'variableDefinitions',
	    'directives',
	    'selectionSet',
	  ],
	  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
	  Variable: ['name'],
	  SelectionSet: ['selections'],
	  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
	  Argument: ['name', 'value'],
	  FragmentSpread: ['name', 'directives'],
	  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
	  FragmentDefinition: [
	    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0
	    'variableDefinitions',
	    'typeCondition',
	    'directives',
	    'selectionSet',
	  ],
	  IntValue: [],
	  FloatValue: [],
	  StringValue: [],
	  BooleanValue: [],
	  NullValue: [],
	  EnumValue: [],
	  ListValue: ['values'],
	  ObjectValue: ['fields'],
	  ObjectField: ['name', 'value'],
	  Directive: ['name', 'arguments'],
	  NamedType: ['name'],
	  ListType: ['type'],
	  NonNullType: ['type'],
	  SchemaDefinition: ['description', 'directives', 'operationTypes'],
	  OperationTypeDefinition: ['type'],
	  ScalarTypeDefinition: ['description', 'name', 'directives'],
	  ObjectTypeDefinition: [
	    'description',
	    'name',
	    'interfaces',
	    'directives',
	    'fields',
	  ],
	  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
	  InputValueDefinition: [
	    'description',
	    'name',
	    'type',
	    'defaultValue',
	    'directives',
	  ],
	  InterfaceTypeDefinition: [
	    'description',
	    'name',
	    'interfaces',
	    'directives',
	    'fields',
	  ],
	  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
	  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
	  EnumValueDefinition: ['description', 'name', 'directives'],
	  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
	  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
	  SchemaExtension: ['directives', 'operationTypes'],
	  ScalarTypeExtension: ['name', 'directives'],
	  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
	  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
	  UnionTypeExtension: ['name', 'directives', 'types'],
	  EnumTypeExtension: ['name', 'directives', 'values'],
	  InputObjectTypeExtension: ['name', 'directives', 'fields'],
	};
	const kindValues = new Set(Object.keys(QueryDocumentKeys));
	/**
	 * @internal
	 */

	function isNode(maybeNode) {
	  const maybeKind =
	    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
	  return typeof maybeKind === 'string' && kindValues.has(maybeKind);
	}
	/** Name */

	let OperationTypeNode;

	(function (OperationTypeNode) {
	  OperationTypeNode['QUERY'] = 'query';
	  OperationTypeNode['MUTATION'] = 'mutation';
	  OperationTypeNode['SUBSCRIPTION'] = 'subscription';
	})(OperationTypeNode || (OperationTypeNode = {}));

	/**
	 * The set of allowed directive location values.
	 */
	let DirectiveLocation;
	/**
	 * The enum type representing the directive location values.
	 *
	 * @deprecated Please use `DirectiveLocation`. Will be remove in v17.
	 */

	(function (DirectiveLocation) {
	  DirectiveLocation['QUERY'] = 'QUERY';
	  DirectiveLocation['MUTATION'] = 'MUTATION';
	  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';
	  DirectiveLocation['FIELD'] = 'FIELD';
	  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';
	  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';
	  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';
	  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';
	  DirectiveLocation['SCHEMA'] = 'SCHEMA';
	  DirectiveLocation['SCALAR'] = 'SCALAR';
	  DirectiveLocation['OBJECT'] = 'OBJECT';
	  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';
	  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';
	  DirectiveLocation['INTERFACE'] = 'INTERFACE';
	  DirectiveLocation['UNION'] = 'UNION';
	  DirectiveLocation['ENUM'] = 'ENUM';
	  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';
	  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';
	  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';
	})(DirectiveLocation || (DirectiveLocation = {}));

	/**
	 * The set of allowed kind values for AST nodes.
	 */
	let Kind;
	/**
	 * The enum type representing the possible kind values of AST nodes.
	 *
	 * @deprecated Please use `Kind`. Will be remove in v17.
	 */

	(function (Kind) {
	  Kind['NAME'] = 'Name';
	  Kind['DOCUMENT'] = 'Document';
	  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';
	  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';
	  Kind['SELECTION_SET'] = 'SelectionSet';
	  Kind['FIELD'] = 'Field';
	  Kind['ARGUMENT'] = 'Argument';
	  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';
	  Kind['INLINE_FRAGMENT'] = 'InlineFragment';
	  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';
	  Kind['VARIABLE'] = 'Variable';
	  Kind['INT'] = 'IntValue';
	  Kind['FLOAT'] = 'FloatValue';
	  Kind['STRING'] = 'StringValue';
	  Kind['BOOLEAN'] = 'BooleanValue';
	  Kind['NULL'] = 'NullValue';
	  Kind['ENUM'] = 'EnumValue';
	  Kind['LIST'] = 'ListValue';
	  Kind['OBJECT'] = 'ObjectValue';
	  Kind['OBJECT_FIELD'] = 'ObjectField';
	  Kind['DIRECTIVE'] = 'Directive';
	  Kind['NAMED_TYPE'] = 'NamedType';
	  Kind['LIST_TYPE'] = 'ListType';
	  Kind['NON_NULL_TYPE'] = 'NonNullType';
	  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';
	  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';
	  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';
	  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';
	  Kind['FIELD_DEFINITION'] = 'FieldDefinition';
	  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';
	  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';
	  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';
	  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';
	  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';
	  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';
	  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';
	  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';
	  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';
	  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';
	  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';
	  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';
	  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';
	  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';
	})(Kind || (Kind = {}));

	/**
	 * ```
	 * WhiteSpace ::
	 *   - "Horizontal Tab (U+0009)"
	 *   - "Space (U+0020)"
	 * ```
	 * @internal
	 */
	function isWhiteSpace(code) {
	  return code === 0x0009 || code === 0x0020;
	}
	/**
	 * ```
	 * Digit :: one of
	 *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`
	 * ```
	 * @internal
	 */

	function isDigit$1(code) {
	  return code >= 0x0030 && code <= 0x0039;
	}
	/**
	 * ```
	 * Letter :: one of
	 *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`
	 *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`
	 *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`
	 *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`
	 * ```
	 * @internal
	 */

	function isLetter(code) {
	  return (
	    (code >= 0x0061 && code <= 0x007a) || // A-Z
	    (code >= 0x0041 && code <= 0x005a) // a-z
	  );
	}
	/**
	 * ```
	 * NameStart ::
	 *   - Letter
	 *   - `_`
	 * ```
	 * @internal
	 */

	function isNameStart(code) {
	  return isLetter(code) || code === 0x005f;
	}
	/**
	 * ```
	 * NameContinue ::
	 *   - Letter
	 *   - Digit
	 *   - `_`
	 * ```
	 * @internal
	 */

	function isNameContinue(code) {
	  return isLetter(code) || isDigit$1(code) || code === 0x005f;
	}

	/**
	 * Produces the value of a block string from its parsed raw value, similar to
	 * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
	 *
	 * This implements the GraphQL spec's BlockStringValue() static algorithm.
	 *
	 * @internal
	 */

	function dedentBlockStringLines(lines) {
	  var _firstNonEmptyLine2;

	  let commonIndent = Number.MAX_SAFE_INTEGER;
	  let firstNonEmptyLine = null;
	  let lastNonEmptyLine = -1;

	  for (let i = 0; i < lines.length; ++i) {
	    var _firstNonEmptyLine;

	    const line = lines[i];
	    const indent = leadingWhitespace(line);

	    if (indent === line.length) {
	      continue; // skip empty lines
	    }

	    firstNonEmptyLine =
	      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&
	      _firstNonEmptyLine !== void 0
	        ? _firstNonEmptyLine
	        : i;
	    lastNonEmptyLine = i;

	    if (i !== 0 && indent < commonIndent) {
	      commonIndent = indent;
	    }
	  }

	  return lines // Remove common indentation from all lines but first.
	    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.
	    .slice(
	      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&
	        _firstNonEmptyLine2 !== void 0
	        ? _firstNonEmptyLine2
	        : 0,
	      lastNonEmptyLine + 1,
	    );
	}

	function leadingWhitespace(str) {
	  let i = 0;

	  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {
	    ++i;
	  }

	  return i;
	}
	/**
	 * @internal
	 */

	function isPrintableAsBlockString(value) {
	  if (value === '') {
	    return true; // empty string is printable
	  }

	  let isEmptyLine = true;
	  let hasIndent = false;
	  let hasCommonIndent = true;
	  let seenNonEmptyLine = false;

	  for (let i = 0; i < value.length; ++i) {
	    switch (value.codePointAt(i)) {
	      case 0x0000:
	      case 0x0001:
	      case 0x0002:
	      case 0x0003:
	      case 0x0004:
	      case 0x0005:
	      case 0x0006:
	      case 0x0007:
	      case 0x0008:
	      case 0x000b:
	      case 0x000c:
	      case 0x000e:
	      case 0x000f:
	        return false;
	      // Has non-printable characters

	      case 0x000d:
	        //  \r
	        return false;
	      // Has \r or \r\n which will be replaced as \n

	      case 10:
	        //  \n
	        if (isEmptyLine && !seenNonEmptyLine) {
	          return false; // Has leading new line
	        }

	        seenNonEmptyLine = true;
	        isEmptyLine = true;
	        hasIndent = false;
	        break;

	      case 9: //   \t

	      case 32:
	        //  <space>
	        hasIndent || (hasIndent = isEmptyLine);
	        break;

	      default:
	        hasCommonIndent && (hasCommonIndent = hasIndent);
	        isEmptyLine = false;
	    }
	  }

	  if (isEmptyLine) {
	    return false; // Has trailing empty lines
	  }

	  if (hasCommonIndent && seenNonEmptyLine) {
	    return false; // Has internal indent
	  }

	  return true;
	}
	/**
	 * Print a block string in the indented block form by adding a leading and
	 * trailing blank line. However, if a block string starts with whitespace and is
	 * a single-line, adding a leading blank line would strip that whitespace.
	 *
	 * @internal
	 */

	function printBlockString(value, options) {
	  const escapedValue = value.replace(/"""/g, '\\"""'); // Expand a block string's raw value into independent lines.

	  const lines = escapedValue.split(/\r\n|[\n\r]/g);
	  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line

	  const forceLeadingNewLine =
	    lines.length > 1 &&
	    lines
	      .slice(1)
	      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line

	  const hasTrailingTripleQuotes = escapedValue.endsWith('\\"""'); // Trailing quote (single or double) or slash forces trailing new line

	  const hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
	  const hasTrailingSlash = value.endsWith('\\');
	  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
	  const printAsMultipleLines =
	    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability
	    (!isSingleLine ||
	      value.length > 70 ||
	      forceTrailingNewline ||
	      forceLeadingNewLine ||
	      hasTrailingTripleQuotes);
	  let result = ''; // Format a multi-line block quote to account for leading space.

	  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));

	  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {
	    result += '\n';
	  }

	  result += escapedValue;

	  if (printAsMultipleLines || forceTrailingNewline) {
	    result += '\n';
	  }

	  return '"""' + result + '"""';
	}

	/**
	 * An exported enum describing the different kinds of tokens that the
	 * lexer emits.
	 */
	let TokenKind;
	/**
	 * The enum type representing the token kinds values.
	 *
	 * @deprecated Please use `TokenKind`. Will be remove in v17.
	 */

	(function (TokenKind) {
	  TokenKind['SOF'] = '<SOF>';
	  TokenKind['EOF'] = '<EOF>';
	  TokenKind['BANG'] = '!';
	  TokenKind['DOLLAR'] = '$';
	  TokenKind['AMP'] = '&';
	  TokenKind['PAREN_L'] = '(';
	  TokenKind['PAREN_R'] = ')';
	  TokenKind['SPREAD'] = '...';
	  TokenKind['COLON'] = ':';
	  TokenKind['EQUALS'] = '=';
	  TokenKind['AT'] = '@';
	  TokenKind['BRACKET_L'] = '[';
	  TokenKind['BRACKET_R'] = ']';
	  TokenKind['BRACE_L'] = '{';
	  TokenKind['PIPE'] = '|';
	  TokenKind['BRACE_R'] = '}';
	  TokenKind['NAME'] = 'Name';
	  TokenKind['INT'] = 'Int';
	  TokenKind['FLOAT'] = 'Float';
	  TokenKind['STRING'] = 'String';
	  TokenKind['BLOCK_STRING'] = 'BlockString';
	  TokenKind['COMMENT'] = 'Comment';
	})(TokenKind || (TokenKind = {}));

	/**
	 * Given a Source object, creates a Lexer for that source.
	 * A Lexer is a stateful stream generator in that every time
	 * it is advanced, it returns the next token in the Source. Assuming the
	 * source lexes, the final Token emitted by the lexer will be of kind
	 * EOF, after which the lexer will repeatedly return the same EOF token
	 * whenever called.
	 */

	class Lexer {
	  /**
	   * The previously focused non-ignored token.
	   */

	  /**
	   * The currently focused non-ignored token.
	   */

	  /**
	   * The (1-indexed) line containing the current token.
	   */

	  /**
	   * The character offset at which the current line begins.
	   */
	  constructor(source) {
	    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);
	    this.source = source;
	    this.lastToken = startOfFileToken;
	    this.token = startOfFileToken;
	    this.line = 1;
	    this.lineStart = 0;
	  }

	  get [Symbol.toStringTag]() {
	    return 'Lexer';
	  }
	  /**
	   * Advances the token stream to the next non-ignored token.
	   */

	  advance() {
	    this.lastToken = this.token;
	    const token = (this.token = this.lookahead());
	    return token;
	  }
	  /**
	   * Looks ahead and returns the next non-ignored token, but does not change
	   * the state of Lexer.
	   */

	  lookahead() {
	    let token = this.token;

	    if (token.kind !== TokenKind.EOF) {
	      do {
	        if (token.next) {
	          token = token.next;
	        } else {
	          // Read the next token and form a link in the token linked-list.
	          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.

	          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.

	          nextToken.prev = token;
	          token = nextToken;
	        }
	      } while (token.kind === TokenKind.COMMENT);
	    }

	    return token;
	  }
	}
	/**
	 * @internal
	 */

	function isPunctuatorTokenKind(kind) {
	  return (
	    kind === TokenKind.BANG ||
	    kind === TokenKind.DOLLAR ||
	    kind === TokenKind.AMP ||
	    kind === TokenKind.PAREN_L ||
	    kind === TokenKind.PAREN_R ||
	    kind === TokenKind.SPREAD ||
	    kind === TokenKind.COLON ||
	    kind === TokenKind.EQUALS ||
	    kind === TokenKind.AT ||
	    kind === TokenKind.BRACKET_L ||
	    kind === TokenKind.BRACKET_R ||
	    kind === TokenKind.BRACE_L ||
	    kind === TokenKind.PIPE ||
	    kind === TokenKind.BRACE_R
	  );
	}
	/**
	 * A Unicode scalar value is any Unicode code point except surrogate code
	 * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and
	 * 0xE000 to 0x10FFFF.
	 *
	 * SourceCharacter ::
	 *   - "Any Unicode scalar value"
	 */

	function isUnicodeScalarValue(code) {
	  return (
	    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)
	  );
	}
	/**
	 * The GraphQL specification defines source text as a sequence of unicode scalar
	 * values (which Unicode defines to exclude surrogate code points). However
	 * JavaScript defines strings as a sequence of UTF-16 code units which may
	 * include surrogates. A surrogate pair is a valid source character as it
	 * encodes a supplementary code point (above U+FFFF), but unpaired surrogate
	 * code points are not valid source characters.
	 */

	function isSupplementaryCodePoint(body, location) {
	  return (
	    isLeadingSurrogate(body.charCodeAt(location)) &&
	    isTrailingSurrogate(body.charCodeAt(location + 1))
	  );
	}

	function isLeadingSurrogate(code) {
	  return code >= 0xd800 && code <= 0xdbff;
	}

	function isTrailingSurrogate(code) {
	  return code >= 0xdc00 && code <= 0xdfff;
	}
	/**
	 * Prints the code point (or end of file reference) at a given location in a
	 * source for use in error messages.
	 *
	 * Printable ASCII is printed quoted, while other points are printed in Unicode
	 * code point form (ie. U+1234).
	 */

	function printCodePointAt(lexer, location) {
	  const code = lexer.source.body.codePointAt(location);

	  if (code === undefined) {
	    return TokenKind.EOF;
	  } else if (code >= 0x0020 && code <= 0x007e) {
	    // Printable ASCII
	    const char = String.fromCodePoint(code);
	    return char === '"' ? "'\"'" : `"${char}"`;
	  } // Unicode code point

	  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');
	}
	/**
	 * Create a token with line and column location information.
	 */

	function createToken(lexer, kind, start, end, value) {
	  const line = lexer.line;
	  const col = 1 + start - lexer.lineStart;
	  return new Token(kind, start, end, line, col, value);
	}
	/**
	 * Gets the next token from the source starting at the given position.
	 *
	 * This skips over whitespace until it finds the next lexable token, then lexes
	 * punctuators immediately or calls the appropriate helper function for more
	 * complicated tokens.
	 */

	function readNextToken(lexer, start) {
	  const body = lexer.source.body;
	  const bodyLength = body.length;
	  let position = start;

	  while (position < bodyLength) {
	    const code = body.charCodeAt(position); // SourceCharacter

	    switch (code) {
	      // Ignored ::
	      //   - UnicodeBOM
	      //   - WhiteSpace
	      //   - LineTerminator
	      //   - Comment
	      //   - Comma
	      //
	      // UnicodeBOM :: "Byte Order Mark (U+FEFF)"
	      //
	      // WhiteSpace ::
	      //   - "Horizontal Tab (U+0009)"
	      //   - "Space (U+0020)"
	      //
	      // Comma :: ,
	      case 0xfeff: // <BOM>

	      case 0x0009: // \t

	      case 0x0020: // <space>

	      case 0x002c:
	        // ,
	        ++position;
	        continue;
	      // LineTerminator ::
	      //   - "New Line (U+000A)"
	      //   - "Carriage Return (U+000D)" [lookahead != "New Line (U+000A)"]
	      //   - "Carriage Return (U+000D)" "New Line (U+000A)"

	      case 0x000a:
	        // \n
	        ++position;
	        ++lexer.line;
	        lexer.lineStart = position;
	        continue;

	      case 0x000d:
	        // \r
	        if (body.charCodeAt(position + 1) === 0x000a) {
	          position += 2;
	        } else {
	          ++position;
	        }

	        ++lexer.line;
	        lexer.lineStart = position;
	        continue;
	      // Comment

	      case 0x0023:
	        // #
	        return readComment(lexer, position);
	      // Token ::
	      //   - Punctuator
	      //   - Name
	      //   - IntValue
	      //   - FloatValue
	      //   - StringValue
	      //
	      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }

	      case 0x0021:
	        // !
	        return createToken(lexer, TokenKind.BANG, position, position + 1);

	      case 0x0024:
	        // $
	        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);

	      case 0x0026:
	        // &
	        return createToken(lexer, TokenKind.AMP, position, position + 1);

	      case 0x0028:
	        // (
	        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);

	      case 0x0029:
	        // )
	        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);

	      case 0x002e:
	        // .
	        if (
	          body.charCodeAt(position + 1) === 0x002e &&
	          body.charCodeAt(position + 2) === 0x002e
	        ) {
	          return createToken(lexer, TokenKind.SPREAD, position, position + 3);
	        }

	        break;

	      case 0x003a:
	        // :
	        return createToken(lexer, TokenKind.COLON, position, position + 1);

	      case 0x003d:
	        // =
	        return createToken(lexer, TokenKind.EQUALS, position, position + 1);

	      case 0x0040:
	        // @
	        return createToken(lexer, TokenKind.AT, position, position + 1);

	      case 0x005b:
	        // [
	        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);

	      case 0x005d:
	        // ]
	        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);

	      case 0x007b:
	        // {
	        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);

	      case 0x007c:
	        // |
	        return createToken(lexer, TokenKind.PIPE, position, position + 1);

	      case 0x007d:
	        // }
	        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);
	      // StringValue

	      case 0x0022:
	        // "
	        if (
	          body.charCodeAt(position + 1) === 0x0022 &&
	          body.charCodeAt(position + 2) === 0x0022
	        ) {
	          return readBlockString(lexer, position);
	        }

	        return readString(lexer, position);
	    } // IntValue | FloatValue (Digit | -)

	    if (isDigit$1(code) || code === 0x002d) {
	      return readNumber(lexer, position, code);
	    } // Name

	    if (isNameStart(code)) {
	      return readName(lexer, position);
	    }

	    throw syntaxError(
	      lexer.source,
	      position,
	      code === 0x0027
	        ? 'Unexpected single quote character (\'), did you mean to use a double quote (")?'
	        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)
	        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`
	        : `Invalid character: ${printCodePointAt(lexer, position)}.`,
	    );
	  }

	  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);
	}
	/**
	 * Reads a comment token from the source file.
	 *
	 * ```
	 * Comment :: # CommentChar* [lookahead != CommentChar]
	 *
	 * CommentChar :: SourceCharacter but not LineTerminator
	 * ```
	 */

	function readComment(lexer, start) {
	  const body = lexer.source.body;
	  const bodyLength = body.length;
	  let position = start + 1;

	  while (position < bodyLength) {
	    const code = body.charCodeAt(position); // LineTerminator (\n | \r)

	    if (code === 0x000a || code === 0x000d) {
	      break;
	    } // SourceCharacter

	    if (isUnicodeScalarValue(code)) {
	      ++position;
	    } else if (isSupplementaryCodePoint(body, position)) {
	      position += 2;
	    } else {
	      break;
	    }
	  }

	  return createToken(
	    lexer,
	    TokenKind.COMMENT,
	    start,
	    position,
	    body.slice(start + 1, position),
	  );
	}
	/**
	 * Reads a number token from the source file, either a FloatValue or an IntValue
	 * depending on whether a FractionalPart or ExponentPart is encountered.
	 *
	 * ```
	 * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]
	 *
	 * IntegerPart ::
	 *   - NegativeSign? 0
	 *   - NegativeSign? NonZeroDigit Digit*
	 *
	 * NegativeSign :: -
	 *
	 * NonZeroDigit :: Digit but not `0`
	 *
	 * FloatValue ::
	 *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]
	 *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]
	 *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]
	 *
	 * FractionalPart :: . Digit+
	 *
	 * ExponentPart :: ExponentIndicator Sign? Digit+
	 *
	 * ExponentIndicator :: one of `e` `E`
	 *
	 * Sign :: one of + -
	 * ```
	 */

	function readNumber(lexer, start, firstCode) {
	  const body = lexer.source.body;
	  let position = start;
	  let code = firstCode;
	  let isFloat = false; // NegativeSign (-)

	  if (code === 0x002d) {
	    code = body.charCodeAt(++position);
	  } // Zero (0)

	  if (code === 0x0030) {
	    code = body.charCodeAt(++position);

	    if (isDigit$1(code)) {
	      throw syntaxError(
	        lexer.source,
	        position,
	        `Invalid number, unexpected digit after 0: ${printCodePointAt(
          lexer,
          position,
        )}.`,
	      );
	    }
	  } else {
	    position = readDigits(lexer, position, code);
	    code = body.charCodeAt(position);
	  } // Full stop (.)

	  if (code === 0x002e) {
	    isFloat = true;
	    code = body.charCodeAt(++position);
	    position = readDigits(lexer, position, code);
	    code = body.charCodeAt(position);
	  } // E e

	  if (code === 0x0045 || code === 0x0065) {
	    isFloat = true;
	    code = body.charCodeAt(++position); // + -

	    if (code === 0x002b || code === 0x002d) {
	      code = body.charCodeAt(++position);
	    }

	    position = readDigits(lexer, position, code);
	    code = body.charCodeAt(position);
	  } // Numbers cannot be followed by . or NameStart

	  if (code === 0x002e || isNameStart(code)) {
	    throw syntaxError(
	      lexer.source,
	      position,
	      `Invalid number, expected digit but got: ${printCodePointAt(
        lexer,
        position,
      )}.`,
	    );
	  }

	  return createToken(
	    lexer,
	    isFloat ? TokenKind.FLOAT : TokenKind.INT,
	    start,
	    position,
	    body.slice(start, position),
	  );
	}
	/**
	 * Returns the new position in the source after reading one or more digits.
	 */

	function readDigits(lexer, start, firstCode) {
	  if (!isDigit$1(firstCode)) {
	    throw syntaxError(
	      lexer.source,
	      start,
	      `Invalid number, expected digit but got: ${printCodePointAt(
        lexer,
        start,
      )}.`,
	    );
	  }

	  const body = lexer.source.body;
	  let position = start + 1; // +1 to skip first firstCode

	  while (isDigit$1(body.charCodeAt(position))) {
	    ++position;
	  }

	  return position;
	}
	/**
	 * Reads a single-quote string token from the source file.
	 *
	 * ```
	 * StringValue ::
	 *   - `""` [lookahead != `"`]
	 *   - `"` StringCharacter+ `"`
	 *
	 * StringCharacter ::
	 *   - SourceCharacter but not `"` or `\` or LineTerminator
	 *   - `\u` EscapedUnicode
	 *   - `\` EscapedCharacter
	 *
	 * EscapedUnicode ::
	 *   - `{` HexDigit+ `}`
	 *   - HexDigit HexDigit HexDigit HexDigit
	 *
	 * EscapedCharacter :: one of `"` `\` `/` `b` `f` `n` `r` `t`
	 * ```
	 */

	function readString(lexer, start) {
	  const body = lexer.source.body;
	  const bodyLength = body.length;
	  let position = start + 1;
	  let chunkStart = position;
	  let value = '';

	  while (position < bodyLength) {
	    const code = body.charCodeAt(position); // Closing Quote (")

	    if (code === 0x0022) {
	      value += body.slice(chunkStart, position);
	      return createToken(lexer, TokenKind.STRING, start, position + 1, value);
	    } // Escape Sequence (\)

	    if (code === 0x005c) {
	      value += body.slice(chunkStart, position);
	      const escape =
	        body.charCodeAt(position + 1) === 0x0075 // u
	          ? body.charCodeAt(position + 2) === 0x007b // {
	            ? readEscapedUnicodeVariableWidth(lexer, position)
	            : readEscapedUnicodeFixedWidth(lexer, position)
	          : readEscapedCharacter(lexer, position);
	      value += escape.value;
	      position += escape.size;
	      chunkStart = position;
	      continue;
	    } // LineTerminator (\n | \r)

	    if (code === 0x000a || code === 0x000d) {
	      break;
	    } // SourceCharacter

	    if (isUnicodeScalarValue(code)) {
	      ++position;
	    } else if (isSupplementaryCodePoint(body, position)) {
	      position += 2;
	    } else {
	      throw syntaxError(
	        lexer.source,
	        position,
	        `Invalid character within String: ${printCodePointAt(
          lexer,
          position,
        )}.`,
	      );
	    }
	  }

	  throw syntaxError(lexer.source, position, 'Unterminated string.');
	} // The string value and lexed size of an escape sequence.

	function readEscapedUnicodeVariableWidth(lexer, position) {
	  const body = lexer.source.body;
	  let point = 0;
	  let size = 3; // Cannot be larger than 12 chars (\u{00000000}).

	  while (size < 12) {
	    const code = body.charCodeAt(position + size++); // Closing Brace (})

	    if (code === 0x007d) {
	      // Must be at least 5 chars (\u{0}) and encode a Unicode scalar value.
	      if (size < 5 || !isUnicodeScalarValue(point)) {
	        break;
	      }

	      return {
	        value: String.fromCodePoint(point),
	        size,
	      };
	    } // Append this hex digit to the code point.

	    point = (point << 4) | readHexDigit(code);

	    if (point < 0) {
	      break;
	    }
	  }

	  throw syntaxError(
	    lexer.source,
	    position,
	    `Invalid Unicode escape sequence: "${body.slice(
      position,
      position + size,
    )}".`,
	  );
	}

	function readEscapedUnicodeFixedWidth(lexer, position) {
	  const body = lexer.source.body;
	  const code = read16BitHexCode(body, position + 2);

	  if (isUnicodeScalarValue(code)) {
	    return {
	      value: String.fromCodePoint(code),
	      size: 6,
	    };
	  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when
	  // a valid pair is formed.

	  if (isLeadingSurrogate(code)) {
	    // \u
	    if (
	      body.charCodeAt(position + 6) === 0x005c &&
	      body.charCodeAt(position + 7) === 0x0075
	    ) {
	      const trailingCode = read16BitHexCode(body, position + 8);

	      if (isTrailingSurrogate(trailingCode)) {
	        // JavaScript defines strings as a sequence of UTF-16 code units and
	        // encodes Unicode code points above U+FFFF using a surrogate pair of
	        // code units. Since this is a surrogate pair escape sequence, just
	        // include both codes into the JavaScript string value. Had JavaScript
	        // not been internally based on UTF-16, then this surrogate pair would
	        // be decoded to retrieve the supplementary code point.
	        return {
	          value: String.fromCodePoint(code, trailingCode),
	          size: 12,
	        };
	      }
	    }
	  }

	  throw syntaxError(
	    lexer.source,
	    position,
	    `Invalid Unicode escape sequence: "${body.slice(position, position + 6)}".`,
	  );
	}
	/**
	 * Reads four hexadecimal characters and returns the positive integer that 16bit
	 * hexadecimal string represents. For example, "000f" will return 15, and "dead"
	 * will return 57005.
	 *
	 * Returns a negative number if any char was not a valid hexadecimal digit.
	 */

	function read16BitHexCode(body, position) {
	  // readHexDigit() returns -1 on error. ORing a negative value with any other
	  // value always produces a negative value.
	  return (
	    (readHexDigit(body.charCodeAt(position)) << 12) |
	    (readHexDigit(body.charCodeAt(position + 1)) << 8) |
	    (readHexDigit(body.charCodeAt(position + 2)) << 4) |
	    readHexDigit(body.charCodeAt(position + 3))
	  );
	}
	/**
	 * Reads a hexadecimal character and returns its positive integer value (0-15).
	 *
	 * '0' becomes 0, '9' becomes 9
	 * 'A' becomes 10, 'F' becomes 15
	 * 'a' becomes 10, 'f' becomes 15
	 *
	 * Returns -1 if the provided character code was not a valid hexadecimal digit.
	 *
	 * HexDigit :: one of
	 *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`
	 *   - `A` `B` `C` `D` `E` `F`
	 *   - `a` `b` `c` `d` `e` `f`
	 */

	function readHexDigit(code) {
	  return code >= 0x0030 && code <= 0x0039 // 0-9
	    ? code - 0x0030
	    : code >= 0x0041 && code <= 0x0046 // A-F
	    ? code - 0x0037
	    : code >= 0x0061 && code <= 0x0066 // a-f
	    ? code - 0x0057
	    : -1;
	}
	/**
	 * | Escaped Character | Code Point | Character Name               |
	 * | ----------------- | ---------- | ---------------------------- |
	 * | `"`               | U+0022     | double quote                 |
	 * | `\`               | U+005C     | reverse solidus (back slash) |
	 * | `/`               | U+002F     | solidus (forward slash)      |
	 * | `b`               | U+0008     | backspace                    |
	 * | `f`               | U+000C     | form feed                    |
	 * | `n`               | U+000A     | line feed (new line)         |
	 * | `r`               | U+000D     | carriage return              |
	 * | `t`               | U+0009     | horizontal tab               |
	 */

	function readEscapedCharacter(lexer, position) {
	  const body = lexer.source.body;
	  const code = body.charCodeAt(position + 1);

	  switch (code) {
	    case 0x0022:
	      // "
	      return {
	        value: '\u0022',
	        size: 2,
	      };

	    case 0x005c:
	      // \
	      return {
	        value: '\u005c',
	        size: 2,
	      };

	    case 0x002f:
	      // /
	      return {
	        value: '\u002f',
	        size: 2,
	      };

	    case 0x0062:
	      // b
	      return {
	        value: '\u0008',
	        size: 2,
	      };

	    case 0x0066:
	      // f
	      return {
	        value: '\u000c',
	        size: 2,
	      };

	    case 0x006e:
	      // n
	      return {
	        value: '\u000a',
	        size: 2,
	      };

	    case 0x0072:
	      // r
	      return {
	        value: '\u000d',
	        size: 2,
	      };

	    case 0x0074:
	      // t
	      return {
	        value: '\u0009',
	        size: 2,
	      };
	  }

	  throw syntaxError(
	    lexer.source,
	    position,
	    `Invalid character escape sequence: "${body.slice(
      position,
      position + 2,
    )}".`,
	  );
	}
	/**
	 * Reads a block string token from the source file.
	 *
	 * ```
	 * StringValue ::
	 *   - `"""` BlockStringCharacter* `"""`
	 *
	 * BlockStringCharacter ::
	 *   - SourceCharacter but not `"""` or `\"""`
	 *   - `\"""`
	 * ```
	 */

	function readBlockString(lexer, start) {
	  const body = lexer.source.body;
	  const bodyLength = body.length;
	  let lineStart = lexer.lineStart;
	  let position = start + 3;
	  let chunkStart = position;
	  let currentLine = '';
	  const blockLines = [];

	  while (position < bodyLength) {
	    const code = body.charCodeAt(position); // Closing Triple-Quote (""")

	    if (
	      code === 0x0022 &&
	      body.charCodeAt(position + 1) === 0x0022 &&
	      body.charCodeAt(position + 2) === 0x0022
	    ) {
	      currentLine += body.slice(chunkStart, position);
	      blockLines.push(currentLine);
	      const token = createToken(
	        lexer,
	        TokenKind.BLOCK_STRING,
	        start,
	        position + 3, // Return a string of the lines joined with U+000A.
	        dedentBlockStringLines(blockLines).join('\n'),
	      );
	      lexer.line += blockLines.length - 1;
	      lexer.lineStart = lineStart;
	      return token;
	    } // Escaped Triple-Quote (\""")

	    if (
	      code === 0x005c &&
	      body.charCodeAt(position + 1) === 0x0022 &&
	      body.charCodeAt(position + 2) === 0x0022 &&
	      body.charCodeAt(position + 3) === 0x0022
	    ) {
	      currentLine += body.slice(chunkStart, position);
	      chunkStart = position + 1; // skip only slash

	      position += 4;
	      continue;
	    } // LineTerminator

	    if (code === 0x000a || code === 0x000d) {
	      currentLine += body.slice(chunkStart, position);
	      blockLines.push(currentLine);

	      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {
	        position += 2;
	      } else {
	        ++position;
	      }

	      currentLine = '';
	      chunkStart = position;
	      lineStart = position;
	      continue;
	    } // SourceCharacter

	    if (isUnicodeScalarValue(code)) {
	      ++position;
	    } else if (isSupplementaryCodePoint(body, position)) {
	      position += 2;
	    } else {
	      throw syntaxError(
	        lexer.source,
	        position,
	        `Invalid character within String: ${printCodePointAt(
          lexer,
          position,
        )}.`,
	      );
	    }
	  }

	  throw syntaxError(lexer.source, position, 'Unterminated string.');
	}
	/**
	 * Reads an alphanumeric + underscore name from the source.
	 *
	 * ```
	 * Name ::
	 *   - NameStart NameContinue* [lookahead != NameContinue]
	 * ```
	 */

	function readName(lexer, start) {
	  const body = lexer.source.body;
	  const bodyLength = body.length;
	  let position = start + 1;

	  while (position < bodyLength) {
	    const code = body.charCodeAt(position);

	    if (isNameContinue(code)) {
	      ++position;
	    } else {
	      break;
	    }
	  }

	  return createToken(
	    lexer,
	    TokenKind.NAME,
	    start,
	    position,
	    body.slice(start, position),
	  );
	}

	const MAX_ARRAY_LENGTH = 10;
	const MAX_RECURSIVE_DEPTH = 2;
	/**
	 * Used to print values in error messages.
	 */

	function inspect$2(value) {
	  return formatValue$1(value, []);
	}

	function formatValue$1(value, seenValues) {
	  switch (typeof value) {
	    case 'string':
	      return JSON.stringify(value);

	    case 'function':
	      return value.name ? `[function ${value.name}]` : '[function]';

	    case 'object':
	      return formatObjectValue(value, seenValues);

	    default:
	      return String(value);
	  }
	}

	function formatObjectValue(value, previouslySeenValues) {
	  if (value === null) {
	    return 'null';
	  }

	  if (previouslySeenValues.includes(value)) {
	    return '[Circular]';
	  }

	  const seenValues = [...previouslySeenValues, value];

	  if (isJSONable(value)) {
	    const jsonValue = value.toJSON(); // check for infinite recursion

	    if (jsonValue !== value) {
	      return typeof jsonValue === 'string'
	        ? jsonValue
	        : formatValue$1(jsonValue, seenValues);
	    }
	  } else if (Array.isArray(value)) {
	    return formatArray$1(value, seenValues);
	  }

	  return formatObject(value, seenValues);
	}

	function isJSONable(value) {
	  return typeof value.toJSON === 'function';
	}

	function formatObject(object, seenValues) {
	  const entries = Object.entries(object);

	  if (entries.length === 0) {
	    return '{}';
	  }

	  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
	    return '[' + getObjectTag(object) + ']';
	  }

	  const properties = entries.map(
	    ([key, value]) => key + ': ' + formatValue$1(value, seenValues),
	  );
	  return '{ ' + properties.join(', ') + ' }';
	}

	function formatArray$1(array, seenValues) {
	  if (array.length === 0) {
	    return '[]';
	  }

	  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
	    return '[Array]';
	  }

	  const len = Math.min(MAX_ARRAY_LENGTH, array.length);
	  const remaining = array.length - len;
	  const items = [];

	  for (let i = 0; i < len; ++i) {
	    items.push(formatValue$1(array[i], seenValues));
	  }

	  if (remaining === 1) {
	    items.push('... 1 more item');
	  } else if (remaining > 1) {
	    items.push(`... ${remaining} more items`);
	  }

	  return '[' + items.join(', ') + ']';
	}

	function getObjectTag(object) {
	  const tag = Object.prototype.toString
	    .call(object)
	    .replace(/^\[object /, '')
	    .replace(/]$/, '');

	  if (tag === 'Object' && typeof object.constructor === 'function') {
	    const name = object.constructor.name;

	    if (typeof name === 'string' && name !== '') {
	      return name;
	    }
	  }

	  return tag;
	}

	/**
	 * A replacement for instanceof which includes an error warning when multi-realm
	 * constructors are detected.
	 * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
	 * See: https://webpack.js.org/guides/production/
	 */

	const instanceOf =
	  /* c8 ignore next 5 */
	  // FIXME: https://github.com/graphql/graphql-js/issues/2317
	  process.env.NODE_ENV === 'production'
	    ? function instanceOf(value, constructor) {
	        return value instanceof constructor;
	      }
	    : function instanceOf(value, constructor) {
	        if (value instanceof constructor) {
	          return true;
	        }

	        if (typeof value === 'object' && value !== null) {
	          var _value$constructor;

	          // Prefer Symbol.toStringTag since it is immune to minification.
	          const className = constructor.prototype[Symbol.toStringTag];
	          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.
	            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009
	              ? value[Symbol.toStringTag]
	              : (_value$constructor = value.constructor) === null ||
	                _value$constructor === void 0
	              ? void 0
	              : _value$constructor.name;

	          if (className === valueClassName) {
	            const stringifiedValue = inspect$2(value);
	            throw new Error(`Cannot use ${className} "${stringifiedValue}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`);
	          }
	        }

	        return false;
	      };

	/**
	 * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are
	 * optional, but they are useful for clients who store GraphQL documents in source files.
	 * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might
	 * be useful for `name` to be `"Foo.graphql"` and location to be `{ line: 40, column: 1 }`.
	 * The `line` and `column` properties in `locationOffset` are 1-indexed.
	 */
	class Source {
	  constructor(
	    body,
	    name = 'GraphQL request',
	    locationOffset = {
	      line: 1,
	      column: 1,
	    },
	  ) {
	    typeof body === 'string' ||
	      devAssert(false, `Body must be a string. Received: ${inspect$2(body)}.`);
	    this.body = body;
	    this.name = name;
	    this.locationOffset = locationOffset;
	    this.locationOffset.line > 0 ||
	      devAssert(
	        false,
	        'line in locationOffset is 1-indexed and must be positive.',
	      );
	    this.locationOffset.column > 0 ||
	      devAssert(
	        false,
	        'column in locationOffset is 1-indexed and must be positive.',
	      );
	  }

	  get [Symbol.toStringTag]() {
	    return 'Source';
	  }
	}
	/**
	 * Test if the given value is a Source object.
	 *
	 * @internal
	 */

	function isSource(source) {
	  return instanceOf(source, Source);
	}

	/**
	 * Configuration options to control parser behavior
	 */

	/**
	 * Given a GraphQL source, parses it into a Document.
	 * Throws GraphQLError if a syntax error is encountered.
	 */
	function parse(source, options) {
	  const parser = new Parser(source, options);
	  return parser.parseDocument();
	}
	/**
	 * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for
	 * that value.
	 * Throws GraphQLError if a syntax error is encountered.
	 *
	 * This is useful within tools that operate upon GraphQL Values directly and
	 * in isolation of complete GraphQL documents.
	 *
	 * Consider providing the results to the utility function: valueFromAST().
	 */

	function parseValue(source, options) {
	  const parser = new Parser(source, options);
	  parser.expectToken(TokenKind.SOF);
	  const value = parser.parseValueLiteral(false);
	  parser.expectToken(TokenKind.EOF);
	  return value;
	}
	/**
	 * Similar to parseValue(), but raises a parse error if it encounters a
	 * variable. The return type will be a constant value.
	 */

	function parseConstValue(source, options) {
	  const parser = new Parser(source, options);
	  parser.expectToken(TokenKind.SOF);
	  const value = parser.parseConstValueLiteral();
	  parser.expectToken(TokenKind.EOF);
	  return value;
	}
	/**
	 * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for
	 * that type.
	 * Throws GraphQLError if a syntax error is encountered.
	 *
	 * This is useful within tools that operate upon GraphQL Types directly and
	 * in isolation of complete GraphQL documents.
	 *
	 * Consider providing the results to the utility function: typeFromAST().
	 */

	function parseType(source, options) {
	  const parser = new Parser(source, options);
	  parser.expectToken(TokenKind.SOF);
	  const type = parser.parseTypeReference();
	  parser.expectToken(TokenKind.EOF);
	  return type;
	}
	/**
	 * This class is exported only to assist people in implementing their own parsers
	 * without duplicating too much code and should be used only as last resort for cases
	 * such as experimental syntax or if certain features could not be contributed upstream.
	 *
	 * It is still part of the internal API and is versioned, so any changes to it are never
	 * considered breaking changes. If you still need to support multiple versions of the
	 * library, please use the `versionInfo` variable for version detection.
	 *
	 * @internal
	 */

	class Parser {
	  constructor(source, options) {
	    const sourceObj = isSource(source) ? source : new Source(source);
	    this._lexer = new Lexer(sourceObj);
	    this._options = options;
	  }
	  /**
	   * Converts a name lex token into a name parse node.
	   */

	  parseName() {
	    const token = this.expectToken(TokenKind.NAME);
	    return this.node(token, {
	      kind: Kind.NAME,
	      value: token.value,
	    });
	  } // Implements the parsing rules in the Document section.

	  /**
	   * Document : Definition+
	   */

	  parseDocument() {
	    return this.node(this._lexer.token, {
	      kind: Kind.DOCUMENT,
	      definitions: this.many(
	        TokenKind.SOF,
	        this.parseDefinition,
	        TokenKind.EOF,
	      ),
	    });
	  }
	  /**
	   * Definition :
	   *   - ExecutableDefinition
	   *   - TypeSystemDefinition
	   *   - TypeSystemExtension
	   *
	   * ExecutableDefinition :
	   *   - OperationDefinition
	   *   - FragmentDefinition
	   *
	   * TypeSystemDefinition :
	   *   - SchemaDefinition
	   *   - TypeDefinition
	   *   - DirectiveDefinition
	   *
	   * TypeDefinition :
	   *   - ScalarTypeDefinition
	   *   - ObjectTypeDefinition
	   *   - InterfaceTypeDefinition
	   *   - UnionTypeDefinition
	   *   - EnumTypeDefinition
	   *   - InputObjectTypeDefinition
	   */

	  parseDefinition() {
	    if (this.peek(TokenKind.BRACE_L)) {
	      return this.parseOperationDefinition();
	    } // Many definitions begin with a description and require a lookahead.

	    const hasDescription = this.peekDescription();
	    const keywordToken = hasDescription
	      ? this._lexer.lookahead()
	      : this._lexer.token;

	    if (keywordToken.kind === TokenKind.NAME) {
	      switch (keywordToken.value) {
	        case 'schema':
	          return this.parseSchemaDefinition();

	        case 'scalar':
	          return this.parseScalarTypeDefinition();

	        case 'type':
	          return this.parseObjectTypeDefinition();

	        case 'interface':
	          return this.parseInterfaceTypeDefinition();

	        case 'union':
	          return this.parseUnionTypeDefinition();

	        case 'enum':
	          return this.parseEnumTypeDefinition();

	        case 'input':
	          return this.parseInputObjectTypeDefinition();

	        case 'directive':
	          return this.parseDirectiveDefinition();
	      }

	      if (hasDescription) {
	        throw syntaxError(
	          this._lexer.source,
	          this._lexer.token.start,
	          'Unexpected description, descriptions are supported only on type definitions.',
	        );
	      }

	      switch (keywordToken.value) {
	        case 'query':
	        case 'mutation':
	        case 'subscription':
	          return this.parseOperationDefinition();

	        case 'fragment':
	          return this.parseFragmentDefinition();

	        case 'extend':
	          return this.parseTypeSystemExtension();
	      }
	    }

	    throw this.unexpected(keywordToken);
	  } // Implements the parsing rules in the Operations section.

	  /**
	   * OperationDefinition :
	   *  - SelectionSet
	   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
	   */

	  parseOperationDefinition() {
	    const start = this._lexer.token;

	    if (this.peek(TokenKind.BRACE_L)) {
	      return this.node(start, {
	        kind: Kind.OPERATION_DEFINITION,
	        operation: OperationTypeNode.QUERY,
	        name: undefined,
	        variableDefinitions: [],
	        directives: [],
	        selectionSet: this.parseSelectionSet(),
	      });
	    }

	    const operation = this.parseOperationType();
	    let name;

	    if (this.peek(TokenKind.NAME)) {
	      name = this.parseName();
	    }

	    return this.node(start, {
	      kind: Kind.OPERATION_DEFINITION,
	      operation,
	      name,
	      variableDefinitions: this.parseVariableDefinitions(),
	      directives: this.parseDirectives(false),
	      selectionSet: this.parseSelectionSet(),
	    });
	  }
	  /**
	   * OperationType : one of query mutation subscription
	   */

	  parseOperationType() {
	    const operationToken = this.expectToken(TokenKind.NAME);

	    switch (operationToken.value) {
	      case 'query':
	        return OperationTypeNode.QUERY;

	      case 'mutation':
	        return OperationTypeNode.MUTATION;

	      case 'subscription':
	        return OperationTypeNode.SUBSCRIPTION;
	    }

	    throw this.unexpected(operationToken);
	  }
	  /**
	   * VariableDefinitions : ( VariableDefinition+ )
	   */

	  parseVariableDefinitions() {
	    return this.optionalMany(
	      TokenKind.PAREN_L,
	      this.parseVariableDefinition,
	      TokenKind.PAREN_R,
	    );
	  }
	  /**
	   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
	   */

	  parseVariableDefinition() {
	    return this.node(this._lexer.token, {
	      kind: Kind.VARIABLE_DEFINITION,
	      variable: this.parseVariable(),
	      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),
	      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)
	        ? this.parseConstValueLiteral()
	        : undefined,
	      directives: this.parseConstDirectives(),
	    });
	  }
	  /**
	   * Variable : $ Name
	   */

	  parseVariable() {
	    const start = this._lexer.token;
	    this.expectToken(TokenKind.DOLLAR);
	    return this.node(start, {
	      kind: Kind.VARIABLE,
	      name: this.parseName(),
	    });
	  }
	  /**
	   * ```
	   * SelectionSet : { Selection+ }
	   * ```
	   */

	  parseSelectionSet() {
	    return this.node(this._lexer.token, {
	      kind: Kind.SELECTION_SET,
	      selections: this.many(
	        TokenKind.BRACE_L,
	        this.parseSelection,
	        TokenKind.BRACE_R,
	      ),
	    });
	  }
	  /**
	   * Selection :
	   *   - Field
	   *   - FragmentSpread
	   *   - InlineFragment
	   */

	  parseSelection() {
	    return this.peek(TokenKind.SPREAD)
	      ? this.parseFragment()
	      : this.parseField();
	  }
	  /**
	   * Field : Alias? Name Arguments? Directives? SelectionSet?
	   *
	   * Alias : Name :
	   */

	  parseField() {
	    const start = this._lexer.token;
	    const nameOrAlias = this.parseName();
	    let alias;
	    let name;

	    if (this.expectOptionalToken(TokenKind.COLON)) {
	      alias = nameOrAlias;
	      name = this.parseName();
	    } else {
	      name = nameOrAlias;
	    }

	    return this.node(start, {
	      kind: Kind.FIELD,
	      alias,
	      name,
	      arguments: this.parseArguments(false),
	      directives: this.parseDirectives(false),
	      selectionSet: this.peek(TokenKind.BRACE_L)
	        ? this.parseSelectionSet()
	        : undefined,
	    });
	  }
	  /**
	   * Arguments[Const] : ( Argument[?Const]+ )
	   */

	  parseArguments(isConst) {
	    const item = isConst ? this.parseConstArgument : this.parseArgument;
	    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);
	  }
	  /**
	   * Argument[Const] : Name : Value[?Const]
	   */

	  parseArgument(isConst = false) {
	    const start = this._lexer.token;
	    const name = this.parseName();
	    this.expectToken(TokenKind.COLON);
	    return this.node(start, {
	      kind: Kind.ARGUMENT,
	      name,
	      value: this.parseValueLiteral(isConst),
	    });
	  }

	  parseConstArgument() {
	    return this.parseArgument(true);
	  } // Implements the parsing rules in the Fragments section.

	  /**
	   * Corresponds to both FragmentSpread and InlineFragment in the spec.
	   *
	   * FragmentSpread : ... FragmentName Directives?
	   *
	   * InlineFragment : ... TypeCondition? Directives? SelectionSet
	   */

	  parseFragment() {
	    const start = this._lexer.token;
	    this.expectToken(TokenKind.SPREAD);
	    const hasTypeCondition = this.expectOptionalKeyword('on');

	    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {
	      return this.node(start, {
	        kind: Kind.FRAGMENT_SPREAD,
	        name: this.parseFragmentName(),
	        directives: this.parseDirectives(false),
	      });
	    }

	    return this.node(start, {
	      kind: Kind.INLINE_FRAGMENT,
	      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,
	      directives: this.parseDirectives(false),
	      selectionSet: this.parseSelectionSet(),
	    });
	  }
	  /**
	   * FragmentDefinition :
	   *   - fragment FragmentName on TypeCondition Directives? SelectionSet
	   *
	   * TypeCondition : NamedType
	   */

	  parseFragmentDefinition() {
	    var _this$_options;

	    const start = this._lexer.token;
	    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes
	    // the grammar of FragmentDefinition:
	    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet

	    if (
	      ((_this$_options = this._options) === null || _this$_options === void 0
	        ? void 0
	        : _this$_options.allowLegacyFragmentVariables) === true
	    ) {
	      return this.node(start, {
	        kind: Kind.FRAGMENT_DEFINITION,
	        name: this.parseFragmentName(),
	        variableDefinitions: this.parseVariableDefinitions(),
	        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
	        directives: this.parseDirectives(false),
	        selectionSet: this.parseSelectionSet(),
	      });
	    }

	    return this.node(start, {
	      kind: Kind.FRAGMENT_DEFINITION,
	      name: this.parseFragmentName(),
	      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
	      directives: this.parseDirectives(false),
	      selectionSet: this.parseSelectionSet(),
	    });
	  }
	  /**
	   * FragmentName : Name but not `on`
	   */

	  parseFragmentName() {
	    if (this._lexer.token.value === 'on') {
	      throw this.unexpected();
	    }

	    return this.parseName();
	  } // Implements the parsing rules in the Values section.

	  /**
	   * Value[Const] :
	   *   - [~Const] Variable
	   *   - IntValue
	   *   - FloatValue
	   *   - StringValue
	   *   - BooleanValue
	   *   - NullValue
	   *   - EnumValue
	   *   - ListValue[?Const]
	   *   - ObjectValue[?Const]
	   *
	   * BooleanValue : one of `true` `false`
	   *
	   * NullValue : `null`
	   *
	   * EnumValue : Name but not `true`, `false` or `null`
	   */

	  parseValueLiteral(isConst) {
	    const token = this._lexer.token;

	    switch (token.kind) {
	      case TokenKind.BRACKET_L:
	        return this.parseList(isConst);

	      case TokenKind.BRACE_L:
	        return this.parseObject(isConst);

	      case TokenKind.INT:
	        this._lexer.advance();

	        return this.node(token, {
	          kind: Kind.INT,
	          value: token.value,
	        });

	      case TokenKind.FLOAT:
	        this._lexer.advance();

	        return this.node(token, {
	          kind: Kind.FLOAT,
	          value: token.value,
	        });

	      case TokenKind.STRING:
	      case TokenKind.BLOCK_STRING:
	        return this.parseStringLiteral();

	      case TokenKind.NAME:
	        this._lexer.advance();

	        switch (token.value) {
	          case 'true':
	            return this.node(token, {
	              kind: Kind.BOOLEAN,
	              value: true,
	            });

	          case 'false':
	            return this.node(token, {
	              kind: Kind.BOOLEAN,
	              value: false,
	            });

	          case 'null':
	            return this.node(token, {
	              kind: Kind.NULL,
	            });

	          default:
	            return this.node(token, {
	              kind: Kind.ENUM,
	              value: token.value,
	            });
	        }

	      case TokenKind.DOLLAR:
	        if (isConst) {
	          this.expectToken(TokenKind.DOLLAR);

	          if (this._lexer.token.kind === TokenKind.NAME) {
	            const varName = this._lexer.token.value;
	            throw syntaxError(
	              this._lexer.source,
	              token.start,
	              `Unexpected variable "$${varName}" in constant value.`,
	            );
	          } else {
	            throw this.unexpected(token);
	          }
	        }

	        return this.parseVariable();

	      default:
	        throw this.unexpected();
	    }
	  }

	  parseConstValueLiteral() {
	    return this.parseValueLiteral(true);
	  }

	  parseStringLiteral() {
	    const token = this._lexer.token;

	    this._lexer.advance();

	    return this.node(token, {
	      kind: Kind.STRING,
	      value: token.value,
	      block: token.kind === TokenKind.BLOCK_STRING,
	    });
	  }
	  /**
	   * ListValue[Const] :
	   *   - [ ]
	   *   - [ Value[?Const]+ ]
	   */

	  parseList(isConst) {
	    const item = () => this.parseValueLiteral(isConst);

	    return this.node(this._lexer.token, {
	      kind: Kind.LIST,
	      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),
	    });
	  }
	  /**
	   * ```
	   * ObjectValue[Const] :
	   *   - { }
	   *   - { ObjectField[?Const]+ }
	   * ```
	   */

	  parseObject(isConst) {
	    const item = () => this.parseObjectField(isConst);

	    return this.node(this._lexer.token, {
	      kind: Kind.OBJECT,
	      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),
	    });
	  }
	  /**
	   * ObjectField[Const] : Name : Value[?Const]
	   */

	  parseObjectField(isConst) {
	    const start = this._lexer.token;
	    const name = this.parseName();
	    this.expectToken(TokenKind.COLON);
	    return this.node(start, {
	      kind: Kind.OBJECT_FIELD,
	      name,
	      value: this.parseValueLiteral(isConst),
	    });
	  } // Implements the parsing rules in the Directives section.

	  /**
	   * Directives[Const] : Directive[?Const]+
	   */

	  parseDirectives(isConst) {
	    const directives = [];

	    while (this.peek(TokenKind.AT)) {
	      directives.push(this.parseDirective(isConst));
	    }

	    return directives;
	  }

	  parseConstDirectives() {
	    return this.parseDirectives(true);
	  }
	  /**
	   * ```
	   * Directive[Const] : @ Name Arguments[?Const]?
	   * ```
	   */

	  parseDirective(isConst) {
	    const start = this._lexer.token;
	    this.expectToken(TokenKind.AT);
	    return this.node(start, {
	      kind: Kind.DIRECTIVE,
	      name: this.parseName(),
	      arguments: this.parseArguments(isConst),
	    });
	  } // Implements the parsing rules in the Types section.

	  /**
	   * Type :
	   *   - NamedType
	   *   - ListType
	   *   - NonNullType
	   */

	  parseTypeReference() {
	    const start = this._lexer.token;
	    let type;

	    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {
	      const innerType = this.parseTypeReference();
	      this.expectToken(TokenKind.BRACKET_R);
	      type = this.node(start, {
	        kind: Kind.LIST_TYPE,
	        type: innerType,
	      });
	    } else {
	      type = this.parseNamedType();
	    }

	    if (this.expectOptionalToken(TokenKind.BANG)) {
	      return this.node(start, {
	        kind: Kind.NON_NULL_TYPE,
	        type,
	      });
	    }

	    return type;
	  }
	  /**
	   * NamedType : Name
	   */

	  parseNamedType() {
	    return this.node(this._lexer.token, {
	      kind: Kind.NAMED_TYPE,
	      name: this.parseName(),
	    });
	  } // Implements the parsing rules in the Type Definition section.

	  peekDescription() {
	    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);
	  }
	  /**
	   * Description : StringValue
	   */

	  parseDescription() {
	    if (this.peekDescription()) {
	      return this.parseStringLiteral();
	    }
	  }
	  /**
	   * ```
	   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
	   * ```
	   */

	  parseSchemaDefinition() {
	    const start = this._lexer.token;
	    const description = this.parseDescription();
	    this.expectKeyword('schema');
	    const directives = this.parseConstDirectives();
	    const operationTypes = this.many(
	      TokenKind.BRACE_L,
	      this.parseOperationTypeDefinition,
	      TokenKind.BRACE_R,
	    );
	    return this.node(start, {
	      kind: Kind.SCHEMA_DEFINITION,
	      description,
	      directives,
	      operationTypes,
	    });
	  }
	  /**
	   * OperationTypeDefinition : OperationType : NamedType
	   */

	  parseOperationTypeDefinition() {
	    const start = this._lexer.token;
	    const operation = this.parseOperationType();
	    this.expectToken(TokenKind.COLON);
	    const type = this.parseNamedType();
	    return this.node(start, {
	      kind: Kind.OPERATION_TYPE_DEFINITION,
	      operation,
	      type,
	    });
	  }
	  /**
	   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
	   */

	  parseScalarTypeDefinition() {
	    const start = this._lexer.token;
	    const description = this.parseDescription();
	    this.expectKeyword('scalar');
	    const name = this.parseName();
	    const directives = this.parseConstDirectives();
	    return this.node(start, {
	      kind: Kind.SCALAR_TYPE_DEFINITION,
	      description,
	      name,
	      directives,
	    });
	  }
	  /**
	   * ObjectTypeDefinition :
	   *   Description?
	   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
	   */

	  parseObjectTypeDefinition() {
	    const start = this._lexer.token;
	    const description = this.parseDescription();
	    this.expectKeyword('type');
	    const name = this.parseName();
	    const interfaces = this.parseImplementsInterfaces();
	    const directives = this.parseConstDirectives();
	    const fields = this.parseFieldsDefinition();
	    return this.node(start, {
	      kind: Kind.OBJECT_TYPE_DEFINITION,
	      description,
	      name,
	      interfaces,
	      directives,
	      fields,
	    });
	  }
	  /**
	   * ImplementsInterfaces :
	   *   - implements `&`? NamedType
	   *   - ImplementsInterfaces & NamedType
	   */

	  parseImplementsInterfaces() {
	    return this.expectOptionalKeyword('implements')
	      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)
	      : [];
	  }
	  /**
	   * ```
	   * FieldsDefinition : { FieldDefinition+ }
	   * ```
	   */

	  parseFieldsDefinition() {
	    return this.optionalMany(
	      TokenKind.BRACE_L,
	      this.parseFieldDefinition,
	      TokenKind.BRACE_R,
	    );
	  }
	  /**
	   * FieldDefinition :
	   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
	   */

	  parseFieldDefinition() {
	    const start = this._lexer.token;
	    const description = this.parseDescription();
	    const name = this.parseName();
	    const args = this.parseArgumentDefs();
	    this.expectToken(TokenKind.COLON);
	    const type = this.parseTypeReference();
	    const directives = this.parseConstDirectives();
	    return this.node(start, {
	      kind: Kind.FIELD_DEFINITION,
	      description,
	      name,
	      arguments: args,
	      type,
	      directives,
	    });
	  }
	  /**
	   * ArgumentsDefinition : ( InputValueDefinition+ )
	   */

	  parseArgumentDefs() {
	    return this.optionalMany(
	      TokenKind.PAREN_L,
	      this.parseInputValueDef,
	      TokenKind.PAREN_R,
	    );
	  }
	  /**
	   * InputValueDefinition :
	   *   - Description? Name : Type DefaultValue? Directives[Const]?
	   */

	  parseInputValueDef() {
	    const start = this._lexer.token;
	    const description = this.parseDescription();
	    const name = this.parseName();
	    this.expectToken(TokenKind.COLON);
	    const type = this.parseTypeReference();
	    let defaultValue;

	    if (this.expectOptionalToken(TokenKind.EQUALS)) {
	      defaultValue = this.parseConstValueLiteral();
	    }

	    const directives = this.parseConstDirectives();
	    return this.node(start, {
	      kind: Kind.INPUT_VALUE_DEFINITION,
	      description,
	      name,
	      type,
	      defaultValue,
	      directives,
	    });
	  }
	  /**
	   * InterfaceTypeDefinition :
	   *   - Description? interface Name Directives[Const]? FieldsDefinition?
	   */

	  parseInterfaceTypeDefinition() {
	    const start = this._lexer.token;
	    const description = this.parseDescription();
	    this.expectKeyword('interface');
	    const name = this.parseName();
	    const interfaces = this.parseImplementsInterfaces();
	    const directives = this.parseConstDirectives();
	    const fields = this.parseFieldsDefinition();
	    return this.node(start, {
	      kind: Kind.INTERFACE_TYPE_DEFINITION,
	      description,
	      name,
	      interfaces,
	      directives,
	      fields,
	    });
	  }
	  /**
	   * UnionTypeDefinition :
	   *   - Description? union Name Directives[Const]? UnionMemberTypes?
	   */

	  parseUnionTypeDefinition() {
	    const start = this._lexer.token;
	    const description = this.parseDescription();
	    this.expectKeyword('union');
	    const name = this.parseName();
	    const directives = this.parseConstDirectives();
	    const types = this.parseUnionMemberTypes();
	    return this.node(start, {
	      kind: Kind.UNION_TYPE_DEFINITION,
	      description,
	      name,
	      directives,
	      types,
	    });
	  }
	  /**
	   * UnionMemberTypes :
	   *   - = `|`? NamedType
	   *   - UnionMemberTypes | NamedType
	   */

	  parseUnionMemberTypes() {
	    return this.expectOptionalToken(TokenKind.EQUALS)
	      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)
	      : [];
	  }
	  /**
	   * EnumTypeDefinition :
	   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
	   */

	  parseEnumTypeDefinition() {
	    const start = this._lexer.token;
	    const description = this.parseDescription();
	    this.expectKeyword('enum');
	    const name = this.parseName();
	    const directives = this.parseConstDirectives();
	    const values = this.parseEnumValuesDefinition();
	    return this.node(start, {
	      kind: Kind.ENUM_TYPE_DEFINITION,
	      description,
	      name,
	      directives,
	      values,
	    });
	  }
	  /**
	   * ```
	   * EnumValuesDefinition : { EnumValueDefinition+ }
	   * ```
	   */

	  parseEnumValuesDefinition() {
	    return this.optionalMany(
	      TokenKind.BRACE_L,
	      this.parseEnumValueDefinition,
	      TokenKind.BRACE_R,
	    );
	  }
	  /**
	   * EnumValueDefinition : Description? EnumValue Directives[Const]?
	   */

	  parseEnumValueDefinition() {
	    const start = this._lexer.token;
	    const description = this.parseDescription();
	    const name = this.parseEnumValueName();
	    const directives = this.parseConstDirectives();
	    return this.node(start, {
	      kind: Kind.ENUM_VALUE_DEFINITION,
	      description,
	      name,
	      directives,
	    });
	  }
	  /**
	   * EnumValue : Name but not `true`, `false` or `null`
	   */

	  parseEnumValueName() {
	    if (
	      this._lexer.token.value === 'true' ||
	      this._lexer.token.value === 'false' ||
	      this._lexer.token.value === 'null'
	    ) {
	      throw syntaxError(
	        this._lexer.source,
	        this._lexer.token.start,
	        `${getTokenDesc(
          this._lexer.token,
        )} is reserved and cannot be used for an enum value.`,
	      );
	    }

	    return this.parseName();
	  }
	  /**
	   * InputObjectTypeDefinition :
	   *   - Description? input Name Directives[Const]? InputFieldsDefinition?
	   */

	  parseInputObjectTypeDefinition() {
	    const start = this._lexer.token;
	    const description = this.parseDescription();
	    this.expectKeyword('input');
	    const name = this.parseName();
	    const directives = this.parseConstDirectives();
	    const fields = this.parseInputFieldsDefinition();
	    return this.node(start, {
	      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
	      description,
	      name,
	      directives,
	      fields,
	    });
	  }
	  /**
	   * ```
	   * InputFieldsDefinition : { InputValueDefinition+ }
	   * ```
	   */

	  parseInputFieldsDefinition() {
	    return this.optionalMany(
	      TokenKind.BRACE_L,
	      this.parseInputValueDef,
	      TokenKind.BRACE_R,
	    );
	  }
	  /**
	   * TypeSystemExtension :
	   *   - SchemaExtension
	   *   - TypeExtension
	   *
	   * TypeExtension :
	   *   - ScalarTypeExtension
	   *   - ObjectTypeExtension
	   *   - InterfaceTypeExtension
	   *   - UnionTypeExtension
	   *   - EnumTypeExtension
	   *   - InputObjectTypeDefinition
	   */

	  parseTypeSystemExtension() {
	    const keywordToken = this._lexer.lookahead();

	    if (keywordToken.kind === TokenKind.NAME) {
	      switch (keywordToken.value) {
	        case 'schema':
	          return this.parseSchemaExtension();

	        case 'scalar':
	          return this.parseScalarTypeExtension();

	        case 'type':
	          return this.parseObjectTypeExtension();

	        case 'interface':
	          return this.parseInterfaceTypeExtension();

	        case 'union':
	          return this.parseUnionTypeExtension();

	        case 'enum':
	          return this.parseEnumTypeExtension();

	        case 'input':
	          return this.parseInputObjectTypeExtension();
	      }
	    }

	    throw this.unexpected(keywordToken);
	  }
	  /**
	   * ```
	   * SchemaExtension :
	   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
	   *  - extend schema Directives[Const]
	   * ```
	   */

	  parseSchemaExtension() {
	    const start = this._lexer.token;
	    this.expectKeyword('extend');
	    this.expectKeyword('schema');
	    const directives = this.parseConstDirectives();
	    const operationTypes = this.optionalMany(
	      TokenKind.BRACE_L,
	      this.parseOperationTypeDefinition,
	      TokenKind.BRACE_R,
	    );

	    if (directives.length === 0 && operationTypes.length === 0) {
	      throw this.unexpected();
	    }

	    return this.node(start, {
	      kind: Kind.SCHEMA_EXTENSION,
	      directives,
	      operationTypes,
	    });
	  }
	  /**
	   * ScalarTypeExtension :
	   *   - extend scalar Name Directives[Const]
	   */

	  parseScalarTypeExtension() {
	    const start = this._lexer.token;
	    this.expectKeyword('extend');
	    this.expectKeyword('scalar');
	    const name = this.parseName();
	    const directives = this.parseConstDirectives();

	    if (directives.length === 0) {
	      throw this.unexpected();
	    }

	    return this.node(start, {
	      kind: Kind.SCALAR_TYPE_EXTENSION,
	      name,
	      directives,
	    });
	  }
	  /**
	   * ObjectTypeExtension :
	   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
	   *  - extend type Name ImplementsInterfaces? Directives[Const]
	   *  - extend type Name ImplementsInterfaces
	   */

	  parseObjectTypeExtension() {
	    const start = this._lexer.token;
	    this.expectKeyword('extend');
	    this.expectKeyword('type');
	    const name = this.parseName();
	    const interfaces = this.parseImplementsInterfaces();
	    const directives = this.parseConstDirectives();
	    const fields = this.parseFieldsDefinition();

	    if (
	      interfaces.length === 0 &&
	      directives.length === 0 &&
	      fields.length === 0
	    ) {
	      throw this.unexpected();
	    }

	    return this.node(start, {
	      kind: Kind.OBJECT_TYPE_EXTENSION,
	      name,
	      interfaces,
	      directives,
	      fields,
	    });
	  }
	  /**
	   * InterfaceTypeExtension :
	   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
	   *  - extend interface Name ImplementsInterfaces? Directives[Const]
	   *  - extend interface Name ImplementsInterfaces
	   */

	  parseInterfaceTypeExtension() {
	    const start = this._lexer.token;
	    this.expectKeyword('extend');
	    this.expectKeyword('interface');
	    const name = this.parseName();
	    const interfaces = this.parseImplementsInterfaces();
	    const directives = this.parseConstDirectives();
	    const fields = this.parseFieldsDefinition();

	    if (
	      interfaces.length === 0 &&
	      directives.length === 0 &&
	      fields.length === 0
	    ) {
	      throw this.unexpected();
	    }

	    return this.node(start, {
	      kind: Kind.INTERFACE_TYPE_EXTENSION,
	      name,
	      interfaces,
	      directives,
	      fields,
	    });
	  }
	  /**
	   * UnionTypeExtension :
	   *   - extend union Name Directives[Const]? UnionMemberTypes
	   *   - extend union Name Directives[Const]
	   */

	  parseUnionTypeExtension() {
	    const start = this._lexer.token;
	    this.expectKeyword('extend');
	    this.expectKeyword('union');
	    const name = this.parseName();
	    const directives = this.parseConstDirectives();
	    const types = this.parseUnionMemberTypes();

	    if (directives.length === 0 && types.length === 0) {
	      throw this.unexpected();
	    }

	    return this.node(start, {
	      kind: Kind.UNION_TYPE_EXTENSION,
	      name,
	      directives,
	      types,
	    });
	  }
	  /**
	   * EnumTypeExtension :
	   *   - extend enum Name Directives[Const]? EnumValuesDefinition
	   *   - extend enum Name Directives[Const]
	   */

	  parseEnumTypeExtension() {
	    const start = this._lexer.token;
	    this.expectKeyword('extend');
	    this.expectKeyword('enum');
	    const name = this.parseName();
	    const directives = this.parseConstDirectives();
	    const values = this.parseEnumValuesDefinition();

	    if (directives.length === 0 && values.length === 0) {
	      throw this.unexpected();
	    }

	    return this.node(start, {
	      kind: Kind.ENUM_TYPE_EXTENSION,
	      name,
	      directives,
	      values,
	    });
	  }
	  /**
	   * InputObjectTypeExtension :
	   *   - extend input Name Directives[Const]? InputFieldsDefinition
	   *   - extend input Name Directives[Const]
	   */

	  parseInputObjectTypeExtension() {
	    const start = this._lexer.token;
	    this.expectKeyword('extend');
	    this.expectKeyword('input');
	    const name = this.parseName();
	    const directives = this.parseConstDirectives();
	    const fields = this.parseInputFieldsDefinition();

	    if (directives.length === 0 && fields.length === 0) {
	      throw this.unexpected();
	    }

	    return this.node(start, {
	      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
	      name,
	      directives,
	      fields,
	    });
	  }
	  /**
	   * ```
	   * DirectiveDefinition :
	   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
	   * ```
	   */

	  parseDirectiveDefinition() {
	    const start = this._lexer.token;
	    const description = this.parseDescription();
	    this.expectKeyword('directive');
	    this.expectToken(TokenKind.AT);
	    const name = this.parseName();
	    const args = this.parseArgumentDefs();
	    const repeatable = this.expectOptionalKeyword('repeatable');
	    this.expectKeyword('on');
	    const locations = this.parseDirectiveLocations();
	    return this.node(start, {
	      kind: Kind.DIRECTIVE_DEFINITION,
	      description,
	      name,
	      arguments: args,
	      repeatable,
	      locations,
	    });
	  }
	  /**
	   * DirectiveLocations :
	   *   - `|`? DirectiveLocation
	   *   - DirectiveLocations | DirectiveLocation
	   */

	  parseDirectiveLocations() {
	    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);
	  }
	  /*
	   * DirectiveLocation :
	   *   - ExecutableDirectiveLocation
	   *   - TypeSystemDirectiveLocation
	   *
	   * ExecutableDirectiveLocation : one of
	   *   `QUERY`
	   *   `MUTATION`
	   *   `SUBSCRIPTION`
	   *   `FIELD`
	   *   `FRAGMENT_DEFINITION`
	   *   `FRAGMENT_SPREAD`
	   *   `INLINE_FRAGMENT`
	   *
	   * TypeSystemDirectiveLocation : one of
	   *   `SCHEMA`
	   *   `SCALAR`
	   *   `OBJECT`
	   *   `FIELD_DEFINITION`
	   *   `ARGUMENT_DEFINITION`
	   *   `INTERFACE`
	   *   `UNION`
	   *   `ENUM`
	   *   `ENUM_VALUE`
	   *   `INPUT_OBJECT`
	   *   `INPUT_FIELD_DEFINITION`
	   */

	  parseDirectiveLocation() {
	    const start = this._lexer.token;
	    const name = this.parseName();

	    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {
	      return name;
	    }

	    throw this.unexpected(start);
	  } // Core parsing utility functions

	  /**
	   * Returns a node that, if configured to do so, sets a "loc" field as a
	   * location object, used to identify the place in the source that created a
	   * given parsed object.
	   */

	  node(startToken, node) {
	    var _this$_options2;

	    if (
	      ((_this$_options2 = this._options) === null || _this$_options2 === void 0
	        ? void 0
	        : _this$_options2.noLocation) !== true
	    ) {
	      node.loc = new Location(
	        startToken,
	        this._lexer.lastToken,
	        this._lexer.source,
	      );
	    }

	    return node;
	  }
	  /**
	   * Determines if the next token is of a given kind
	   */

	  peek(kind) {
	    return this._lexer.token.kind === kind;
	  }
	  /**
	   * If the next token is of the given kind, return that token after advancing the lexer.
	   * Otherwise, do not change the parser state and throw an error.
	   */

	  expectToken(kind) {
	    const token = this._lexer.token;

	    if (token.kind === kind) {
	      this._lexer.advance();

	      return token;
	    }

	    throw syntaxError(
	      this._lexer.source,
	      token.start,
	      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,
	    );
	  }
	  /**
	   * If the next token is of the given kind, return "true" after advancing the lexer.
	   * Otherwise, do not change the parser state and return "false".
	   */

	  expectOptionalToken(kind) {
	    const token = this._lexer.token;

	    if (token.kind === kind) {
	      this._lexer.advance();

	      return true;
	    }

	    return false;
	  }
	  /**
	   * If the next token is a given keyword, advance the lexer.
	   * Otherwise, do not change the parser state and throw an error.
	   */

	  expectKeyword(value) {
	    const token = this._lexer.token;

	    if (token.kind === TokenKind.NAME && token.value === value) {
	      this._lexer.advance();
	    } else {
	      throw syntaxError(
	        this._lexer.source,
	        token.start,
	        `Expected "${value}", found ${getTokenDesc(token)}.`,
	      );
	    }
	  }
	  /**
	   * If the next token is a given keyword, return "true" after advancing the lexer.
	   * Otherwise, do not change the parser state and return "false".
	   */

	  expectOptionalKeyword(value) {
	    const token = this._lexer.token;

	    if (token.kind === TokenKind.NAME && token.value === value) {
	      this._lexer.advance();

	      return true;
	    }

	    return false;
	  }
	  /**
	   * Helper function for creating an error when an unexpected lexed token is encountered.
	   */

	  unexpected(atToken) {
	    const token =
	      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
	    return syntaxError(
	      this._lexer.source,
	      token.start,
	      `Unexpected ${getTokenDesc(token)}.`,
	    );
	  }
	  /**
	   * Returns a possibly empty list of parse nodes, determined by the parseFn.
	   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
	   * Advances the parser to the next lex token after the closing token.
	   */

	  any(openKind, parseFn, closeKind) {
	    this.expectToken(openKind);
	    const nodes = [];

	    while (!this.expectOptionalToken(closeKind)) {
	      nodes.push(parseFn.call(this));
	    }

	    return nodes;
	  }
	  /**
	   * Returns a list of parse nodes, determined by the parseFn.
	   * It can be empty only if open token is missing otherwise it will always return non-empty list
	   * that begins with a lex token of openKind and ends with a lex token of closeKind.
	   * Advances the parser to the next lex token after the closing token.
	   */

	  optionalMany(openKind, parseFn, closeKind) {
	    if (this.expectOptionalToken(openKind)) {
	      const nodes = [];

	      do {
	        nodes.push(parseFn.call(this));
	      } while (!this.expectOptionalToken(closeKind));

	      return nodes;
	    }

	    return [];
	  }
	  /**
	   * Returns a non-empty list of parse nodes, determined by the parseFn.
	   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
	   * Advances the parser to the next lex token after the closing token.
	   */

	  many(openKind, parseFn, closeKind) {
	    this.expectToken(openKind);
	    const nodes = [];

	    do {
	      nodes.push(parseFn.call(this));
	    } while (!this.expectOptionalToken(closeKind));

	    return nodes;
	  }
	  /**
	   * Returns a non-empty list of parse nodes, determined by the parseFn.
	   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
	   * Advances the parser to the next lex token after last item in the list.
	   */

	  delimitedMany(delimiterKind, parseFn) {
	    this.expectOptionalToken(delimiterKind);
	    const nodes = [];

	    do {
	      nodes.push(parseFn.call(this));
	    } while (this.expectOptionalToken(delimiterKind));

	    return nodes;
	  }
	}
	/**
	 * A helper function to describe a token as a string for debugging.
	 */

	function getTokenDesc(token) {
	  const value = token.value;
	  return getTokenKindDesc(token.kind) + (value != null ? ` "${value}"` : '');
	}
	/**
	 * A helper function to describe a token kind as a string for debugging.
	 */

	function getTokenKindDesc(kind) {
	  return isPunctuatorTokenKind(kind) ? `"${kind}"` : kind;
	}

	const MAX_SUGGESTIONS$1 = 5;
	/**
	 * Given [ A, B, C ] return ' Did you mean A, B, or C?'.
	 */

	function didYouMean$1(firstArg, secondArg) {
	  const [subMessage, suggestionsArg] = secondArg
	    ? [firstArg, secondArg]
	    : [undefined, firstArg];
	  let message = ' Did you mean ';

	  if (subMessage) {
	    message += subMessage + ' ';
	  }

	  const suggestions = suggestionsArg.map((x) => `"${x}"`);

	  switch (suggestions.length) {
	    case 0:
	      return '';

	    case 1:
	      return message + suggestions[0] + '?';

	    case 2:
	      return message + suggestions[0] + ' or ' + suggestions[1] + '?';
	  }

	  const selected = suggestions.slice(0, MAX_SUGGESTIONS$1);
	  const lastItem = selected.pop();
	  return message + selected.join(', ') + ', or ' + lastItem + '?';
	}

	/**
	 * Returns the first argument it receives.
	 */
	function identityFunc(x) {
	  return x;
	}

	/**
	 * Creates a keyed JS object from an array, given a function to produce the keys
	 * for each value in the array.
	 *
	 * This provides a convenient lookup for the array items if the key function
	 * produces unique results.
	 * ```ts
	 * const phoneBook = [
	 *   { name: 'Jon', num: '555-1234' },
	 *   { name: 'Jenny', num: '867-5309' }
	 * ]
	 *
	 * const entriesByName = keyMap(
	 *   phoneBook,
	 *   entry => entry.name
	 * )
	 *
	 * // {
	 * //   Jon: { name: 'Jon', num: '555-1234' },
	 * //   Jenny: { name: 'Jenny', num: '867-5309' }
	 * // }
	 *
	 * const jennyEntry = entriesByName['Jenny']
	 *
	 * // { name: 'Jenny', num: '857-6309' }
	 * ```
	 */
	function keyMap(list, keyFn) {
	  const result = Object.create(null);

	  for (const item of list) {
	    result[keyFn(item)] = item;
	  }

	  return result;
	}

	/**
	 * Creates a keyed JS object from an array, given a function to produce the keys
	 * and a function to produce the values from each item in the array.
	 * ```ts
	 * const phoneBook = [
	 *   { name: 'Jon', num: '555-1234' },
	 *   { name: 'Jenny', num: '867-5309' }
	 * ]
	 *
	 * // { Jon: '555-1234', Jenny: '867-5309' }
	 * const phonesByName = keyValMap(
	 *   phoneBook,
	 *   entry => entry.name,
	 *   entry => entry.num
	 * )
	 * ```
	 */
	function keyValMap(list, keyFn, valFn) {
	  const result = Object.create(null);

	  for (const item of list) {
	    result[keyFn(item)] = valFn(item);
	  }

	  return result;
	}

	/**
	 * Creates an object map with the same keys as `map` and values generated by
	 * running each value of `map` thru `fn`.
	 */
	function mapValue(map, fn) {
	  const result = Object.create(null);

	  for (const key of Object.keys(map)) {
	    result[key] = fn(map[key], key);
	  }

	  return result;
	}

	/**
	 * Returns a number indicating whether a reference string comes before, or after,
	 * or is the same as the given string in natural sort order.
	 *
	 * See: https://en.wikipedia.org/wiki/Natural_sort_order
	 *
	 */
	function naturalCompare(aStr, bStr) {
	  let aIndex = 0;
	  let bIndex = 0;

	  while (aIndex < aStr.length && bIndex < bStr.length) {
	    let aChar = aStr.charCodeAt(aIndex);
	    let bChar = bStr.charCodeAt(bIndex);

	    if (isDigit(aChar) && isDigit(bChar)) {
	      let aNum = 0;

	      do {
	        ++aIndex;
	        aNum = aNum * 10 + aChar - DIGIT_0;
	        aChar = aStr.charCodeAt(aIndex);
	      } while (isDigit(aChar) && aNum > 0);

	      let bNum = 0;

	      do {
	        ++bIndex;
	        bNum = bNum * 10 + bChar - DIGIT_0;
	        bChar = bStr.charCodeAt(bIndex);
	      } while (isDigit(bChar) && bNum > 0);

	      if (aNum < bNum) {
	        return -1;
	      }

	      if (aNum > bNum) {
	        return 1;
	      }
	    } else {
	      if (aChar < bChar) {
	        return -1;
	      }

	      if (aChar > bChar) {
	        return 1;
	      }

	      ++aIndex;
	      ++bIndex;
	    }
	  }

	  return aStr.length - bStr.length;
	}
	const DIGIT_0 = 48;
	const DIGIT_9 = 57;

	function isDigit(code) {
	  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
	}

	/**
	 * Given an invalid input string and a list of valid options, returns a filtered
	 * list of valid options sorted based on their similarity with the input.
	 */

	function suggestionList$1(input, options) {
	  const optionsByDistance = Object.create(null);
	  const lexicalDistance = new LexicalDistance(input);
	  const threshold = Math.floor(input.length * 0.4) + 1;

	  for (const option of options) {
	    const distance = lexicalDistance.measure(option, threshold);

	    if (distance !== undefined) {
	      optionsByDistance[option] = distance;
	    }
	  }

	  return Object.keys(optionsByDistance).sort((a, b) => {
	    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];
	    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);
	  });
	}
	/**
	 * Computes the lexical distance between strings A and B.
	 *
	 * The "distance" between two strings is given by counting the minimum number
	 * of edits needed to transform string A into string B. An edit can be an
	 * insertion, deletion, or substitution of a single character, or a swap of two
	 * adjacent characters.
	 *
	 * Includes a custom alteration from Damerau-Levenshtein to treat case changes
	 * as a single edit which helps identify mis-cased values with an edit distance
	 * of 1.
	 *
	 * This distance can be useful for detecting typos in input or sorting
	 */

	class LexicalDistance {
	  constructor(input) {
	    this._input = input;
	    this._inputLowerCase = input.toLowerCase();
	    this._inputArray = stringToArray(this._inputLowerCase);
	    this._rows = [
	      new Array(input.length + 1).fill(0),
	      new Array(input.length + 1).fill(0),
	      new Array(input.length + 1).fill(0),
	    ];
	  }

	  measure(option, threshold) {
	    if (this._input === option) {
	      return 0;
	    }

	    const optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit

	    if (this._inputLowerCase === optionLowerCase) {
	      return 1;
	    }

	    let a = stringToArray(optionLowerCase);
	    let b = this._inputArray;

	    if (a.length < b.length) {
	      const tmp = a;
	      a = b;
	      b = tmp;
	    }

	    const aLength = a.length;
	    const bLength = b.length;

	    if (aLength - bLength > threshold) {
	      return undefined;
	    }

	    const rows = this._rows;

	    for (let j = 0; j <= bLength; j++) {
	      rows[0][j] = j;
	    }

	    for (let i = 1; i <= aLength; i++) {
	      const upRow = rows[(i - 1) % 3];
	      const currentRow = rows[i % 3];
	      let smallestCell = (currentRow[0] = i);

	      for (let j = 1; j <= bLength; j++) {
	        const cost = a[i - 1] === b[j - 1] ? 0 : 1;
	        let currentCell = Math.min(
	          upRow[j] + 1, // delete
	          currentRow[j - 1] + 1, // insert
	          upRow[j - 1] + cost, // substitute
	        );

	        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
	          // transposition
	          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];
	          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
	        }

	        if (currentCell < smallestCell) {
	          smallestCell = currentCell;
	        }

	        currentRow[j] = currentCell;
	      } // Early exit, since distance can't go smaller than smallest element of the previous row.

	      if (smallestCell > threshold) {
	        return undefined;
	      }
	    }

	    const distance = rows[aLength % 3][bLength];
	    return distance <= threshold ? distance : undefined;
	  }
	}

	function stringToArray(str) {
	  const strLength = str.length;
	  const array = new Array(strLength);

	  for (let i = 0; i < strLength; ++i) {
	    array[i] = str.charCodeAt(i);
	  }

	  return array;
	}

	function toObjMap(obj) {
	  if (obj == null) {
	    return Object.create(null);
	  }

	  if (Object.getPrototypeOf(obj) === null) {
	    return obj;
	  }

	  const map = Object.create(null);

	  for (const [key, value] of Object.entries(obj)) {
	    map[key] = value;
	  }

	  return map;
	}

	/**
	 * Prints a string as a GraphQL StringValue literal. Replaces control characters
	 * and excluded characters (" U+0022 and \\ U+005C) with escape sequences.
	 */
	function printString(str) {
	  return `"${str.replace(escapedRegExp, escapedReplacer)}"`;
	} // eslint-disable-next-line no-control-regex

	const escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;

	function escapedReplacer(str) {
	  return escapeSequences[str.charCodeAt(0)];
	} // prettier-ignore

	const escapeSequences = [
	  '\\u0000',
	  '\\u0001',
	  '\\u0002',
	  '\\u0003',
	  '\\u0004',
	  '\\u0005',
	  '\\u0006',
	  '\\u0007',
	  '\\b',
	  '\\t',
	  '\\n',
	  '\\u000B',
	  '\\f',
	  '\\r',
	  '\\u000E',
	  '\\u000F',
	  '\\u0010',
	  '\\u0011',
	  '\\u0012',
	  '\\u0013',
	  '\\u0014',
	  '\\u0015',
	  '\\u0016',
	  '\\u0017',
	  '\\u0018',
	  '\\u0019',
	  '\\u001A',
	  '\\u001B',
	  '\\u001C',
	  '\\u001D',
	  '\\u001E',
	  '\\u001F',
	  '',
	  '',
	  '\\"',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '', // 2F
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '', // 3F
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '', // 4F
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '\\\\',
	  '',
	  '',
	  '', // 5F
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '', // 6F
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '',
	  '\\u007F',
	  '\\u0080',
	  '\\u0081',
	  '\\u0082',
	  '\\u0083',
	  '\\u0084',
	  '\\u0085',
	  '\\u0086',
	  '\\u0087',
	  '\\u0088',
	  '\\u0089',
	  '\\u008A',
	  '\\u008B',
	  '\\u008C',
	  '\\u008D',
	  '\\u008E',
	  '\\u008F',
	  '\\u0090',
	  '\\u0091',
	  '\\u0092',
	  '\\u0093',
	  '\\u0094',
	  '\\u0095',
	  '\\u0096',
	  '\\u0097',
	  '\\u0098',
	  '\\u0099',
	  '\\u009A',
	  '\\u009B',
	  '\\u009C',
	  '\\u009D',
	  '\\u009E',
	  '\\u009F',
	];

	/**
	 * A visitor is provided to visit, it contains the collection of
	 * relevant functions to be called during the visitor's traversal.
	 */

	const BREAK = Object.freeze({});
	/**
	 * visit() will walk through an AST using a depth-first traversal, calling
	 * the visitor's enter function at each node in the traversal, and calling the
	 * leave function after visiting that node and all of its child nodes.
	 *
	 * By returning different values from the enter and leave functions, the
	 * behavior of the visitor can be altered, including skipping over a sub-tree of
	 * the AST (by returning false), editing the AST by returning a value or null
	 * to remove the value, or to stop the whole traversal by returning BREAK.
	 *
	 * When using visit() to edit an AST, the original AST will not be modified, and
	 * a new version of the AST with the changes applied will be returned from the
	 * visit function.
	 *
	 * ```ts
	 * const editedAST = visit(ast, {
	 *   enter(node, key, parent, path, ancestors) {
	 *     // @return
	 *     //   undefined: no action
	 *     //   false: skip visiting this node
	 *     //   visitor.BREAK: stop visiting altogether
	 *     //   null: delete this node
	 *     //   any value: replace this node with the returned value
	 *   },
	 *   leave(node, key, parent, path, ancestors) {
	 *     // @return
	 *     //   undefined: no action
	 *     //   false: no action
	 *     //   visitor.BREAK: stop visiting altogether
	 *     //   null: delete this node
	 *     //   any value: replace this node with the returned value
	 *   }
	 * });
	 * ```
	 *
	 * Alternatively to providing enter() and leave() functions, a visitor can
	 * instead provide functions named the same as the kinds of AST nodes, or
	 * enter/leave visitors at a named key, leading to three permutations of the
	 * visitor API:
	 *
	 * 1) Named visitors triggered when entering a node of a specific kind.
	 *
	 * ```ts
	 * visit(ast, {
	 *   Kind(node) {
	 *     // enter the "Kind" node
	 *   }
	 * })
	 * ```
	 *
	 * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.
	 *
	 * ```ts
	 * visit(ast, {
	 *   Kind: {
	 *     enter(node) {
	 *       // enter the "Kind" node
	 *     }
	 *     leave(node) {
	 *       // leave the "Kind" node
	 *     }
	 *   }
	 * })
	 * ```
	 *
	 * 3) Generic visitors that trigger upon entering and leaving any node.
	 *
	 * ```ts
	 * visit(ast, {
	 *   enter(node) {
	 *     // enter any node
	 *   },
	 *   leave(node) {
	 *     // leave any node
	 *   }
	 * })
	 * ```
	 */

	function visit(root, visitor, visitorKeys = QueryDocumentKeys) {
	  const enterLeaveMap = new Map();

	  for (const kind of Object.values(Kind)) {
	    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
	  }
	  /* eslint-disable no-undef-init */

	  let stack = undefined;
	  let inArray = Array.isArray(root);
	  let keys = [root];
	  let index = -1;
	  let edits = [];
	  let node = root;
	  let key = undefined;
	  let parent = undefined;
	  const path = [];
	  const ancestors = [];
	  /* eslint-enable no-undef-init */

	  do {
	    index++;
	    const isLeaving = index === keys.length;
	    const isEdited = isLeaving && edits.length !== 0;

	    if (isLeaving) {
	      key = ancestors.length === 0 ? undefined : path[path.length - 1];
	      node = parent;
	      parent = ancestors.pop();

	      if (isEdited) {
	        if (inArray) {
	          node = node.slice();
	          let editOffset = 0;

	          for (const [editKey, editValue] of edits) {
	            const arrayKey = editKey - editOffset;

	            if (editValue === null) {
	              node.splice(arrayKey, 1);
	              editOffset++;
	            } else {
	              node[arrayKey] = editValue;
	            }
	          }
	        } else {
	          node = Object.defineProperties(
	            {},
	            Object.getOwnPropertyDescriptors(node),
	          );

	          for (const [editKey, editValue] of edits) {
	            node[editKey] = editValue;
	          }
	        }
	      }

	      index = stack.index;
	      keys = stack.keys;
	      edits = stack.edits;
	      inArray = stack.inArray;
	      stack = stack.prev;
	    } else if (parent) {
	      key = inArray ? index : keys[index];
	      node = parent[key];

	      if (node === null || node === undefined) {
	        continue;
	      }

	      path.push(key);
	    }

	    let result;

	    if (!Array.isArray(node)) {
	      var _enterLeaveMap$get, _enterLeaveMap$get2;

	      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect$2(node)}.`);
	      const visitFn = isLeaving
	        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||
	          _enterLeaveMap$get === void 0
	          ? void 0
	          : _enterLeaveMap$get.leave
	        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||
	          _enterLeaveMap$get2 === void 0
	        ? void 0
	        : _enterLeaveMap$get2.enter;
	      result =
	        visitFn === null || visitFn === void 0
	          ? void 0
	          : visitFn.call(visitor, node, key, parent, path, ancestors);

	      if (result === BREAK) {
	        break;
	      }

	      if (result === false) {
	        if (!isLeaving) {
	          path.pop();
	          continue;
	        }
	      } else if (result !== undefined) {
	        edits.push([key, result]);

	        if (!isLeaving) {
	          if (isNode(result)) {
	            node = result;
	          } else {
	            path.pop();
	            continue;
	          }
	        }
	      }
	    }

	    if (result === undefined && isEdited) {
	      edits.push([key, node]);
	    }

	    if (isLeaving) {
	      path.pop();
	    } else {
	      var _node$kind;

	      stack = {
	        inArray,
	        index,
	        keys,
	        edits,
	        prev: stack,
	      };
	      inArray = Array.isArray(node);
	      keys = inArray
	        ? node
	        : (_node$kind = visitorKeys[node.kind]) !== null &&
	          _node$kind !== void 0
	        ? _node$kind
	        : [];
	      index = -1;
	      edits = [];

	      if (parent) {
	        ancestors.push(parent);
	      }

	      parent = node;
	    }
	  } while (stack !== undefined);

	  if (edits.length !== 0) {
	    // New root
	    return edits[edits.length - 1][1];
	  }

	  return root;
	}
	/**
	 * Creates a new visitor instance which delegates to many visitors to run in
	 * parallel. Each visitor will be visited for each node before moving on.
	 *
	 * If a prior visitor edits a node, no following visitors will see that node.
	 */

	function visitInParallel(visitors) {
	  const skipping = new Array(visitors.length).fill(null);
	  const mergedVisitor = Object.create(null);

	  for (const kind of Object.values(Kind)) {
	    let hasVisitor = false;
	    const enterList = new Array(visitors.length).fill(undefined);
	    const leaveList = new Array(visitors.length).fill(undefined);

	    for (let i = 0; i < visitors.length; ++i) {
	      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);
	      hasVisitor || (hasVisitor = enter != null || leave != null);
	      enterList[i] = enter;
	      leaveList[i] = leave;
	    }

	    if (!hasVisitor) {
	      continue;
	    }

	    const mergedEnterLeave = {
	      enter(...args) {
	        const node = args[0];

	        for (let i = 0; i < visitors.length; i++) {
	          if (skipping[i] === null) {
	            var _enterList$i;

	            const result =
	              (_enterList$i = enterList[i]) === null || _enterList$i === void 0
	                ? void 0
	                : _enterList$i.apply(visitors[i], args);

	            if (result === false) {
	              skipping[i] = node;
	            } else if (result === BREAK) {
	              skipping[i] = BREAK;
	            } else if (result !== undefined) {
	              return result;
	            }
	          }
	        }
	      },

	      leave(...args) {
	        const node = args[0];

	        for (let i = 0; i < visitors.length; i++) {
	          if (skipping[i] === null) {
	            var _leaveList$i;

	            const result =
	              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0
	                ? void 0
	                : _leaveList$i.apply(visitors[i], args);

	            if (result === BREAK) {
	              skipping[i] = BREAK;
	            } else if (result !== undefined && result !== false) {
	              return result;
	            }
	          } else if (skipping[i] === node) {
	            skipping[i] = null;
	          }
	        }
	      },
	    };
	    mergedVisitor[kind] = mergedEnterLeave;
	  }

	  return mergedVisitor;
	}
	/**
	 * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.
	 */

	function getEnterLeaveForKind(visitor, kind) {
	  const kindVisitor = visitor[kind];

	  if (typeof kindVisitor === 'object') {
	    // { Kind: { enter() {}, leave() {} } }
	    return kindVisitor;
	  } else if (typeof kindVisitor === 'function') {
	    // { Kind() {} }
	    return {
	      enter: kindVisitor,
	      leave: undefined,
	    };
	  } // { enter() {}, leave() {} }

	  return {
	    enter: visitor.enter,
	    leave: visitor.leave,
	  };
	}
	/**
	 * Given a visitor instance, if it is leaving or not, and a node kind, return
	 * the function the visitor runtime should call.
	 *
	 * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17
	 */

	/* c8 ignore next 8 */

	function getVisitFn(visitor, kind, isLeaving) {
	  const { enter, leave } = getEnterLeaveForKind(visitor, kind);
	  return isLeaving ? leave : enter;
	}

	/**
	 * Converts an AST into a string, using one set of reasonable
	 * formatting rules.
	 */

	function print$1(ast) {
	  return visit(ast, printDocASTReducer);
	}
	const MAX_LINE_LENGTH = 80;
	const printDocASTReducer = {
	  Name: {
	    leave: (node) => node.value,
	  },
	  Variable: {
	    leave: (node) => '$' + node.name,
	  },
	  // Document
	  Document: {
	    leave: (node) => join$1(node.definitions, '\n\n'),
	  },
	  OperationDefinition: {
	    leave(node) {
	      const varDefs = wrap('(', join$1(node.variableDefinitions, ', '), ')');
	      const prefix = join$1(
	        [
	          node.operation,
	          join$1([node.name, varDefs]),
	          join$1(node.directives, ' '),
	        ],
	        ' ',
	      ); // Anonymous queries with no directives or variable definitions can use
	      // the query short form.

	      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;
	    },
	  },
	  VariableDefinition: {
	    leave: ({ variable, type, defaultValue, directives }) =>
	      variable +
	      ': ' +
	      type +
	      wrap(' = ', defaultValue) +
	      wrap(' ', join$1(directives, ' ')),
	  },
	  SelectionSet: {
	    leave: ({ selections }) => block(selections),
	  },
	  Field: {
	    leave({ alias, name, arguments: args, directives, selectionSet }) {
	      const prefix = wrap('', alias, ': ') + name;
	      let argsLine = prefix + wrap('(', join$1(args, ', '), ')');

	      if (argsLine.length > MAX_LINE_LENGTH) {
	        argsLine = prefix + wrap('(\n', indent(join$1(args, '\n')), '\n)');
	      }

	      return join$1([argsLine, join$1(directives, ' '), selectionSet], ' ');
	    },
	  },
	  Argument: {
	    leave: ({ name, value }) => name + ': ' + value,
	  },
	  // Fragments
	  FragmentSpread: {
	    leave: ({ name, directives }) =>
	      '...' + name + wrap(' ', join$1(directives, ' ')),
	  },
	  InlineFragment: {
	    leave: ({ typeCondition, directives, selectionSet }) =>
	      join$1(
	        [
	          '...',
	          wrap('on ', typeCondition),
	          join$1(directives, ' '),
	          selectionSet,
	        ],
	        ' ',
	      ),
	  },
	  FragmentDefinition: {
	    leave: (
	      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed
	    ) =>
	      // or removed in the future.
	      `fragment ${name}${wrap('(', join$1(variableDefinitions, ', '), ')')} ` +
	      `on ${typeCondition} ${wrap('', join$1(directives, ' '), ' ')}` +
	      selectionSet,
	  },
	  // Value
	  IntValue: {
	    leave: ({ value }) => value,
	  },
	  FloatValue: {
	    leave: ({ value }) => value,
	  },
	  StringValue: {
	    leave: ({ value, block: isBlockString }) =>
	      isBlockString ? printBlockString(value) : printString(value),
	  },
	  BooleanValue: {
	    leave: ({ value }) => (value ? 'true' : 'false'),
	  },
	  NullValue: {
	    leave: () => 'null',
	  },
	  EnumValue: {
	    leave: ({ value }) => value,
	  },
	  ListValue: {
	    leave: ({ values }) => '[' + join$1(values, ', ') + ']',
	  },
	  ObjectValue: {
	    leave: ({ fields }) => '{' + join$1(fields, ', ') + '}',
	  },
	  ObjectField: {
	    leave: ({ name, value }) => name + ': ' + value,
	  },
	  // Directive
	  Directive: {
	    leave: ({ name, arguments: args }) =>
	      '@' + name + wrap('(', join$1(args, ', '), ')'),
	  },
	  // Type
	  NamedType: {
	    leave: ({ name }) => name,
	  },
	  ListType: {
	    leave: ({ type }) => '[' + type + ']',
	  },
	  NonNullType: {
	    leave: ({ type }) => type + '!',
	  },
	  // Type System Definitions
	  SchemaDefinition: {
	    leave: ({ description, directives, operationTypes }) =>
	      wrap('', description, '\n') +
	      join$1(['schema', join$1(directives, ' '), block(operationTypes)], ' '),
	  },
	  OperationTypeDefinition: {
	    leave: ({ operation, type }) => operation + ': ' + type,
	  },
	  ScalarTypeDefinition: {
	    leave: ({ description, name, directives }) =>
	      wrap('', description, '\n') +
	      join$1(['scalar', name, join$1(directives, ' ')], ' '),
	  },
	  ObjectTypeDefinition: {
	    leave: ({ description, name, interfaces, directives, fields }) =>
	      wrap('', description, '\n') +
	      join$1(
	        [
	          'type',
	          name,
	          wrap('implements ', join$1(interfaces, ' & ')),
	          join$1(directives, ' '),
	          block(fields),
	        ],
	        ' ',
	      ),
	  },
	  FieldDefinition: {
	    leave: ({ description, name, arguments: args, type, directives }) =>
	      wrap('', description, '\n') +
	      name +
	      (hasMultilineItems(args)
	        ? wrap('(\n', indent(join$1(args, '\n')), '\n)')
	        : wrap('(', join$1(args, ', '), ')')) +
	      ': ' +
	      type +
	      wrap(' ', join$1(directives, ' ')),
	  },
	  InputValueDefinition: {
	    leave: ({ description, name, type, defaultValue, directives }) =>
	      wrap('', description, '\n') +
	      join$1(
	        [name + ': ' + type, wrap('= ', defaultValue), join$1(directives, ' ')],
	        ' ',
	      ),
	  },
	  InterfaceTypeDefinition: {
	    leave: ({ description, name, interfaces, directives, fields }) =>
	      wrap('', description, '\n') +
	      join$1(
	        [
	          'interface',
	          name,
	          wrap('implements ', join$1(interfaces, ' & ')),
	          join$1(directives, ' '),
	          block(fields),
	        ],
	        ' ',
	      ),
	  },
	  UnionTypeDefinition: {
	    leave: ({ description, name, directives, types }) =>
	      wrap('', description, '\n') +
	      join$1(
	        ['union', name, join$1(directives, ' '), wrap('= ', join$1(types, ' | '))],
	        ' ',
	      ),
	  },
	  EnumTypeDefinition: {
	    leave: ({ description, name, directives, values }) =>
	      wrap('', description, '\n') +
	      join$1(['enum', name, join$1(directives, ' '), block(values)], ' '),
	  },
	  EnumValueDefinition: {
	    leave: ({ description, name, directives }) =>
	      wrap('', description, '\n') + join$1([name, join$1(directives, ' ')], ' '),
	  },
	  InputObjectTypeDefinition: {
	    leave: ({ description, name, directives, fields }) =>
	      wrap('', description, '\n') +
	      join$1(['input', name, join$1(directives, ' '), block(fields)], ' '),
	  },
	  DirectiveDefinition: {
	    leave: ({ description, name, arguments: args, repeatable, locations }) =>
	      wrap('', description, '\n') +
	      'directive @' +
	      name +
	      (hasMultilineItems(args)
	        ? wrap('(\n', indent(join$1(args, '\n')), '\n)')
	        : wrap('(', join$1(args, ', '), ')')) +
	      (repeatable ? ' repeatable' : '') +
	      ' on ' +
	      join$1(locations, ' | '),
	  },
	  SchemaExtension: {
	    leave: ({ directives, operationTypes }) =>
	      join$1(
	        ['extend schema', join$1(directives, ' '), block(operationTypes)],
	        ' ',
	      ),
	  },
	  ScalarTypeExtension: {
	    leave: ({ name, directives }) =>
	      join$1(['extend scalar', name, join$1(directives, ' ')], ' '),
	  },
	  ObjectTypeExtension: {
	    leave: ({ name, interfaces, directives, fields }) =>
	      join$1(
	        [
	          'extend type',
	          name,
	          wrap('implements ', join$1(interfaces, ' & ')),
	          join$1(directives, ' '),
	          block(fields),
	        ],
	        ' ',
	      ),
	  },
	  InterfaceTypeExtension: {
	    leave: ({ name, interfaces, directives, fields }) =>
	      join$1(
	        [
	          'extend interface',
	          name,
	          wrap('implements ', join$1(interfaces, ' & ')),
	          join$1(directives, ' '),
	          block(fields),
	        ],
	        ' ',
	      ),
	  },
	  UnionTypeExtension: {
	    leave: ({ name, directives, types }) =>
	      join$1(
	        [
	          'extend union',
	          name,
	          join$1(directives, ' '),
	          wrap('= ', join$1(types, ' | ')),
	        ],
	        ' ',
	      ),
	  },
	  EnumTypeExtension: {
	    leave: ({ name, directives, values }) =>
	      join$1(['extend enum', name, join$1(directives, ' '), block(values)], ' '),
	  },
	  InputObjectTypeExtension: {
	    leave: ({ name, directives, fields }) =>
	      join$1(['extend input', name, join$1(directives, ' '), block(fields)], ' '),
	  },
	};
	/**
	 * Given maybeArray, print an empty string if it is null or empty, otherwise
	 * print all items together separated by separator if provided
	 */

	function join$1(maybeArray, separator = '') {
	  var _maybeArray$filter$jo;

	  return (_maybeArray$filter$jo =
	    maybeArray === null || maybeArray === void 0
	      ? void 0
	      : maybeArray.filter((x) => x).join(separator)) !== null &&
	    _maybeArray$filter$jo !== void 0
	    ? _maybeArray$filter$jo
	    : '';
	}
	/**
	 * Given array, print each item on its own line, wrapped in an indented `{ }` block.
	 */

	function block(array) {
	  return wrap('{\n', indent(join$1(array, '\n')), '\n}');
	}
	/**
	 * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
	 */

	function wrap(start, maybeString, end = '') {
	  return maybeString != null && maybeString !== ''
	    ? start + maybeString + end
	    : '';
	}

	function indent(str) {
	  return wrap('  ', str.replace(/\n/g, '\n  '));
	}

	function hasMultilineItems(maybeArray) {
	  var _maybeArray$some;

	  // FIXME: https://github.com/graphql/graphql-js/issues/2203

	  /* c8 ignore next */
	  return (_maybeArray$some =
	    maybeArray === null || maybeArray === void 0
	      ? void 0
	      : maybeArray.some((str) => str.includes('\n'))) !== null &&
	    _maybeArray$some !== void 0
	    ? _maybeArray$some
	    : false;
	}

	/**
	 * Produces a JavaScript value given a GraphQL Value AST.
	 *
	 * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value
	 * will reflect the provided GraphQL value AST.
	 *
	 * | GraphQL Value        | JavaScript Value |
	 * | -------------------- | ---------------- |
	 * | Input Object         | Object           |
	 * | List                 | Array            |
	 * | Boolean              | Boolean          |
	 * | String / Enum        | String           |
	 * | Int / Float          | Number           |
	 * | Null                 | null             |
	 *
	 */

	function valueFromASTUntyped$1(valueNode, variables) {
	  switch (valueNode.kind) {
	    case Kind.NULL:
	      return null;

	    case Kind.INT:
	      return parseInt(valueNode.value, 10);

	    case Kind.FLOAT:
	      return parseFloat(valueNode.value);

	    case Kind.STRING:
	    case Kind.ENUM:
	    case Kind.BOOLEAN:
	      return valueNode.value;

	    case Kind.LIST:
	      return valueNode.values.map((node) =>
	        valueFromASTUntyped$1(node, variables),
	      );

	    case Kind.OBJECT:
	      return keyValMap(
	        valueNode.fields,
	        (field) => field.name.value,
	        (field) => valueFromASTUntyped$1(field.value, variables),
	      );

	    case Kind.VARIABLE:
	      return variables === null || variables === void 0
	        ? void 0
	        : variables[valueNode.name.value];
	  }
	}

	/**
	 * Upholds the spec rules about naming.
	 */

	function assertName(name) {
	  name != null || devAssert(false, 'Must provide name.');
	  typeof name === 'string' || devAssert(false, 'Expected name to be a string.');

	  if (name.length === 0) {
	    throw new GraphQLError('Expected name to be a non-empty string.');
	  }

	  for (let i = 1; i < name.length; ++i) {
	    if (!isNameContinue(name.charCodeAt(i))) {
	      throw new GraphQLError(
	        `Names must only contain [_a-zA-Z0-9] but "${name}" does not.`,
	      );
	    }
	  }

	  if (!isNameStart(name.charCodeAt(0))) {
	    throw new GraphQLError(
	      `Names must start with [_a-zA-Z] but "${name}" does not.`,
	    );
	  }

	  return name;
	}
	/**
	 * Upholds the spec rules about naming enum values.
	 *
	 * @internal
	 */

	function assertEnumValueName(name) {
	  if (name === 'true' || name === 'false' || name === 'null') {
	    throw new GraphQLError(`Enum values cannot be named: ${name}`);
	  }

	  return assertName(name);
	}

	function isType(type) {
	  return (
	    isScalarType(type) ||
	    isObjectType(type) ||
	    isInterfaceType(type) ||
	    isUnionType(type) ||
	    isEnumType(type) ||
	    isInputObjectType(type) ||
	    isListType(type) ||
	    isNonNullType(type)
	  );
	}
	function assertType(type) {
	  if (!isType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL type.`);
	  }

	  return type;
	}
	/**
	 * There are predicates for each kind of GraphQL type.
	 */

	function isScalarType(type) {
	  return instanceOf(type, GraphQLScalarType);
	}
	function assertScalarType(type) {
	  if (!isScalarType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL Scalar type.`);
	  }

	  return type;
	}
	function isObjectType(type) {
	  return instanceOf(type, GraphQLObjectType);
	}
	function assertObjectType(type) {
	  if (!isObjectType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL Object type.`);
	  }

	  return type;
	}
	function isInterfaceType(type) {
	  return instanceOf(type, GraphQLInterfaceType);
	}
	function assertInterfaceType(type) {
	  if (!isInterfaceType(type)) {
	    throw new Error(
	      `Expected ${inspect$2(type)} to be a GraphQL Interface type.`,
	    );
	  }

	  return type;
	}
	function isUnionType(type) {
	  return instanceOf(type, GraphQLUnionType);
	}
	function assertUnionType(type) {
	  if (!isUnionType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL Union type.`);
	  }

	  return type;
	}
	function isEnumType(type) {
	  return instanceOf(type, GraphQLEnumType);
	}
	function assertEnumType(type) {
	  if (!isEnumType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL Enum type.`);
	  }

	  return type;
	}
	function isInputObjectType(type) {
	  return instanceOf(type, GraphQLInputObjectType);
	}
	function assertInputObjectType(type) {
	  if (!isInputObjectType(type)) {
	    throw new Error(
	      `Expected ${inspect$2(type)} to be a GraphQL Input Object type.`,
	    );
	  }

	  return type;
	}
	function isListType(type) {
	  return instanceOf(type, GraphQLList);
	}
	function assertListType(type) {
	  if (!isListType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL List type.`);
	  }

	  return type;
	}
	function isNonNullType(type) {
	  return instanceOf(type, GraphQLNonNull);
	}
	function assertNonNullType(type) {
	  if (!isNonNullType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL Non-Null type.`);
	  }

	  return type;
	}
	/**
	 * These types may be used as input types for arguments and directives.
	 */

	function isInputType(type) {
	  return (
	    isScalarType(type) ||
	    isEnumType(type) ||
	    isInputObjectType(type) ||
	    (isWrappingType(type) && isInputType(type.ofType))
	  );
	}
	function assertInputType(type) {
	  if (!isInputType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL input type.`);
	  }

	  return type;
	}
	/**
	 * These types may be used as output types as the result of fields.
	 */

	function isOutputType(type) {
	  return (
	    isScalarType(type) ||
	    isObjectType(type) ||
	    isInterfaceType(type) ||
	    isUnionType(type) ||
	    isEnumType(type) ||
	    (isWrappingType(type) && isOutputType(type.ofType))
	  );
	}
	function assertOutputType(type) {
	  if (!isOutputType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL output type.`);
	  }

	  return type;
	}
	/**
	 * These types may describe types which may be leaf values.
	 */

	function isLeafType(type) {
	  return isScalarType(type) || isEnumType(type);
	}
	function assertLeafType(type) {
	  if (!isLeafType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL leaf type.`);
	  }

	  return type;
	}
	/**
	 * These types may describe the parent context of a selection set.
	 */

	function isCompositeType(type) {
	  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
	}
	function assertCompositeType(type) {
	  if (!isCompositeType(type)) {
	    throw new Error(
	      `Expected ${inspect$2(type)} to be a GraphQL composite type.`,
	    );
	  }

	  return type;
	}
	/**
	 * These types may describe the parent context of a selection set.
	 */

	function isAbstractType(type) {
	  return isInterfaceType(type) || isUnionType(type);
	}
	function assertAbstractType(type) {
	  if (!isAbstractType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL abstract type.`);
	  }

	  return type;
	}
	/**
	 * List Type Wrapper
	 *
	 * A list is a wrapping type which points to another type.
	 * Lists are often created within the context of defining the fields of
	 * an object type.
	 *
	 * Example:
	 *
	 * ```ts
	 * const PersonType = new GraphQLObjectType({
	 *   name: 'Person',
	 *   fields: () => ({
	 *     parents: { type: new GraphQLList(PersonType) },
	 *     children: { type: new GraphQLList(PersonType) },
	 *   })
	 * })
	 * ```
	 */

	class GraphQLList {
	  constructor(ofType) {
	    isType(ofType) ||
	      devAssert(false, `Expected ${inspect$2(ofType)} to be a GraphQL type.`);
	    this.ofType = ofType;
	  }

	  get [Symbol.toStringTag]() {
	    return 'GraphQLList';
	  }

	  toString() {
	    return '[' + String(this.ofType) + ']';
	  }

	  toJSON() {
	    return this.toString();
	  }
	}
	/**
	 * Non-Null Type Wrapper
	 *
	 * A non-null is a wrapping type which points to another type.
	 * Non-null types enforce that their values are never null and can ensure
	 * an error is raised if this ever occurs during a request. It is useful for
	 * fields which you can make a strong guarantee on non-nullability, for example
	 * usually the id field of a database row will never be null.
	 *
	 * Example:
	 *
	 * ```ts
	 * const RowType = new GraphQLObjectType({
	 *   name: 'Row',
	 *   fields: () => ({
	 *     id: { type: new GraphQLNonNull(GraphQLString) },
	 *   })
	 * })
	 * ```
	 * Note: the enforcement of non-nullability occurs within the executor.
	 */

	class GraphQLNonNull {
	  constructor(ofType) {
	    isNullableType(ofType) ||
	      devAssert(
	        false,
	        `Expected ${inspect$2(ofType)} to be a GraphQL nullable type.`,
	      );
	    this.ofType = ofType;
	  }

	  get [Symbol.toStringTag]() {
	    return 'GraphQLNonNull';
	  }

	  toString() {
	    return String(this.ofType) + '!';
	  }

	  toJSON() {
	    return this.toString();
	  }
	}
	/**
	 * These types wrap and modify other types
	 */

	function isWrappingType(type) {
	  return isListType(type) || isNonNullType(type);
	}
	function assertWrappingType(type) {
	  if (!isWrappingType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL wrapping type.`);
	  }

	  return type;
	}
	/**
	 * These types can all accept null as a value.
	 */

	function isNullableType(type) {
	  return isType(type) && !isNonNullType(type);
	}
	function assertNullableType(type) {
	  if (!isNullableType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL nullable type.`);
	  }

	  return type;
	}
	function getNullableType(type) {
	  if (type) {
	    return isNonNullType(type) ? type.ofType : type;
	  }
	}
	/**
	 * These named types do not include modifiers like List or NonNull.
	 */

	function isNamedType(type) {
	  return (
	    isScalarType(type) ||
	    isObjectType(type) ||
	    isInterfaceType(type) ||
	    isUnionType(type) ||
	    isEnumType(type) ||
	    isInputObjectType(type)
	  );
	}
	function assertNamedType(type) {
	  if (!isNamedType(type)) {
	    throw new Error(`Expected ${inspect$2(type)} to be a GraphQL named type.`);
	  }

	  return type;
	}
	function getNamedType(type) {
	  if (type) {
	    let unwrappedType = type;

	    while (isWrappingType(unwrappedType)) {
	      unwrappedType = unwrappedType.ofType;
	    }

	    return unwrappedType;
	  }
	}
	/**
	 * Used while defining GraphQL types to allow for circular references in
	 * otherwise immutable type definitions.
	 */

	function resolveReadonlyArrayThunk(thunk) {
	  return typeof thunk === 'function' ? thunk() : thunk;
	}
	function resolveObjMapThunk(thunk) {
	  return typeof thunk === 'function' ? thunk() : thunk;
	}
	/**
	 * Custom extensions
	 *
	 * @remarks
	 * Use a unique identifier name for your extension, for example the name of
	 * your library or project. Do not use a shortened identifier as this increases
	 * the risk of conflicts. We recommend you add at most one extension field,
	 * an object which can contain all the values you need.
	 */

	/**
	 * Scalar Type Definition
	 *
	 * The leaf values of any request and input values to arguments are
	 * Scalars (or Enums) and are defined with a name and a series of functions
	 * used to parse input from ast or variables and to ensure validity.
	 *
	 * If a type's serialize function does not return a value (i.e. it returns
	 * `undefined`) then an error will be raised and a `null` value will be returned
	 * in the response. If the serialize function returns `null`, then no error will
	 * be included in the response.
	 *
	 * Example:
	 *
	 * ```ts
	 * const OddType = new GraphQLScalarType({
	 *   name: 'Odd',
	 *   serialize(value) {
	 *     if (value % 2 === 1) {
	 *       return value;
	 *     }
	 *   }
	 * });
	 * ```
	 */
	class GraphQLScalarType {
	  constructor(config) {
	    var _config$parseValue,
	      _config$serialize,
	      _config$parseLiteral,
	      _config$extensionASTN;

	    const parseValue =
	      (_config$parseValue = config.parseValue) !== null &&
	      _config$parseValue !== void 0
	        ? _config$parseValue
	        : identityFunc;
	    this.name = assertName(config.name);
	    this.description = config.description;
	    this.specifiedByURL = config.specifiedByURL;
	    this.serialize =
	      (_config$serialize = config.serialize) !== null &&
	      _config$serialize !== void 0
	        ? _config$serialize
	        : identityFunc;
	    this.parseValue = parseValue;
	    this.parseLiteral =
	      (_config$parseLiteral = config.parseLiteral) !== null &&
	      _config$parseLiteral !== void 0
	        ? _config$parseLiteral
	        : (node, variables) => parseValue(valueFromASTUntyped$1(node, variables));
	    this.extensions = toObjMap(config.extensions);
	    this.astNode = config.astNode;
	    this.extensionASTNodes =
	      (_config$extensionASTN = config.extensionASTNodes) !== null &&
	      _config$extensionASTN !== void 0
	        ? _config$extensionASTN
	        : [];
	    config.specifiedByURL == null ||
	      typeof config.specifiedByURL === 'string' ||
	      devAssert(
	        false,
	        `${this.name} must provide "specifiedByURL" as a string, ` +
	          `but got: ${inspect$2(config.specifiedByURL)}.`,
	      );
	    config.serialize == null ||
	      typeof config.serialize === 'function' ||
	      devAssert(
	        false,
	        `${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`,
	      );

	    if (config.parseLiteral) {
	      (typeof config.parseValue === 'function' &&
	        typeof config.parseLiteral === 'function') ||
	        devAssert(
	          false,
	          `${this.name} must provide both "parseValue" and "parseLiteral" functions.`,
	        );
	    }
	  }

	  get [Symbol.toStringTag]() {
	    return 'GraphQLScalarType';
	  }

	  toConfig() {
	    return {
	      name: this.name,
	      description: this.description,
	      specifiedByURL: this.specifiedByURL,
	      serialize: this.serialize,
	      parseValue: this.parseValue,
	      parseLiteral: this.parseLiteral,
	      extensions: this.extensions,
	      astNode: this.astNode,
	      extensionASTNodes: this.extensionASTNodes,
	    };
	  }

	  toString() {
	    return this.name;
	  }

	  toJSON() {
	    return this.toString();
	  }
	}

	/**
	 * Object Type Definition
	 *
	 * Almost all of the GraphQL types you define will be object types. Object types
	 * have a name, but most importantly describe their fields.
	 *
	 * Example:
	 *
	 * ```ts
	 * const AddressType = new GraphQLObjectType({
	 *   name: 'Address',
	 *   fields: {
	 *     street: { type: GraphQLString },
	 *     number: { type: GraphQLInt },
	 *     formatted: {
	 *       type: GraphQLString,
	 *       resolve(obj) {
	 *         return obj.number + ' ' + obj.street
	 *       }
	 *     }
	 *   }
	 * });
	 * ```
	 *
	 * When two types need to refer to each other, or a type needs to refer to
	 * itself in a field, you can use a function expression (aka a closure or a
	 * thunk) to supply the fields lazily.
	 *
	 * Example:
	 *
	 * ```ts
	 * const PersonType = new GraphQLObjectType({
	 *   name: 'Person',
	 *   fields: () => ({
	 *     name: { type: GraphQLString },
	 *     bestFriend: { type: PersonType },
	 *   })
	 * });
	 * ```
	 */
	class GraphQLObjectType {
	  constructor(config) {
	    var _config$extensionASTN2;

	    this.name = assertName(config.name);
	    this.description = config.description;
	    this.isTypeOf = config.isTypeOf;
	    this.extensions = toObjMap(config.extensions);
	    this.astNode = config.astNode;
	    this.extensionASTNodes =
	      (_config$extensionASTN2 = config.extensionASTNodes) !== null &&
	      _config$extensionASTN2 !== void 0
	        ? _config$extensionASTN2
	        : [];

	    this._fields = () => defineFieldMap(config);

	    this._interfaces = () => defineInterfaces(config);

	    config.isTypeOf == null ||
	      typeof config.isTypeOf === 'function' ||
	      devAssert(
	        false,
	        `${this.name} must provide "isTypeOf" as a function, ` +
	          `but got: ${inspect$2(config.isTypeOf)}.`,
	      );
	  }

	  get [Symbol.toStringTag]() {
	    return 'GraphQLObjectType';
	  }

	  getFields() {
	    if (typeof this._fields === 'function') {
	      this._fields = this._fields();
	    }

	    return this._fields;
	  }

	  getInterfaces() {
	    if (typeof this._interfaces === 'function') {
	      this._interfaces = this._interfaces();
	    }

	    return this._interfaces;
	  }

	  toConfig() {
	    return {
	      name: this.name,
	      description: this.description,
	      interfaces: this.getInterfaces(),
	      fields: fieldsToFieldsConfig(this.getFields()),
	      isTypeOf: this.isTypeOf,
	      extensions: this.extensions,
	      astNode: this.astNode,
	      extensionASTNodes: this.extensionASTNodes,
	    };
	  }

	  toString() {
	    return this.name;
	  }

	  toJSON() {
	    return this.toString();
	  }
	}

	function defineInterfaces(config) {
	  var _config$interfaces;

	  const interfaces = resolveReadonlyArrayThunk(
	    (_config$interfaces = config.interfaces) !== null &&
	      _config$interfaces !== void 0
	      ? _config$interfaces
	      : [],
	  );
	  Array.isArray(interfaces) ||
	    devAssert(
	      false,
	      `${config.name} interfaces must be an Array or a function which returns an Array.`,
	    );
	  return interfaces;
	}

	function defineFieldMap(config) {
	  const fieldMap = resolveObjMapThunk(config.fields);
	  isPlainObj(fieldMap) ||
	    devAssert(
	      false,
	      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,
	    );
	  return mapValue(fieldMap, (fieldConfig, fieldName) => {
	    var _fieldConfig$args;

	    isPlainObj(fieldConfig) ||
	      devAssert(
	        false,
	        `${config.name}.${fieldName} field config must be an object.`,
	      );
	    fieldConfig.resolve == null ||
	      typeof fieldConfig.resolve === 'function' ||
	      devAssert(
	        false,
	        `${config.name}.${fieldName} field resolver must be a function if ` +
	          `provided, but got: ${inspect$2(fieldConfig.resolve)}.`,
	      );
	    const argsConfig =
	      (_fieldConfig$args = fieldConfig.args) !== null &&
	      _fieldConfig$args !== void 0
	        ? _fieldConfig$args
	        : {};
	    isPlainObj(argsConfig) ||
	      devAssert(
	        false,
	        `${config.name}.${fieldName} args must be an object with argument names as keys.`,
	      );
	    return {
	      name: assertName(fieldName),
	      description: fieldConfig.description,
	      type: fieldConfig.type,
	      args: defineArguments(argsConfig),
	      resolve: fieldConfig.resolve,
	      subscribe: fieldConfig.subscribe,
	      deprecationReason: fieldConfig.deprecationReason,
	      extensions: toObjMap(fieldConfig.extensions),
	      astNode: fieldConfig.astNode,
	    };
	  });
	}

	function defineArguments(config) {
	  return Object.entries(config).map(([argName, argConfig]) => ({
	    name: assertName(argName),
	    description: argConfig.description,
	    type: argConfig.type,
	    defaultValue: argConfig.defaultValue,
	    deprecationReason: argConfig.deprecationReason,
	    extensions: toObjMap(argConfig.extensions),
	    astNode: argConfig.astNode,
	  }));
	}

	function isPlainObj(obj) {
	  return isObjectLike(obj) && !Array.isArray(obj);
	}

	function fieldsToFieldsConfig(fields) {
	  return mapValue(fields, (field) => ({
	    description: field.description,
	    type: field.type,
	    args: argsToArgsConfig(field.args),
	    resolve: field.resolve,
	    subscribe: field.subscribe,
	    deprecationReason: field.deprecationReason,
	    extensions: field.extensions,
	    astNode: field.astNode,
	  }));
	}
	/**
	 * @internal
	 */

	function argsToArgsConfig(args) {
	  return keyValMap(
	    args,
	    (arg) => arg.name,
	    (arg) => ({
	      description: arg.description,
	      type: arg.type,
	      defaultValue: arg.defaultValue,
	      deprecationReason: arg.deprecationReason,
	      extensions: arg.extensions,
	      astNode: arg.astNode,
	    }),
	  );
	}
	function isRequiredArgument(arg) {
	  return isNonNullType(arg.type) && arg.defaultValue === undefined;
	}

	/**
	 * Interface Type Definition
	 *
	 * When a field can return one of a heterogeneous set of types, a Interface type
	 * is used to describe what types are possible, what fields are in common across
	 * all types, as well as a function to determine which type is actually used
	 * when the field is resolved.
	 *
	 * Example:
	 *
	 * ```ts
	 * const EntityType = new GraphQLInterfaceType({
	 *   name: 'Entity',
	 *   fields: {
	 *     name: { type: GraphQLString }
	 *   }
	 * });
	 * ```
	 */
	class GraphQLInterfaceType {
	  constructor(config) {
	    var _config$extensionASTN3;

	    this.name = assertName(config.name);
	    this.description = config.description;
	    this.resolveType = config.resolveType;
	    this.extensions = toObjMap(config.extensions);
	    this.astNode = config.astNode;
	    this.extensionASTNodes =
	      (_config$extensionASTN3 = config.extensionASTNodes) !== null &&
	      _config$extensionASTN3 !== void 0
	        ? _config$extensionASTN3
	        : [];
	    this._fields = defineFieldMap.bind(undefined, config);
	    this._interfaces = defineInterfaces.bind(undefined, config);
	    config.resolveType == null ||
	      typeof config.resolveType === 'function' ||
	      devAssert(
	        false,
	        `${this.name} must provide "resolveType" as a function, ` +
	          `but got: ${inspect$2(config.resolveType)}.`,
	      );
	  }

	  get [Symbol.toStringTag]() {
	    return 'GraphQLInterfaceType';
	  }

	  getFields() {
	    if (typeof this._fields === 'function') {
	      this._fields = this._fields();
	    }

	    return this._fields;
	  }

	  getInterfaces() {
	    if (typeof this._interfaces === 'function') {
	      this._interfaces = this._interfaces();
	    }

	    return this._interfaces;
	  }

	  toConfig() {
	    return {
	      name: this.name,
	      description: this.description,
	      interfaces: this.getInterfaces(),
	      fields: fieldsToFieldsConfig(this.getFields()),
	      resolveType: this.resolveType,
	      extensions: this.extensions,
	      astNode: this.astNode,
	      extensionASTNodes: this.extensionASTNodes,
	    };
	  }

	  toString() {
	    return this.name;
	  }

	  toJSON() {
	    return this.toString();
	  }
	}

	/**
	 * Union Type Definition
	 *
	 * When a field can return one of a heterogeneous set of types, a Union type
	 * is used to describe what types are possible as well as providing a function
	 * to determine which type is actually used when the field is resolved.
	 *
	 * Example:
	 *
	 * ```ts
	 * const PetType = new GraphQLUnionType({
	 *   name: 'Pet',
	 *   types: [ DogType, CatType ],
	 *   resolveType(value) {
	 *     if (value instanceof Dog) {
	 *       return DogType;
	 *     }
	 *     if (value instanceof Cat) {
	 *       return CatType;
	 *     }
	 *   }
	 * });
	 * ```
	 */
	class GraphQLUnionType {
	  constructor(config) {
	    var _config$extensionASTN4;

	    this.name = assertName(config.name);
	    this.description = config.description;
	    this.resolveType = config.resolveType;
	    this.extensions = toObjMap(config.extensions);
	    this.astNode = config.astNode;
	    this.extensionASTNodes =
	      (_config$extensionASTN4 = config.extensionASTNodes) !== null &&
	      _config$extensionASTN4 !== void 0
	        ? _config$extensionASTN4
	        : [];
	    this._types = defineTypes.bind(undefined, config);
	    config.resolveType == null ||
	      typeof config.resolveType === 'function' ||
	      devAssert(
	        false,
	        `${this.name} must provide "resolveType" as a function, ` +
	          `but got: ${inspect$2(config.resolveType)}.`,
	      );
	  }

	  get [Symbol.toStringTag]() {
	    return 'GraphQLUnionType';
	  }

	  getTypes() {
	    if (typeof this._types === 'function') {
	      this._types = this._types();
	    }

	    return this._types;
	  }

	  toConfig() {
	    return {
	      name: this.name,
	      description: this.description,
	      types: this.getTypes(),
	      resolveType: this.resolveType,
	      extensions: this.extensions,
	      astNode: this.astNode,
	      extensionASTNodes: this.extensionASTNodes,
	    };
	  }

	  toString() {
	    return this.name;
	  }

	  toJSON() {
	    return this.toString();
	  }
	}

	function defineTypes(config) {
	  const types = resolveReadonlyArrayThunk(config.types);
	  Array.isArray(types) ||
	    devAssert(
	      false,
	      `Must provide Array of types or a function which returns such an array for Union ${config.name}.`,
	    );
	  return types;
	}

	/**
	 * Enum Type Definition
	 *
	 * Some leaf values of requests and input values are Enums. GraphQL serializes
	 * Enum values as strings, however internally Enums can be represented by any
	 * kind of type, often integers.
	 *
	 * Example:
	 *
	 * ```ts
	 * const RGBType = new GraphQLEnumType({
	 *   name: 'RGB',
	 *   values: {
	 *     RED: { value: 0 },
	 *     GREEN: { value: 1 },
	 *     BLUE: { value: 2 }
	 *   }
	 * });
	 * ```
	 *
	 * Note: If a value is not provided in a definition, the name of the enum value
	 * will be used as its internal value.
	 */
	class GraphQLEnumType {
	  /* <T> */
	  constructor(config) {
	    var _config$extensionASTN5;

	    this.name = assertName(config.name);
	    this.description = config.description;
	    this.extensions = toObjMap(config.extensions);
	    this.astNode = config.astNode;
	    this.extensionASTNodes =
	      (_config$extensionASTN5 = config.extensionASTNodes) !== null &&
	      _config$extensionASTN5 !== void 0
	        ? _config$extensionASTN5
	        : [];
	    this._values = defineEnumValues(this.name, config.values);
	    this._valueLookup = new Map(
	      this._values.map((enumValue) => [enumValue.value, enumValue]),
	    );
	    this._nameLookup = keyMap(this._values, (value) => value.name);
	  }

	  get [Symbol.toStringTag]() {
	    return 'GraphQLEnumType';
	  }

	  getValues() {
	    return this._values;
	  }

	  getValue(name) {
	    return this._nameLookup[name];
	  }

	  serialize(outputValue) {
	    const enumValue = this._valueLookup.get(outputValue);

	    if (enumValue === undefined) {
	      throw new GraphQLError(
	        `Enum "${this.name}" cannot represent value: ${inspect$2(outputValue)}`,
	      );
	    }

	    return enumValue.name;
	  }

	  parseValue(inputValue) /* T */
	  {
	    if (typeof inputValue !== 'string') {
	      const valueStr = inspect$2(inputValue);
	      throw new GraphQLError(
	        `Enum "${this.name}" cannot represent non-string value: ${valueStr}.` +
	          didYouMeanEnumValue(this, valueStr),
	      );
	    }

	    const enumValue = this.getValue(inputValue);

	    if (enumValue == null) {
	      throw new GraphQLError(
	        `Value "${inputValue}" does not exist in "${this.name}" enum.` +
	          didYouMeanEnumValue(this, inputValue),
	      );
	    }

	    return enumValue.value;
	  }

	  parseLiteral(valueNode, _variables) /* T */
	  {
	    // Note: variables will be resolved to a value before calling this function.
	    if (valueNode.kind !== Kind.ENUM) {
	      const valueStr = print$1(valueNode);
	      throw new GraphQLError(
	        `Enum "${this.name}" cannot represent non-enum value: ${valueStr}.` +
	          didYouMeanEnumValue(this, valueStr),
	        valueNode,
	      );
	    }

	    const enumValue = this.getValue(valueNode.value);

	    if (enumValue == null) {
	      const valueStr = print$1(valueNode);
	      throw new GraphQLError(
	        `Value "${valueStr}" does not exist in "${this.name}" enum.` +
	          didYouMeanEnumValue(this, valueStr),
	        valueNode,
	      );
	    }

	    return enumValue.value;
	  }

	  toConfig() {
	    const values = keyValMap(
	      this.getValues(),
	      (value) => value.name,
	      (value) => ({
	        description: value.description,
	        value: value.value,
	        deprecationReason: value.deprecationReason,
	        extensions: value.extensions,
	        astNode: value.astNode,
	      }),
	    );
	    return {
	      name: this.name,
	      description: this.description,
	      values,
	      extensions: this.extensions,
	      astNode: this.astNode,
	      extensionASTNodes: this.extensionASTNodes,
	    };
	  }

	  toString() {
	    return this.name;
	  }

	  toJSON() {
	    return this.toString();
	  }
	}

	function didYouMeanEnumValue(enumType, unknownValueStr) {
	  const allNames = enumType.getValues().map((value) => value.name);
	  const suggestedValues = suggestionList$1(unknownValueStr, allNames);
	  return didYouMean$1('the enum value', suggestedValues);
	}

	function defineEnumValues(typeName, valueMap) {
	  isPlainObj(valueMap) ||
	    devAssert(
	      false,
	      `${typeName} values must be an object with value names as keys.`,
	    );
	  return Object.entries(valueMap).map(([valueName, valueConfig]) => {
	    isPlainObj(valueConfig) ||
	      devAssert(
	        false,
	        `${typeName}.${valueName} must refer to an object with a "value" key ` +
	          `representing an internal value but got: ${inspect$2(valueConfig)}.`,
	      );
	    return {
	      name: assertEnumValueName(valueName),
	      description: valueConfig.description,
	      value: valueConfig.value !== undefined ? valueConfig.value : valueName,
	      deprecationReason: valueConfig.deprecationReason,
	      extensions: toObjMap(valueConfig.extensions),
	      astNode: valueConfig.astNode,
	    };
	  });
	}

	/**
	 * Input Object Type Definition
	 *
	 * An input object defines a structured collection of fields which may be
	 * supplied to a field argument.
	 *
	 * Using `NonNull` will ensure that a value must be provided by the query
	 *
	 * Example:
	 *
	 * ```ts
	 * const GeoPoint = new GraphQLInputObjectType({
	 *   name: 'GeoPoint',
	 *   fields: {
	 *     lat: { type: new GraphQLNonNull(GraphQLFloat) },
	 *     lon: { type: new GraphQLNonNull(GraphQLFloat) },
	 *     alt: { type: GraphQLFloat, defaultValue: 0 },
	 *   }
	 * });
	 * ```
	 */
	class GraphQLInputObjectType {
	  constructor(config) {
	    var _config$extensionASTN6;

	    this.name = assertName(config.name);
	    this.description = config.description;
	    this.extensions = toObjMap(config.extensions);
	    this.astNode = config.astNode;
	    this.extensionASTNodes =
	      (_config$extensionASTN6 = config.extensionASTNodes) !== null &&
	      _config$extensionASTN6 !== void 0
	        ? _config$extensionASTN6
	        : [];
	    this._fields = defineInputFieldMap.bind(undefined, config);
	  }

	  get [Symbol.toStringTag]() {
	    return 'GraphQLInputObjectType';
	  }

	  getFields() {
	    if (typeof this._fields === 'function') {
	      this._fields = this._fields();
	    }

	    return this._fields;
	  }

	  toConfig() {
	    const fields = mapValue(this.getFields(), (field) => ({
	      description: field.description,
	      type: field.type,
	      defaultValue: field.defaultValue,
	      deprecationReason: field.deprecationReason,
	      extensions: field.extensions,
	      astNode: field.astNode,
	    }));
	    return {
	      name: this.name,
	      description: this.description,
	      fields,
	      extensions: this.extensions,
	      astNode: this.astNode,
	      extensionASTNodes: this.extensionASTNodes,
	    };
	  }

	  toString() {
	    return this.name;
	  }

	  toJSON() {
	    return this.toString();
	  }
	}

	function defineInputFieldMap(config) {
	  const fieldMap = resolveObjMapThunk(config.fields);
	  isPlainObj(fieldMap) ||
	    devAssert(
	      false,
	      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,
	    );
	  return mapValue(fieldMap, (fieldConfig, fieldName) => {
	    !('resolve' in fieldConfig) ||
	      devAssert(
	        false,
	        `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`,
	      );
	    return {
	      name: assertName(fieldName),
	      description: fieldConfig.description,
	      type: fieldConfig.type,
	      defaultValue: fieldConfig.defaultValue,
	      deprecationReason: fieldConfig.deprecationReason,
	      extensions: toObjMap(fieldConfig.extensions),
	      astNode: fieldConfig.astNode,
	    };
	  });
	}

	function isRequiredInputField(field) {
	  return isNonNullType(field.type) && field.defaultValue === undefined;
	}

	/**
	 * Provided two types, return true if the types are equal (invariant).
	 */
	function isEqualType(typeA, typeB) {
	  // Equivalent types are equal.
	  if (typeA === typeB) {
	    return true;
	  } // If either type is non-null, the other must also be non-null.

	  if (isNonNullType(typeA) && isNonNullType(typeB)) {
	    return isEqualType(typeA.ofType, typeB.ofType);
	  } // If either type is a list, the other must also be a list.

	  if (isListType(typeA) && isListType(typeB)) {
	    return isEqualType(typeA.ofType, typeB.ofType);
	  } // Otherwise the types are not equal.

	  return false;
	}
	/**
	 * Provided a type and a super type, return true if the first type is either
	 * equal or a subset of the second super type (covariant).
	 */

	function isTypeSubTypeOf(schema, maybeSubType, superType) {
	  // Equivalent type is a valid subtype
	  if (maybeSubType === superType) {
	    return true;
	  } // If superType is non-null, maybeSubType must also be non-null.

	  if (isNonNullType(superType)) {
	    if (isNonNullType(maybeSubType)) {
	      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
	    }

	    return false;
	  }

	  if (isNonNullType(maybeSubType)) {
	    // If superType is nullable, maybeSubType may be non-null or nullable.
	    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
	  } // If superType type is a list, maybeSubType type must also be a list.

	  if (isListType(superType)) {
	    if (isListType(maybeSubType)) {
	      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
	    }

	    return false;
	  }

	  if (isListType(maybeSubType)) {
	    // If superType is not a list, maybeSubType must also be not a list.
	    return false;
	  } // If superType type is an abstract type, check if it is super type of maybeSubType.
	  // Otherwise, the child type is not a valid subtype of the parent type.

	  return (
	    isAbstractType(superType) &&
	    (isInterfaceType(maybeSubType) || isObjectType(maybeSubType)) &&
	    schema.isSubType(superType, maybeSubType)
	  );
	}
	/**
	 * Provided two composite types, determine if they "overlap". Two composite
	 * types overlap when the Sets of possible concrete types for each intersect.
	 *
	 * This is often used to determine if a fragment of a given type could possibly
	 * be visited in a context of another type.
	 *
	 * This function is commutative.
	 */

	function doTypesOverlap(schema, typeA, typeB) {
	  // Equivalent types overlap
	  if (typeA === typeB) {
	    return true;
	  }

	  if (isAbstractType(typeA)) {
	    if (isAbstractType(typeB)) {
	      // If both types are abstract, then determine if there is any intersection
	      // between possible concrete types of each.
	      return schema
	        .getPossibleTypes(typeA)
	        .some((type) => schema.isSubType(typeB, type));
	    } // Determine if the latter type is a possible concrete type of the former.

	    return schema.isSubType(typeA, typeB);
	  }

	  if (isAbstractType(typeB)) {
	    // Determine if the former type is a possible concrete type of the latter.
	    return schema.isSubType(typeB, typeA);
	  } // Otherwise the types do not overlap.

	  return false;
	}

	/**
	 * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).
	 * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1
	 * */

	const GRAPHQL_MAX_INT = 2147483647;
	/**
	 * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).
	 * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)
	 * */

	const GRAPHQL_MIN_INT = -2147483648;
	const GraphQLInt = new GraphQLScalarType({
	  name: 'Int',
	  description:
	    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',

	  serialize(outputValue) {
	    const coercedValue = serializeObject(outputValue);

	    if (typeof coercedValue === 'boolean') {
	      return coercedValue ? 1 : 0;
	    }

	    let num = coercedValue;

	    if (typeof coercedValue === 'string' && coercedValue !== '') {
	      num = Number(coercedValue);
	    }

	    if (typeof num !== 'number' || !Number.isInteger(num)) {
	      throw new GraphQLError(
	        `Int cannot represent non-integer value: ${inspect$2(coercedValue)}`,
	      );
	    }

	    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {
	      throw new GraphQLError(
	        'Int cannot represent non 32-bit signed integer value: ' +
	          inspect$2(coercedValue),
	      );
	    }

	    return num;
	  },

	  parseValue(inputValue) {
	    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {
	      throw new GraphQLError(
	        `Int cannot represent non-integer value: ${inspect$2(inputValue)}`,
	      );
	    }

	    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {
	      throw new GraphQLError(
	        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,
	      );
	    }

	    return inputValue;
	  },

	  parseLiteral(valueNode) {
	    if (valueNode.kind !== Kind.INT) {
	      throw new GraphQLError(
	        `Int cannot represent non-integer value: ${print$1(valueNode)}`,
	        valueNode,
	      );
	    }

	    const num = parseInt(valueNode.value, 10);

	    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {
	      throw new GraphQLError(
	        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,
	        valueNode,
	      );
	    }

	    return num;
	  },
	});
	const GraphQLFloat = new GraphQLScalarType({
	  name: 'Float',
	  description:
	    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',

	  serialize(outputValue) {
	    const coercedValue = serializeObject(outputValue);

	    if (typeof coercedValue === 'boolean') {
	      return coercedValue ? 1 : 0;
	    }

	    let num = coercedValue;

	    if (typeof coercedValue === 'string' && coercedValue !== '') {
	      num = Number(coercedValue);
	    }

	    if (typeof num !== 'number' || !Number.isFinite(num)) {
	      throw new GraphQLError(
	        `Float cannot represent non numeric value: ${inspect$2(coercedValue)}`,
	      );
	    }

	    return num;
	  },

	  parseValue(inputValue) {
	    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {
	      throw new GraphQLError(
	        `Float cannot represent non numeric value: ${inspect$2(inputValue)}`,
	      );
	    }

	    return inputValue;
	  },

	  parseLiteral(valueNode) {
	    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {
	      throw new GraphQLError(
	        `Float cannot represent non numeric value: ${print$1(valueNode)}`,
	        valueNode,
	      );
	    }

	    return parseFloat(valueNode.value);
	  },
	});
	const GraphQLString = new GraphQLScalarType({
	  name: 'String',
	  description:
	    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',

	  serialize(outputValue) {
	    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not
	    // attempt to coerce object, function, symbol, or other types as strings.

	    if (typeof coercedValue === 'string') {
	      return coercedValue;
	    }

	    if (typeof coercedValue === 'boolean') {
	      return coercedValue ? 'true' : 'false';
	    }

	    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {
	      return coercedValue.toString();
	    }

	    throw new GraphQLError(
	      `String cannot represent value: ${inspect$2(outputValue)}`,
	    );
	  },

	  parseValue(inputValue) {
	    if (typeof inputValue !== 'string') {
	      throw new GraphQLError(
	        `String cannot represent a non string value: ${inspect$2(inputValue)}`,
	      );
	    }

	    return inputValue;
	  },

	  parseLiteral(valueNode) {
	    if (valueNode.kind !== Kind.STRING) {
	      throw new GraphQLError(
	        `String cannot represent a non string value: ${print$1(valueNode)}`,
	        valueNode,
	      );
	    }

	    return valueNode.value;
	  },
	});
	const GraphQLBoolean = new GraphQLScalarType({
	  name: 'Boolean',
	  description: 'The `Boolean` scalar type represents `true` or `false`.',

	  serialize(outputValue) {
	    const coercedValue = serializeObject(outputValue);

	    if (typeof coercedValue === 'boolean') {
	      return coercedValue;
	    }

	    if (Number.isFinite(coercedValue)) {
	      return coercedValue !== 0;
	    }

	    throw new GraphQLError(
	      `Boolean cannot represent a non boolean value: ${inspect$2(coercedValue)}`,
	    );
	  },

	  parseValue(inputValue) {
	    if (typeof inputValue !== 'boolean') {
	      throw new GraphQLError(
	        `Boolean cannot represent a non boolean value: ${inspect$2(inputValue)}`,
	      );
	    }

	    return inputValue;
	  },

	  parseLiteral(valueNode) {
	    if (valueNode.kind !== Kind.BOOLEAN) {
	      throw new GraphQLError(
	        `Boolean cannot represent a non boolean value: ${print$1(valueNode)}`,
	        valueNode,
	      );
	    }

	    return valueNode.value;
	  },
	});
	const GraphQLID = new GraphQLScalarType({
	  name: 'ID',
	  description:
	    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',

	  serialize(outputValue) {
	    const coercedValue = serializeObject(outputValue);

	    if (typeof coercedValue === 'string') {
	      return coercedValue;
	    }

	    if (Number.isInteger(coercedValue)) {
	      return String(coercedValue);
	    }

	    throw new GraphQLError(
	      `ID cannot represent value: ${inspect$2(outputValue)}`,
	    );
	  },

	  parseValue(inputValue) {
	    if (typeof inputValue === 'string') {
	      return inputValue;
	    }

	    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {
	      return inputValue.toString();
	    }

	    throw new GraphQLError(`ID cannot represent value: ${inspect$2(inputValue)}`);
	  },

	  parseLiteral(valueNode) {
	    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {
	      throw new GraphQLError(
	        'ID cannot represent a non-string and non-integer value: ' +
	          print$1(valueNode),
	        valueNode,
	      );
	    }

	    return valueNode.value;
	  },
	});
	const specifiedScalarTypes = Object.freeze([
	  GraphQLString,
	  GraphQLInt,
	  GraphQLFloat,
	  GraphQLBoolean,
	  GraphQLID,
	]);
	function isSpecifiedScalarType(type) {
	  return specifiedScalarTypes.some(({ name }) => type.name === name);
	} // Support serializing objects with custom valueOf() or toJSON() functions -
	// a common way to represent a complex value which can be represented as
	// a string (ex: MongoDB id objects).

	function serializeObject(outputValue) {
	  if (isObjectLike(outputValue)) {
	    if (typeof outputValue.valueOf === 'function') {
	      const valueOfResult = outputValue.valueOf();

	      if (!isObjectLike(valueOfResult)) {
	        return valueOfResult;
	      }
	    }

	    if (typeof outputValue.toJSON === 'function') {
	      return outputValue.toJSON();
	    }
	  }

	  return outputValue;
	}

	/**
	 * Test if the given value is a GraphQL directive.
	 */

	function isDirective(directive) {
	  return instanceOf(directive, GraphQLDirective);
	}
	function assertDirective(directive) {
	  if (!isDirective(directive)) {
	    throw new Error(
	      `Expected ${inspect$2(directive)} to be a GraphQL directive.`,
	    );
	  }

	  return directive;
	}
	/**
	 * Custom extensions
	 *
	 * @remarks
	 * Use a unique identifier name for your extension, for example the name of
	 * your library or project. Do not use a shortened identifier as this increases
	 * the risk of conflicts. We recommend you add at most one extension field,
	 * an object which can contain all the values you need.
	 */

	/**
	 * Directives are used by the GraphQL runtime as a way of modifying execution
	 * behavior. Type system creators will usually not create these directly.
	 */
	class GraphQLDirective {
	  constructor(config) {
	    var _config$isRepeatable, _config$args;

	    this.name = assertName(config.name);
	    this.description = config.description;
	    this.locations = config.locations;
	    this.isRepeatable =
	      (_config$isRepeatable = config.isRepeatable) !== null &&
	      _config$isRepeatable !== void 0
	        ? _config$isRepeatable
	        : false;
	    this.extensions = toObjMap(config.extensions);
	    this.astNode = config.astNode;
	    Array.isArray(config.locations) ||
	      devAssert(false, `@${config.name} locations must be an Array.`);
	    const args =
	      (_config$args = config.args) !== null && _config$args !== void 0
	        ? _config$args
	        : {};
	    (isObjectLike(args) && !Array.isArray(args)) ||
	      devAssert(
	        false,
	        `@${config.name} args must be an object with argument names as keys.`,
	      );
	    this.args = defineArguments(args);
	  }

	  get [Symbol.toStringTag]() {
	    return 'GraphQLDirective';
	  }

	  toConfig() {
	    return {
	      name: this.name,
	      description: this.description,
	      locations: this.locations,
	      args: argsToArgsConfig(this.args),
	      isRepeatable: this.isRepeatable,
	      extensions: this.extensions,
	      astNode: this.astNode,
	    };
	  }

	  toString() {
	    return '@' + this.name;
	  }

	  toJSON() {
	    return this.toString();
	  }
	}

	/**
	 * Used to conditionally include fields or fragments.
	 */
	const GraphQLIncludeDirective = new GraphQLDirective({
	  name: 'include',
	  description:
	    'Directs the executor to include this field or fragment only when the `if` argument is true.',
	  locations: [
	    DirectiveLocation.FIELD,
	    DirectiveLocation.FRAGMENT_SPREAD,
	    DirectiveLocation.INLINE_FRAGMENT,
	  ],
	  args: {
	    if: {
	      type: new GraphQLNonNull(GraphQLBoolean),
	      description: 'Included when true.',
	    },
	  },
	});
	/**
	 * Used to conditionally skip (exclude) fields or fragments.
	 */

	const GraphQLSkipDirective = new GraphQLDirective({
	  name: 'skip',
	  description:
	    'Directs the executor to skip this field or fragment when the `if` argument is true.',
	  locations: [
	    DirectiveLocation.FIELD,
	    DirectiveLocation.FRAGMENT_SPREAD,
	    DirectiveLocation.INLINE_FRAGMENT,
	  ],
	  args: {
	    if: {
	      type: new GraphQLNonNull(GraphQLBoolean),
	      description: 'Skipped when true.',
	    },
	  },
	});
	/**
	 * Constant string used for default reason for a deprecation.
	 */

	const DEFAULT_DEPRECATION_REASON = 'No longer supported';
	/**
	 * Used to declare element of a GraphQL schema as deprecated.
	 */

	const GraphQLDeprecatedDirective = new GraphQLDirective({
	  name: 'deprecated',
	  description: 'Marks an element of a GraphQL schema as no longer supported.',
	  locations: [
	    DirectiveLocation.FIELD_DEFINITION,
	    DirectiveLocation.ARGUMENT_DEFINITION,
	    DirectiveLocation.INPUT_FIELD_DEFINITION,
	    DirectiveLocation.ENUM_VALUE,
	  ],
	  args: {
	    reason: {
	      type: GraphQLString,
	      description:
	        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',
	      defaultValue: DEFAULT_DEPRECATION_REASON,
	    },
	  },
	});
	/**
	 * Used to provide a URL for specifying the behavior of custom scalar definitions.
	 */

	const GraphQLSpecifiedByDirective = new GraphQLDirective({
	  name: 'specifiedBy',
	  description: 'Exposes a URL that specifies the behavior of this scalar.',
	  locations: [DirectiveLocation.SCALAR],
	  args: {
	    url: {
	      type: new GraphQLNonNull(GraphQLString),
	      description: 'The URL that specifies the behavior of this scalar.',
	    },
	  },
	});
	/**
	 * The full list of specified directives.
	 */

	const specifiedDirectives = Object.freeze([
	  GraphQLIncludeDirective,
	  GraphQLSkipDirective,
	  GraphQLDeprecatedDirective,
	  GraphQLSpecifiedByDirective,
	]);
	function isSpecifiedDirective(directive) {
	  return specifiedDirectives.some(({ name }) => name === directive.name);
	}

	/**
	 * Returns true if the provided object is an Object (i.e. not a string literal)
	 * and implements the Iterator protocol.
	 *
	 * This may be used in place of [Array.isArray()][isArray] to determine if
	 * an object should be iterated-over e.g. Array, Map, Set, Int8Array,
	 * TypedArray, etc. but excludes string literals.
	 *
	 * @example
	 * ```ts
	 * isIterableObject([ 1, 2, 3 ]) // true
	 * isIterableObject(new Map()) // true
	 * isIterableObject('ABC') // false
	 * isIterableObject({ key: 'value' }) // false
	 * isIterableObject({ length: 1, 0: 'Alpha' }) // false
	 * ```
	 */
	function isIterableObject(maybeIterable) {
	  return (
	    typeof maybeIterable === 'object' &&
	    typeof (maybeIterable === null || maybeIterable === void 0
	      ? void 0
	      : maybeIterable[Symbol.iterator]) === 'function'
	  );
	}

	/**
	 * Produces a GraphQL Value AST given a JavaScript object.
	 * Function will match JavaScript/JSON values to GraphQL AST schema format
	 * by using suggested GraphQLInputType. For example:
	 *
	 *     astFromValue("value", GraphQLString)
	 *
	 * A GraphQL type must be provided, which will be used to interpret different
	 * JavaScript values.
	 *
	 * | JSON Value    | GraphQL Value        |
	 * | ------------- | -------------------- |
	 * | Object        | Input Object         |
	 * | Array         | List                 |
	 * | Boolean       | Boolean              |
	 * | String        | String / Enum Value  |
	 * | Number        | Int / Float          |
	 * | Unknown       | Enum Value           |
	 * | null          | NullValue            |
	 *
	 */

	function astFromValue(value, type) {
	  if (isNonNullType(type)) {
	    const astValue = astFromValue(value, type.ofType);

	    if (
	      (astValue === null || astValue === void 0 ? void 0 : astValue.kind) ===
	      Kind.NULL
	    ) {
	      return null;
	    }

	    return astValue;
	  } // only explicit null, not undefined, NaN

	  if (value === null) {
	    return {
	      kind: Kind.NULL,
	    };
	  } // undefined

	  if (value === undefined) {
	    return null;
	  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but
	  // the value is not an array, convert the value using the list's item type.

	  if (isListType(type)) {
	    const itemType = type.ofType;

	    if (isIterableObject(value)) {
	      const valuesNodes = [];

	      for (const item of value) {
	        const itemNode = astFromValue(item, itemType);

	        if (itemNode != null) {
	          valuesNodes.push(itemNode);
	        }
	      }

	      return {
	        kind: Kind.LIST,
	        values: valuesNodes,
	      };
	    }

	    return astFromValue(value, itemType);
	  } // Populate the fields of the input object by creating ASTs from each value
	  // in the JavaScript object according to the fields in the input type.

	  if (isInputObjectType(type)) {
	    if (!isObjectLike(value)) {
	      return null;
	    }

	    const fieldNodes = [];

	    for (const field of Object.values(type.getFields())) {
	      const fieldValue = astFromValue(value[field.name], field.type);

	      if (fieldValue) {
	        fieldNodes.push({
	          kind: Kind.OBJECT_FIELD,
	          name: {
	            kind: Kind.NAME,
	            value: field.name,
	          },
	          value: fieldValue,
	        });
	      }
	    }

	    return {
	      kind: Kind.OBJECT,
	      fields: fieldNodes,
	    };
	  }

	  if (isLeafType(type)) {
	    // Since value is an internally represented value, it must be serialized
	    // to an externally represented value before converting into an AST.
	    const serialized = type.serialize(value);

	    if (serialized == null) {
	      return null;
	    } // Others serialize based on their corresponding JavaScript scalar types.

	    if (typeof serialized === 'boolean') {
	      return {
	        kind: Kind.BOOLEAN,
	        value: serialized,
	      };
	    } // JavaScript numbers can be Int or Float values.

	    if (typeof serialized === 'number' && Number.isFinite(serialized)) {
	      const stringNum = String(serialized);
	      return integerStringRegExp$1.test(stringNum)
	        ? {
	            kind: Kind.INT,
	            value: stringNum,
	          }
	        : {
	            kind: Kind.FLOAT,
	            value: stringNum,
	          };
	    }

	    if (typeof serialized === 'string') {
	      // Enum types use Enum literals.
	      if (isEnumType(type)) {
	        return {
	          kind: Kind.ENUM,
	          value: serialized,
	        };
	      } // ID types can use Int literals.

	      if (type === GraphQLID && integerStringRegExp$1.test(serialized)) {
	        return {
	          kind: Kind.INT,
	          value: serialized,
	        };
	      }

	      return {
	        kind: Kind.STRING,
	        value: serialized,
	      };
	    }

	    throw new TypeError(`Cannot convert value to AST: ${inspect$2(serialized)}.`);
	  }
	  /* c8 ignore next 3 */
	  // Not reachable, all possible types have been considered.

	  invariant(false, 'Unexpected input type: ' + inspect$2(type));
	}
	/**
	 * IntValue:
	 *   - NegativeSign? 0
	 *   - NegativeSign? NonZeroDigit ( Digit+ )?
	 */

	const integerStringRegExp$1 = /^-?(?:0|[1-9][0-9]*)$/;

	const __Schema = new GraphQLObjectType({
	  name: '__Schema',
	  description:
	    'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',
	  fields: () => ({
	    description: {
	      type: GraphQLString,
	      resolve: (schema) => schema.description,
	    },
	    types: {
	      description: 'A list of all types supported by this server.',
	      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),

	      resolve(schema) {
	        return Object.values(schema.getTypeMap());
	      },
	    },
	    queryType: {
	      description: 'The type that query operations will be rooted at.',
	      type: new GraphQLNonNull(__Type),
	      resolve: (schema) => schema.getQueryType(),
	    },
	    mutationType: {
	      description:
	        'If this server supports mutation, the type that mutation operations will be rooted at.',
	      type: __Type,
	      resolve: (schema) => schema.getMutationType(),
	    },
	    subscriptionType: {
	      description:
	        'If this server support subscription, the type that subscription operations will be rooted at.',
	      type: __Type,
	      resolve: (schema) => schema.getSubscriptionType(),
	    },
	    directives: {
	      description: 'A list of all directives supported by this server.',
	      type: new GraphQLNonNull(
	        new GraphQLList(new GraphQLNonNull(__Directive)),
	      ),
	      resolve: (schema) => schema.getDirectives(),
	    },
	  }),
	});
	const __Directive = new GraphQLObjectType({
	  name: '__Directive',
	  description:
	    "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
	  fields: () => ({
	    name: {
	      type: new GraphQLNonNull(GraphQLString),
	      resolve: (directive) => directive.name,
	    },
	    description: {
	      type: GraphQLString,
	      resolve: (directive) => directive.description,
	    },
	    isRepeatable: {
	      type: new GraphQLNonNull(GraphQLBoolean),
	      resolve: (directive) => directive.isRepeatable,
	    },
	    locations: {
	      type: new GraphQLNonNull(
	        new GraphQLList(new GraphQLNonNull(__DirectiveLocation)),
	      ),
	      resolve: (directive) => directive.locations,
	    },
	    args: {
	      type: new GraphQLNonNull(
	        new GraphQLList(new GraphQLNonNull(__InputValue)),
	      ),
	      args: {
	        includeDeprecated: {
	          type: GraphQLBoolean,
	          defaultValue: false,
	        },
	      },

	      resolve(field, { includeDeprecated }) {
	        return includeDeprecated
	          ? field.args
	          : field.args.filter((arg) => arg.deprecationReason == null);
	      },
	    },
	  }),
	});
	const __DirectiveLocation = new GraphQLEnumType({
	  name: '__DirectiveLocation',
	  description:
	    'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',
	  values: {
	    QUERY: {
	      value: DirectiveLocation.QUERY,
	      description: 'Location adjacent to a query operation.',
	    },
	    MUTATION: {
	      value: DirectiveLocation.MUTATION,
	      description: 'Location adjacent to a mutation operation.',
	    },
	    SUBSCRIPTION: {
	      value: DirectiveLocation.SUBSCRIPTION,
	      description: 'Location adjacent to a subscription operation.',
	    },
	    FIELD: {
	      value: DirectiveLocation.FIELD,
	      description: 'Location adjacent to a field.',
	    },
	    FRAGMENT_DEFINITION: {
	      value: DirectiveLocation.FRAGMENT_DEFINITION,
	      description: 'Location adjacent to a fragment definition.',
	    },
	    FRAGMENT_SPREAD: {
	      value: DirectiveLocation.FRAGMENT_SPREAD,
	      description: 'Location adjacent to a fragment spread.',
	    },
	    INLINE_FRAGMENT: {
	      value: DirectiveLocation.INLINE_FRAGMENT,
	      description: 'Location adjacent to an inline fragment.',
	    },
	    VARIABLE_DEFINITION: {
	      value: DirectiveLocation.VARIABLE_DEFINITION,
	      description: 'Location adjacent to a variable definition.',
	    },
	    SCHEMA: {
	      value: DirectiveLocation.SCHEMA,
	      description: 'Location adjacent to a schema definition.',
	    },
	    SCALAR: {
	      value: DirectiveLocation.SCALAR,
	      description: 'Location adjacent to a scalar definition.',
	    },
	    OBJECT: {
	      value: DirectiveLocation.OBJECT,
	      description: 'Location adjacent to an object type definition.',
	    },
	    FIELD_DEFINITION: {
	      value: DirectiveLocation.FIELD_DEFINITION,
	      description: 'Location adjacent to a field definition.',
	    },
	    ARGUMENT_DEFINITION: {
	      value: DirectiveLocation.ARGUMENT_DEFINITION,
	      description: 'Location adjacent to an argument definition.',
	    },
	    INTERFACE: {
	      value: DirectiveLocation.INTERFACE,
	      description: 'Location adjacent to an interface definition.',
	    },
	    UNION: {
	      value: DirectiveLocation.UNION,
	      description: 'Location adjacent to a union definition.',
	    },
	    ENUM: {
	      value: DirectiveLocation.ENUM,
	      description: 'Location adjacent to an enum definition.',
	    },
	    ENUM_VALUE: {
	      value: DirectiveLocation.ENUM_VALUE,
	      description: 'Location adjacent to an enum value definition.',
	    },
	    INPUT_OBJECT: {
	      value: DirectiveLocation.INPUT_OBJECT,
	      description: 'Location adjacent to an input object type definition.',
	    },
	    INPUT_FIELD_DEFINITION: {
	      value: DirectiveLocation.INPUT_FIELD_DEFINITION,
	      description: 'Location adjacent to an input object field definition.',
	    },
	  },
	});
	const __Type = new GraphQLObjectType({
	  name: '__Type',
	  description:
	    'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',
	  fields: () => ({
	    kind: {
	      type: new GraphQLNonNull(__TypeKind),

	      resolve(type) {
	        if (isScalarType(type)) {
	          return TypeKind.SCALAR;
	        }

	        if (isObjectType(type)) {
	          return TypeKind.OBJECT;
	        }

	        if (isInterfaceType(type)) {
	          return TypeKind.INTERFACE;
	        }

	        if (isUnionType(type)) {
	          return TypeKind.UNION;
	        }

	        if (isEnumType(type)) {
	          return TypeKind.ENUM;
	        }

	        if (isInputObjectType(type)) {
	          return TypeKind.INPUT_OBJECT;
	        }

	        if (isListType(type)) {
	          return TypeKind.LIST;
	        }

	        if (isNonNullType(type)) {
	          return TypeKind.NON_NULL;
	        }
	        /* c8 ignore next 3 */
	        // Not reachable, all possible types have been considered)

	        invariant(false, `Unexpected type: "${inspect$2(type)}".`);
	      },
	    },
	    name: {
	      type: GraphQLString,
	      resolve: (type) => ('name' in type ? type.name : undefined),
	    },
	    description: {
	      type: GraphQLString,
	      resolve: (
	        type, // FIXME: add test case
	      ) =>
	        /* c8 ignore next */
	        'description' in type ? type.description : undefined,
	    },
	    specifiedByURL: {
	      type: GraphQLString,
	      resolve: (obj) =>
	        'specifiedByURL' in obj ? obj.specifiedByURL : undefined,
	    },
	    fields: {
	      type: new GraphQLList(new GraphQLNonNull(__Field)),
	      args: {
	        includeDeprecated: {
	          type: GraphQLBoolean,
	          defaultValue: false,
	        },
	      },

	      resolve(type, { includeDeprecated }) {
	        if (isObjectType(type) || isInterfaceType(type)) {
	          const fields = Object.values(type.getFields());
	          return includeDeprecated
	            ? fields
	            : fields.filter((field) => field.deprecationReason == null);
	        }
	      },
	    },
	    interfaces: {
	      type: new GraphQLList(new GraphQLNonNull(__Type)),

	      resolve(type) {
	        if (isObjectType(type) || isInterfaceType(type)) {
	          return type.getInterfaces();
	        }
	      },
	    },
	    possibleTypes: {
	      type: new GraphQLList(new GraphQLNonNull(__Type)),

	      resolve(type, _args, _context, { schema }) {
	        if (isAbstractType(type)) {
	          return schema.getPossibleTypes(type);
	        }
	      },
	    },
	    enumValues: {
	      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),
	      args: {
	        includeDeprecated: {
	          type: GraphQLBoolean,
	          defaultValue: false,
	        },
	      },

	      resolve(type, { includeDeprecated }) {
	        if (isEnumType(type)) {
	          const values = type.getValues();
	          return includeDeprecated
	            ? values
	            : values.filter((field) => field.deprecationReason == null);
	        }
	      },
	    },
	    inputFields: {
	      type: new GraphQLList(new GraphQLNonNull(__InputValue)),
	      args: {
	        includeDeprecated: {
	          type: GraphQLBoolean,
	          defaultValue: false,
	        },
	      },

	      resolve(type, { includeDeprecated }) {
	        if (isInputObjectType(type)) {
	          const values = Object.values(type.getFields());
	          return includeDeprecated
	            ? values
	            : values.filter((field) => field.deprecationReason == null);
	        }
	      },
	    },
	    ofType: {
	      type: __Type,
	      resolve: (type) => ('ofType' in type ? type.ofType : undefined),
	    },
	  }),
	});
	const __Field = new GraphQLObjectType({
	  name: '__Field',
	  description:
	    'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',
	  fields: () => ({
	    name: {
	      type: new GraphQLNonNull(GraphQLString),
	      resolve: (field) => field.name,
	    },
	    description: {
	      type: GraphQLString,
	      resolve: (field) => field.description,
	    },
	    args: {
	      type: new GraphQLNonNull(
	        new GraphQLList(new GraphQLNonNull(__InputValue)),
	      ),
	      args: {
	        includeDeprecated: {
	          type: GraphQLBoolean,
	          defaultValue: false,
	        },
	      },

	      resolve(field, { includeDeprecated }) {
	        return includeDeprecated
	          ? field.args
	          : field.args.filter((arg) => arg.deprecationReason == null);
	      },
	    },
	    type: {
	      type: new GraphQLNonNull(__Type),
	      resolve: (field) => field.type,
	    },
	    isDeprecated: {
	      type: new GraphQLNonNull(GraphQLBoolean),
	      resolve: (field) => field.deprecationReason != null,
	    },
	    deprecationReason: {
	      type: GraphQLString,
	      resolve: (field) => field.deprecationReason,
	    },
	  }),
	});
	const __InputValue = new GraphQLObjectType({
	  name: '__InputValue',
	  description:
	    'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',
	  fields: () => ({
	    name: {
	      type: new GraphQLNonNull(GraphQLString),
	      resolve: (inputValue) => inputValue.name,
	    },
	    description: {
	      type: GraphQLString,
	      resolve: (inputValue) => inputValue.description,
	    },
	    type: {
	      type: new GraphQLNonNull(__Type),
	      resolve: (inputValue) => inputValue.type,
	    },
	    defaultValue: {
	      type: GraphQLString,
	      description:
	        'A GraphQL-formatted string representing the default value for this input value.',

	      resolve(inputValue) {
	        const { type, defaultValue } = inputValue;
	        const valueAST = astFromValue(defaultValue, type);
	        return valueAST ? print$1(valueAST) : null;
	      },
	    },
	    isDeprecated: {
	      type: new GraphQLNonNull(GraphQLBoolean),
	      resolve: (field) => field.deprecationReason != null,
	    },
	    deprecationReason: {
	      type: GraphQLString,
	      resolve: (obj) => obj.deprecationReason,
	    },
	  }),
	});
	const __EnumValue = new GraphQLObjectType({
	  name: '__EnumValue',
	  description:
	    'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',
	  fields: () => ({
	    name: {
	      type: new GraphQLNonNull(GraphQLString),
	      resolve: (enumValue) => enumValue.name,
	    },
	    description: {
	      type: GraphQLString,
	      resolve: (enumValue) => enumValue.description,
	    },
	    isDeprecated: {
	      type: new GraphQLNonNull(GraphQLBoolean),
	      resolve: (enumValue) => enumValue.deprecationReason != null,
	    },
	    deprecationReason: {
	      type: GraphQLString,
	      resolve: (enumValue) => enumValue.deprecationReason,
	    },
	  }),
	});
	let TypeKind;

	(function (TypeKind) {
	  TypeKind['SCALAR'] = 'SCALAR';
	  TypeKind['OBJECT'] = 'OBJECT';
	  TypeKind['INTERFACE'] = 'INTERFACE';
	  TypeKind['UNION'] = 'UNION';
	  TypeKind['ENUM'] = 'ENUM';
	  TypeKind['INPUT_OBJECT'] = 'INPUT_OBJECT';
	  TypeKind['LIST'] = 'LIST';
	  TypeKind['NON_NULL'] = 'NON_NULL';
	})(TypeKind || (TypeKind = {}));

	const __TypeKind = new GraphQLEnumType({
	  name: '__TypeKind',
	  description: 'An enum describing what kind of type a given `__Type` is.',
	  values: {
	    SCALAR: {
	      value: TypeKind.SCALAR,
	      description: 'Indicates this type is a scalar.',
	    },
	    OBJECT: {
	      value: TypeKind.OBJECT,
	      description:
	        'Indicates this type is an object. `fields` and `interfaces` are valid fields.',
	    },
	    INTERFACE: {
	      value: TypeKind.INTERFACE,
	      description:
	        'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.',
	    },
	    UNION: {
	      value: TypeKind.UNION,
	      description:
	        'Indicates this type is a union. `possibleTypes` is a valid field.',
	    },
	    ENUM: {
	      value: TypeKind.ENUM,
	      description:
	        'Indicates this type is an enum. `enumValues` is a valid field.',
	    },
	    INPUT_OBJECT: {
	      value: TypeKind.INPUT_OBJECT,
	      description:
	        'Indicates this type is an input object. `inputFields` is a valid field.',
	    },
	    LIST: {
	      value: TypeKind.LIST,
	      description: 'Indicates this type is a list. `ofType` is a valid field.',
	    },
	    NON_NULL: {
	      value: TypeKind.NON_NULL,
	      description:
	        'Indicates this type is a non-null. `ofType` is a valid field.',
	    },
	  },
	});
	/**
	 * Note that these are GraphQLField and not GraphQLFieldConfig,
	 * so the format for args is different.
	 */

	const SchemaMetaFieldDef = {
	  name: '__schema',
	  type: new GraphQLNonNull(__Schema),
	  description: 'Access the current type schema of this server.',
	  args: [],
	  resolve: (_source, _args, _context, { schema }) => schema,
	  deprecationReason: undefined,
	  extensions: Object.create(null),
	  astNode: undefined,
	};
	const TypeMetaFieldDef = {
	  name: '__type',
	  type: __Type,
	  description: 'Request the type information of a single type.',
	  args: [
	    {
	      name: 'name',
	      description: undefined,
	      type: new GraphQLNonNull(GraphQLString),
	      defaultValue: undefined,
	      deprecationReason: undefined,
	      extensions: Object.create(null),
	      astNode: undefined,
	    },
	  ],
	  resolve: (_source, { name }, _context, { schema }) => schema.getType(name),
	  deprecationReason: undefined,
	  extensions: Object.create(null),
	  astNode: undefined,
	};
	const TypeNameMetaFieldDef = {
	  name: '__typename',
	  type: new GraphQLNonNull(GraphQLString),
	  description: 'The name of the current Object type at runtime.',
	  args: [],
	  resolve: (_source, _args, _context, { parentType }) => parentType.name,
	  deprecationReason: undefined,
	  extensions: Object.create(null),
	  astNode: undefined,
	};
	const introspectionTypes = Object.freeze([
	  __Schema,
	  __Directive,
	  __DirectiveLocation,
	  __Type,
	  __Field,
	  __InputValue,
	  __EnumValue,
	  __TypeKind,
	]);
	function isIntrospectionType(type) {
	  return introspectionTypes.some(({ name }) => type.name === name);
	}

	/**
	 * Test if the given value is a GraphQL schema.
	 */

	function isSchema(schema) {
	  return instanceOf(schema, GraphQLSchema);
	}
	function assertSchema(schema) {
	  if (!isSchema(schema)) {
	    throw new Error(`Expected ${inspect$2(schema)} to be a GraphQL schema.`);
	  }

	  return schema;
	}
	/**
	 * Custom extensions
	 *
	 * @remarks
	 * Use a unique identifier name for your extension, for example the name of
	 * your library or project. Do not use a shortened identifier as this increases
	 * the risk of conflicts. We recommend you add at most one extension field,
	 * an object which can contain all the values you need.
	 */

	/**
	 * Schema Definition
	 *
	 * A Schema is created by supplying the root types of each type of operation,
	 * query and mutation (optional). A schema definition is then supplied to the
	 * validator and executor.
	 *
	 * Example:
	 *
	 * ```ts
	 * const MyAppSchema = new GraphQLSchema({
	 *   query: MyAppQueryRootType,
	 *   mutation: MyAppMutationRootType,
	 * })
	 * ```
	 *
	 * Note: When the schema is constructed, by default only the types that are
	 * reachable by traversing the root types are included, other types must be
	 * explicitly referenced.
	 *
	 * Example:
	 *
	 * ```ts
	 * const characterInterface = new GraphQLInterfaceType({
	 *   name: 'Character',
	 *   ...
	 * });
	 *
	 * const humanType = new GraphQLObjectType({
	 *   name: 'Human',
	 *   interfaces: [characterInterface],
	 *   ...
	 * });
	 *
	 * const droidType = new GraphQLObjectType({
	 *   name: 'Droid',
	 *   interfaces: [characterInterface],
	 *   ...
	 * });
	 *
	 * const schema = new GraphQLSchema({
	 *   query: new GraphQLObjectType({
	 *     name: 'Query',
	 *     fields: {
	 *       hero: { type: characterInterface, ... },
	 *     }
	 *   }),
	 *   ...
	 *   // Since this schema references only the `Character` interface it's
	 *   // necessary to explicitly list the types that implement it if
	 *   // you want them to be included in the final schema.
	 *   types: [humanType, droidType],
	 * })
	 * ```
	 *
	 * Note: If an array of `directives` are provided to GraphQLSchema, that will be
	 * the exact list of directives represented and allowed. If `directives` is not
	 * provided then a default set of the specified directives (e.g. `@include` and
	 * `@skip`) will be used. If you wish to provide *additional* directives to these
	 * specified directives, you must explicitly declare them. Example:
	 *
	 * ```ts
	 * const MyAppSchema = new GraphQLSchema({
	 *   ...
	 *   directives: specifiedDirectives.concat([ myCustomDirective ]),
	 * })
	 * ```
	 */
	class GraphQLSchema {
	  // Used as a cache for validateSchema().
	  constructor(config) {
	    var _config$extensionASTN, _config$directives;

	    // If this schema was built from a source known to be valid, then it may be
	    // marked with assumeValid to avoid an additional type system validation.
	    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.

	    isObjectLike(config) ||
	      devAssert(false, 'Must provide configuration object.');
	    !config.types ||
	      Array.isArray(config.types) ||
	      devAssert(
	        false,
	        `"types" must be Array if provided but got: ${inspect$2(config.types)}.`,
	      );
	    !config.directives ||
	      Array.isArray(config.directives) ||
	      devAssert(
	        false,
	        '"directives" must be Array if provided but got: ' +
	          `${inspect$2(config.directives)}.`,
	      );
	    this.description = config.description;
	    this.extensions = toObjMap(config.extensions);
	    this.astNode = config.astNode;
	    this.extensionASTNodes =
	      (_config$extensionASTN = config.extensionASTNodes) !== null &&
	      _config$extensionASTN !== void 0
	        ? _config$extensionASTN
	        : [];
	    this._queryType = config.query;
	    this._mutationType = config.mutation;
	    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.

	    this._directives =
	      (_config$directives = config.directives) !== null &&
	      _config$directives !== void 0
	        ? _config$directives
	        : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to
	    // the set of "collected" types, so `collectReferencedTypes` ignore them.

	    const allReferencedTypes = new Set(config.types);

	    if (config.types != null) {
	      for (const type of config.types) {
	        // When we ready to process this type, we remove it from "collected" types
	        // and then add it together with all dependent types in the correct position.
	        allReferencedTypes.delete(type);
	        collectReferencedTypes(type, allReferencedTypes);
	      }
	    }

	    if (this._queryType != null) {
	      collectReferencedTypes(this._queryType, allReferencedTypes);
	    }

	    if (this._mutationType != null) {
	      collectReferencedTypes(this._mutationType, allReferencedTypes);
	    }

	    if (this._subscriptionType != null) {
	      collectReferencedTypes(this._subscriptionType, allReferencedTypes);
	    }

	    for (const directive of this._directives) {
	      // Directives are not validated until validateSchema() is called.
	      if (isDirective(directive)) {
	        for (const arg of directive.args) {
	          collectReferencedTypes(arg.type, allReferencedTypes);
	        }
	      }
	    }

	    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.

	    this._typeMap = Object.create(null);
	    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.

	    this._implementationsMap = Object.create(null);

	    for (const namedType of allReferencedTypes) {
	      if (namedType == null) {
	        continue;
	      }

	      const typeName = namedType.name;
	      typeName ||
	        devAssert(
	          false,
	          'One of the provided types for building the Schema is missing a name.',
	        );

	      if (this._typeMap[typeName] !== undefined) {
	        throw new Error(
	          `Schema must contain uniquely named types but contains multiple types named "${typeName}".`,
	        );
	      }

	      this._typeMap[typeName] = namedType;

	      if (isInterfaceType(namedType)) {
	        // Store implementations by interface.
	        for (const iface of namedType.getInterfaces()) {
	          if (isInterfaceType(iface)) {
	            let implementations = this._implementationsMap[iface.name];

	            if (implementations === undefined) {
	              implementations = this._implementationsMap[iface.name] = {
	                objects: [],
	                interfaces: [],
	              };
	            }

	            implementations.interfaces.push(namedType);
	          }
	        }
	      } else if (isObjectType(namedType)) {
	        // Store implementations by objects.
	        for (const iface of namedType.getInterfaces()) {
	          if (isInterfaceType(iface)) {
	            let implementations = this._implementationsMap[iface.name];

	            if (implementations === undefined) {
	              implementations = this._implementationsMap[iface.name] = {
	                objects: [],
	                interfaces: [],
	              };
	            }

	            implementations.objects.push(namedType);
	          }
	        }
	      }
	    }
	  }

	  get [Symbol.toStringTag]() {
	    return 'GraphQLSchema';
	  }

	  getQueryType() {
	    return this._queryType;
	  }

	  getMutationType() {
	    return this._mutationType;
	  }

	  getSubscriptionType() {
	    return this._subscriptionType;
	  }

	  getRootType(operation) {
	    switch (operation) {
	      case OperationTypeNode.QUERY:
	        return this.getQueryType();

	      case OperationTypeNode.MUTATION:
	        return this.getMutationType();

	      case OperationTypeNode.SUBSCRIPTION:
	        return this.getSubscriptionType();
	    }
	  }

	  getTypeMap() {
	    return this._typeMap;
	  }

	  getType(name) {
	    return this.getTypeMap()[name];
	  }

	  getPossibleTypes(abstractType) {
	    return isUnionType(abstractType)
	      ? abstractType.getTypes()
	      : this.getImplementations(abstractType).objects;
	  }

	  getImplementations(interfaceType) {
	    const implementations = this._implementationsMap[interfaceType.name];
	    return implementations !== null && implementations !== void 0
	      ? implementations
	      : {
	          objects: [],
	          interfaces: [],
	        };
	  }

	  isSubType(abstractType, maybeSubType) {
	    let map = this._subTypeMap[abstractType.name];

	    if (map === undefined) {
	      map = Object.create(null);

	      if (isUnionType(abstractType)) {
	        for (const type of abstractType.getTypes()) {
	          map[type.name] = true;
	        }
	      } else {
	        const implementations = this.getImplementations(abstractType);

	        for (const type of implementations.objects) {
	          map[type.name] = true;
	        }

	        for (const type of implementations.interfaces) {
	          map[type.name] = true;
	        }
	      }

	      this._subTypeMap[abstractType.name] = map;
	    }

	    return map[maybeSubType.name] !== undefined;
	  }

	  getDirectives() {
	    return this._directives;
	  }

	  getDirective(name) {
	    return this.getDirectives().find((directive) => directive.name === name);
	  }

	  toConfig() {
	    return {
	      description: this.description,
	      query: this.getQueryType(),
	      mutation: this.getMutationType(),
	      subscription: this.getSubscriptionType(),
	      types: Object.values(this.getTypeMap()),
	      directives: this.getDirectives(),
	      extensions: this.extensions,
	      astNode: this.astNode,
	      extensionASTNodes: this.extensionASTNodes,
	      assumeValid: this.__validationErrors !== undefined,
	    };
	  }
	}

	function collectReferencedTypes(type, typeSet) {
	  const namedType = getNamedType(type);

	  if (!typeSet.has(namedType)) {
	    typeSet.add(namedType);

	    if (isUnionType(namedType)) {
	      for (const memberType of namedType.getTypes()) {
	        collectReferencedTypes(memberType, typeSet);
	      }
	    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {
	      for (const interfaceType of namedType.getInterfaces()) {
	        collectReferencedTypes(interfaceType, typeSet);
	      }

	      for (const field of Object.values(namedType.getFields())) {
	        collectReferencedTypes(field.type, typeSet);

	        for (const arg of field.args) {
	          collectReferencedTypes(arg.type, typeSet);
	        }
	      }
	    } else if (isInputObjectType(namedType)) {
	      for (const field of Object.values(namedType.getFields())) {
	        collectReferencedTypes(field.type, typeSet);
	      }
	    }
	  }

	  return typeSet;
	}

	/**
	 * Implements the "Type Validation" sub-sections of the specification's
	 * "Type System" section.
	 *
	 * Validation runs synchronously, returning an array of encountered errors, or
	 * an empty array if no errors were encountered and the Schema is valid.
	 */

	function validateSchema$1(schema) {
	  // First check to ensure the provided value is in fact a GraphQLSchema.
	  assertSchema(schema); // If this Schema has already been validated, return the previous results.

	  if (schema.__validationErrors) {
	    return schema.__validationErrors;
	  } // Validate the schema, producing a list of errors.

	  const context = new SchemaValidationContext(schema);
	  validateRootTypes(context);
	  validateDirectives(context);
	  validateTypes(context); // Persist the results of validation before returning to ensure validation
	  // does not run multiple times for this schema.

	  const errors = context.getErrors();
	  schema.__validationErrors = errors;
	  return errors;
	}
	/**
	 * Utility function which asserts a schema is valid by throwing an error if
	 * it is invalid.
	 */

	function assertValidSchema(schema) {
	  const errors = validateSchema$1(schema);

	  if (errors.length !== 0) {
	    throw new Error(errors.map((error) => error.message).join('\n\n'));
	  }
	}

	class SchemaValidationContext {
	  constructor(schema) {
	    this._errors = [];
	    this.schema = schema;
	  }

	  reportError(message, nodes) {
	    const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;

	    this._errors.push(new GraphQLError(message, _nodes));
	  }

	  getErrors() {
	    return this._errors;
	  }
	}

	function validateRootTypes(context) {
	  const schema = context.schema;
	  const queryType = schema.getQueryType();

	  if (!queryType) {
	    context.reportError('Query root type must be provided.', schema.astNode);
	  } else if (!isObjectType(queryType)) {
	    var _getOperationTypeNode;

	    context.reportError(
	      `Query root type must be Object type, it cannot be ${inspect$2(
        queryType,
      )}.`,
	      (_getOperationTypeNode = getOperationTypeNode(
	        schema,
	        OperationTypeNode.QUERY,
	      )) !== null && _getOperationTypeNode !== void 0
	        ? _getOperationTypeNode
	        : queryType.astNode,
	    );
	  }

	  const mutationType = schema.getMutationType();

	  if (mutationType && !isObjectType(mutationType)) {
	    var _getOperationTypeNode2;

	    context.reportError(
	      'Mutation root type must be Object type if provided, it cannot be ' +
	        `${inspect$2(mutationType)}.`,
	      (_getOperationTypeNode2 = getOperationTypeNode(
	        schema,
	        OperationTypeNode.MUTATION,
	      )) !== null && _getOperationTypeNode2 !== void 0
	        ? _getOperationTypeNode2
	        : mutationType.astNode,
	    );
	  }

	  const subscriptionType = schema.getSubscriptionType();

	  if (subscriptionType && !isObjectType(subscriptionType)) {
	    var _getOperationTypeNode3;

	    context.reportError(
	      'Subscription root type must be Object type if provided, it cannot be ' +
	        `${inspect$2(subscriptionType)}.`,
	      (_getOperationTypeNode3 = getOperationTypeNode(
	        schema,
	        OperationTypeNode.SUBSCRIPTION,
	      )) !== null && _getOperationTypeNode3 !== void 0
	        ? _getOperationTypeNode3
	        : subscriptionType.astNode,
	    );
	  }
	}

	function getOperationTypeNode(schema, operation) {
	  var _flatMap$find;

	  return (_flatMap$find = [schema.astNode, ...schema.extensionASTNodes]
	    .flatMap(
	      // FIXME: https://github.com/graphql/graphql-js/issues/2203
	      (schemaNode) => {
	        var _schemaNode$operation;

	        return (
	          /* c8 ignore next */
	          (_schemaNode$operation =
	            schemaNode === null || schemaNode === void 0
	              ? void 0
	              : schemaNode.operationTypes) !== null &&
	            _schemaNode$operation !== void 0
	            ? _schemaNode$operation
	            : []
	        );
	      },
	    )
	    .find((operationNode) => operationNode.operation === operation)) === null ||
	    _flatMap$find === void 0
	    ? void 0
	    : _flatMap$find.type;
	}

	function validateDirectives(context) {
	  for (const directive of context.schema.getDirectives()) {
	    // Ensure all directives are in fact GraphQL directives.
	    if (!isDirective(directive)) {
	      context.reportError(
	        `Expected directive but got: ${inspect$2(directive)}.`,
	        directive === null || directive === void 0 ? void 0 : directive.astNode,
	      );
	      continue;
	    } // Ensure they are named correctly.

	    validateName(context, directive); // TODO: Ensure proper locations.
	    // Ensure the arguments are valid.

	    for (const arg of directive.args) {
	      // Ensure they are named correctly.
	      validateName(context, arg); // Ensure the type is an input type.

	      if (!isInputType(arg.type)) {
	        context.reportError(
	          `The type of @${directive.name}(${arg.name}:) must be Input Type ` +
	            `but got: ${inspect$2(arg.type)}.`,
	          arg.astNode,
	        );
	      }

	      if (isRequiredArgument(arg) && arg.deprecationReason != null) {
	        var _arg$astNode;

	        context.reportError(
	          `Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`,
	          [
	            getDeprecatedDirectiveNode(arg.astNode),
	            (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0
	              ? void 0
	              : _arg$astNode.type,
	          ],
	        );
	      }
	    }
	  }
	}

	function validateName(context, node) {
	  // Ensure names are valid, however introspection types opt out.
	  if (node.name.startsWith('__')) {
	    context.reportError(
	      `Name "${node.name}" must not begin with "__", which is reserved by GraphQL introspection.`,
	      node.astNode,
	    );
	  }
	}

	function validateTypes(context) {
	  const validateInputObjectCircularRefs =
	    createInputObjectCircularRefsValidator(context);
	  const typeMap = context.schema.getTypeMap();

	  for (const type of Object.values(typeMap)) {
	    // Ensure all provided types are in fact GraphQL type.
	    if (!isNamedType(type)) {
	      context.reportError(
	        `Expected GraphQL named type but got: ${inspect$2(type)}.`,
	        type.astNode,
	      );
	      continue;
	    } // Ensure it is named correctly (excluding introspection types).

	    if (!isIntrospectionType(type)) {
	      validateName(context, type);
	    }

	    if (isObjectType(type)) {
	      // Ensure fields are valid
	      validateFields(context, type); // Ensure objects implement the interfaces they claim to.

	      validateInterfaces(context, type);
	    } else if (isInterfaceType(type)) {
	      // Ensure fields are valid.
	      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.

	      validateInterfaces(context, type);
	    } else if (isUnionType(type)) {
	      // Ensure Unions include valid member types.
	      validateUnionMembers(context, type);
	    } else if (isEnumType(type)) {
	      // Ensure Enums have valid values.
	      validateEnumValues(context, type);
	    } else if (isInputObjectType(type)) {
	      // Ensure Input Object fields are valid.
	      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references

	      validateInputObjectCircularRefs(type);
	    }
	  }
	}

	function validateFields(context, type) {
	  const fields = Object.values(type.getFields()); // Objects and Interfaces both must define one or more fields.

	  if (fields.length === 0) {
	    context.reportError(`Type ${type.name} must define one or more fields.`, [
	      type.astNode,
	      ...type.extensionASTNodes,
	    ]);
	  }

	  for (const field of fields) {
	    // Ensure they are named correctly.
	    validateName(context, field); // Ensure the type is an output type

	    if (!isOutputType(field.type)) {
	      var _field$astNode;

	      context.reportError(
	        `The type of ${type.name}.${field.name} must be Output Type ` +
	          `but got: ${inspect$2(field.type)}.`,
	        (_field$astNode = field.astNode) === null || _field$astNode === void 0
	          ? void 0
	          : _field$astNode.type,
	      );
	    } // Ensure the arguments are valid

	    for (const arg of field.args) {
	      const argName = arg.name; // Ensure they are named correctly.

	      validateName(context, arg); // Ensure the type is an input type

	      if (!isInputType(arg.type)) {
	        var _arg$astNode2;

	        context.reportError(
	          `The type of ${type.name}.${field.name}(${argName}:) must be Input ` +
	            `Type but got: ${inspect$2(arg.type)}.`,
	          (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0
	            ? void 0
	            : _arg$astNode2.type,
	        );
	      }

	      if (isRequiredArgument(arg) && arg.deprecationReason != null) {
	        var _arg$astNode3;

	        context.reportError(
	          `Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`,
	          [
	            getDeprecatedDirectiveNode(arg.astNode),
	            (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0
	              ? void 0
	              : _arg$astNode3.type,
	          ],
	        );
	      }
	    }
	  }
	}

	function validateInterfaces(context, type) {
	  const ifaceTypeNames = Object.create(null);

	  for (const iface of type.getInterfaces()) {
	    if (!isInterfaceType(iface)) {
	      context.reportError(
	        `Type ${inspect$2(type)} must only implement Interface types, ` +
	          `it cannot implement ${inspect$2(iface)}.`,
	        getAllImplementsInterfaceNodes(type, iface),
	      );
	      continue;
	    }

	    if (type === iface) {
	      context.reportError(
	        `Type ${type.name} cannot implement itself because it would create a circular reference.`,
	        getAllImplementsInterfaceNodes(type, iface),
	      );
	      continue;
	    }

	    if (ifaceTypeNames[iface.name]) {
	      context.reportError(
	        `Type ${type.name} can only implement ${iface.name} once.`,
	        getAllImplementsInterfaceNodes(type, iface),
	      );
	      continue;
	    }

	    ifaceTypeNames[iface.name] = true;
	    validateTypeImplementsAncestors(context, type, iface);
	    validateTypeImplementsInterface(context, type, iface);
	  }
	}

	function validateTypeImplementsInterface(context, type, iface) {
	  const typeFieldMap = type.getFields(); // Assert each interface field is implemented.

	  for (const ifaceField of Object.values(iface.getFields())) {
	    const fieldName = ifaceField.name;
	    const typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.

	    if (!typeField) {
	      context.reportError(
	        `Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`,
	        [ifaceField.astNode, type.astNode, ...type.extensionASTNodes],
	      );
	      continue;
	    } // Assert interface field type is satisfied by type field type, by being
	    // a valid subtype. (covariant)

	    if (!isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {
	      var _ifaceField$astNode, _typeField$astNode;

	      context.reportError(
	        `Interface field ${iface.name}.${fieldName} expects type ` +
	          `${inspect$2(ifaceField.type)} but ${type.name}.${fieldName} ` +
	          `is type ${inspect$2(typeField.type)}.`,
	        [
	          (_ifaceField$astNode = ifaceField.astNode) === null ||
	          _ifaceField$astNode === void 0
	            ? void 0
	            : _ifaceField$astNode.type,
	          (_typeField$astNode = typeField.astNode) === null ||
	          _typeField$astNode === void 0
	            ? void 0
	            : _typeField$astNode.type,
	        ],
	      );
	    } // Assert each interface field arg is implemented.

	    for (const ifaceArg of ifaceField.args) {
	      const argName = ifaceArg.name;
	      const typeArg = typeField.args.find((arg) => arg.name === argName); // Assert interface field arg exists on object field.

	      if (!typeArg) {
	        context.reportError(
	          `Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`,
	          [ifaceArg.astNode, typeField.astNode],
	        );
	        continue;
	      } // Assert interface field arg type matches object field arg type.
	      // (invariant)
	      // TODO: change to contravariant?

	      if (!isEqualType(ifaceArg.type, typeArg.type)) {
	        var _ifaceArg$astNode, _typeArg$astNode;

	        context.reportError(
	          `Interface field argument ${iface.name}.${fieldName}(${argName}:) ` +
	            `expects type ${inspect$2(ifaceArg.type)} but ` +
	            `${type.name}.${fieldName}(${argName}:) is type ` +
	            `${inspect$2(typeArg.type)}.`,
	          [
	            (_ifaceArg$astNode = ifaceArg.astNode) === null ||
	            _ifaceArg$astNode === void 0
	              ? void 0
	              : _ifaceArg$astNode.type,
	            (_typeArg$astNode = typeArg.astNode) === null ||
	            _typeArg$astNode === void 0
	              ? void 0
	              : _typeArg$astNode.type,
	          ],
	        );
	      } // TODO: validate default values?
	    } // Assert additional arguments must not be required.

	    for (const typeArg of typeField.args) {
	      const argName = typeArg.name;
	      const ifaceArg = ifaceField.args.find((arg) => arg.name === argName);

	      if (!ifaceArg && isRequiredArgument(typeArg)) {
	        context.reportError(
	          `Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`,
	          [typeArg.astNode, ifaceField.astNode],
	        );
	      }
	    }
	  }
	}

	function validateTypeImplementsAncestors(context, type, iface) {
	  const ifaceInterfaces = type.getInterfaces();

	  for (const transitive of iface.getInterfaces()) {
	    if (!ifaceInterfaces.includes(transitive)) {
	      context.reportError(
	        transitive === type
	          ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.`
	          : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`,
	        [
	          ...getAllImplementsInterfaceNodes(iface, transitive),
	          ...getAllImplementsInterfaceNodes(type, iface),
	        ],
	      );
	    }
	  }
	}

	function validateUnionMembers(context, union) {
	  const memberTypes = union.getTypes();

	  if (memberTypes.length === 0) {
	    context.reportError(
	      `Union type ${union.name} must define one or more member types.`,
	      [union.astNode, ...union.extensionASTNodes],
	    );
	  }

	  const includedTypeNames = Object.create(null);

	  for (const memberType of memberTypes) {
	    if (includedTypeNames[memberType.name]) {
	      context.reportError(
	        `Union type ${union.name} can only include type ${memberType.name} once.`,
	        getUnionMemberTypeNodes(union, memberType.name),
	      );
	      continue;
	    }

	    includedTypeNames[memberType.name] = true;

	    if (!isObjectType(memberType)) {
	      context.reportError(
	        `Union type ${union.name} can only include Object types, ` +
	          `it cannot include ${inspect$2(memberType)}.`,
	        getUnionMemberTypeNodes(union, String(memberType)),
	      );
	    }
	  }
	}

	function validateEnumValues(context, enumType) {
	  const enumValues = enumType.getValues();

	  if (enumValues.length === 0) {
	    context.reportError(
	      `Enum type ${enumType.name} must define one or more values.`,
	      [enumType.astNode, ...enumType.extensionASTNodes],
	    );
	  }

	  for (const enumValue of enumValues) {
	    // Ensure valid name.
	    validateName(context, enumValue);
	  }
	}

	function validateInputFields(context, inputObj) {
	  const fields = Object.values(inputObj.getFields());

	  if (fields.length === 0) {
	    context.reportError(
	      `Input Object type ${inputObj.name} must define one or more fields.`,
	      [inputObj.astNode, ...inputObj.extensionASTNodes],
	    );
	  } // Ensure the arguments are valid

	  for (const field of fields) {
	    // Ensure they are named correctly.
	    validateName(context, field); // Ensure the type is an input type

	    if (!isInputType(field.type)) {
	      var _field$astNode2;

	      context.reportError(
	        `The type of ${inputObj.name}.${field.name} must be Input Type ` +
	          `but got: ${inspect$2(field.type)}.`,
	        (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0
	          ? void 0
	          : _field$astNode2.type,
	      );
	    }

	    if (isRequiredInputField(field) && field.deprecationReason != null) {
	      var _field$astNode3;

	      context.reportError(
	        `Required input field ${inputObj.name}.${field.name} cannot be deprecated.`,
	        [
	          getDeprecatedDirectiveNode(field.astNode),
	          (_field$astNode3 = field.astNode) === null ||
	          _field$astNode3 === void 0
	            ? void 0
	            : _field$astNode3.type,
	        ],
	      );
	    }
	  }
	}

	function createInputObjectCircularRefsValidator(context) {
	  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.
	  // Tracks already visited types to maintain O(N) and to ensure that cycles
	  // are not redundantly reported.
	  const visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors

	  const fieldPath = []; // Position in the type path

	  const fieldPathIndexByTypeName = Object.create(null);
	  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.
	  // It does not terminate when a cycle was found but continues to explore
	  // the graph to find all possible cycles.

	  function detectCycleRecursive(inputObj) {
	    if (visitedTypes[inputObj.name]) {
	      return;
	    }

	    visitedTypes[inputObj.name] = true;
	    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;
	    const fields = Object.values(inputObj.getFields());

	    for (const field of fields) {
	      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {
	        const fieldType = field.type.ofType;
	        const cycleIndex = fieldPathIndexByTypeName[fieldType.name];
	        fieldPath.push(field);

	        if (cycleIndex === undefined) {
	          detectCycleRecursive(fieldType);
	        } else {
	          const cyclePath = fieldPath.slice(cycleIndex);
	          const pathStr = cyclePath.map((fieldObj) => fieldObj.name).join('.');
	          context.reportError(
	            `Cannot reference Input Object "${fieldType.name}" within itself through a series of non-null fields: "${pathStr}".`,
	            cyclePath.map((fieldObj) => fieldObj.astNode),
	          );
	        }

	        fieldPath.pop();
	      }
	    }

	    fieldPathIndexByTypeName[inputObj.name] = undefined;
	  }
	}

	function getAllImplementsInterfaceNodes(type, iface) {
	  const { astNode, extensionASTNodes } = type;
	  const nodes =
	    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203

	  return nodes
	    .flatMap((typeNode) => {
	      var _typeNode$interfaces;

	      return (
	        /* c8 ignore next */
	        (_typeNode$interfaces = typeNode.interfaces) !== null &&
	          _typeNode$interfaces !== void 0
	          ? _typeNode$interfaces
	          : []
	      );
	    })
	    .filter((ifaceNode) => ifaceNode.name.value === iface.name);
	}

	function getUnionMemberTypeNodes(union, typeName) {
	  const { astNode, extensionASTNodes } = union;
	  const nodes =
	    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203

	  return nodes
	    .flatMap((unionNode) => {
	      var _unionNode$types;

	      return (
	        /* c8 ignore next */
	        (_unionNode$types = unionNode.types) !== null &&
	          _unionNode$types !== void 0
	          ? _unionNode$types
	          : []
	      );
	    })
	    .filter((typeNode) => typeNode.name.value === typeName);
	}

	function getDeprecatedDirectiveNode(definitionNode) {
	  var _definitionNode$direc;

	  return definitionNode === null || definitionNode === void 0
	    ? void 0
	    : (_definitionNode$direc = definitionNode.directives) === null ||
	      _definitionNode$direc === void 0
	    ? void 0
	    : _definitionNode$direc.find(
	        (node) => node.name.value === GraphQLDeprecatedDirective.name,
	      );
	}

	function typeFromAST(schema, typeNode) {
	  switch (typeNode.kind) {
	    case Kind.LIST_TYPE: {
	      const innerType = typeFromAST(schema, typeNode.type);
	      return innerType && new GraphQLList(innerType);
	    }

	    case Kind.NON_NULL_TYPE: {
	      const innerType = typeFromAST(schema, typeNode.type);
	      return innerType && new GraphQLNonNull(innerType);
	    }

	    case Kind.NAMED_TYPE:
	      return schema.getType(typeNode.name.value);
	  }
	}

	/**
	 * TypeInfo is a utility class which, given a GraphQL schema, can keep track
	 * of the current field and type definitions at any point in a GraphQL document
	 * AST during a recursive descent by calling `enter(node)` and `leave(node)`.
	 */

	class TypeInfo {
	  constructor(
	    schema,
	    /**
	     * Initial type may be provided in rare cases to facilitate traversals
	     *  beginning somewhere other than documents.
	     */
	    initialType,
	    /** @deprecated will be removed in 17.0.0 */
	    getFieldDefFn,
	  ) {
	    this._schema = schema;
	    this._typeStack = [];
	    this._parentTypeStack = [];
	    this._inputTypeStack = [];
	    this._fieldDefStack = [];
	    this._defaultValueStack = [];
	    this._directive = null;
	    this._argument = null;
	    this._enumValue = null;
	    this._getFieldDef =
	      getFieldDefFn !== null && getFieldDefFn !== void 0
	        ? getFieldDefFn
	        : getFieldDef$1;

	    if (initialType) {
	      if (isInputType(initialType)) {
	        this._inputTypeStack.push(initialType);
	      }

	      if (isCompositeType(initialType)) {
	        this._parentTypeStack.push(initialType);
	      }

	      if (isOutputType(initialType)) {
	        this._typeStack.push(initialType);
	      }
	    }
	  }

	  get [Symbol.toStringTag]() {
	    return 'TypeInfo';
	  }

	  getType() {
	    if (this._typeStack.length > 0) {
	      return this._typeStack[this._typeStack.length - 1];
	    }
	  }

	  getParentType() {
	    if (this._parentTypeStack.length > 0) {
	      return this._parentTypeStack[this._parentTypeStack.length - 1];
	    }
	  }

	  getInputType() {
	    if (this._inputTypeStack.length > 0) {
	      return this._inputTypeStack[this._inputTypeStack.length - 1];
	    }
	  }

	  getParentInputType() {
	    if (this._inputTypeStack.length > 1) {
	      return this._inputTypeStack[this._inputTypeStack.length - 2];
	    }
	  }

	  getFieldDef() {
	    if (this._fieldDefStack.length > 0) {
	      return this._fieldDefStack[this._fieldDefStack.length - 1];
	    }
	  }

	  getDefaultValue() {
	    if (this._defaultValueStack.length > 0) {
	      return this._defaultValueStack[this._defaultValueStack.length - 1];
	    }
	  }

	  getDirective() {
	    return this._directive;
	  }

	  getArgument() {
	    return this._argument;
	  }

	  getEnumValue() {
	    return this._enumValue;
	  }

	  enter(node) {
	    const schema = this._schema; // Note: many of the types below are explicitly typed as "unknown" to drop
	    // any assumptions of a valid schema to ensure runtime types are properly
	    // checked before continuing since TypeInfo is used as part of validation
	    // which occurs before guarantees of schema and document validity.

	    switch (node.kind) {
	      case Kind.SELECTION_SET: {
	        const namedType = getNamedType(this.getType());

	        this._parentTypeStack.push(
	          isCompositeType(namedType) ? namedType : undefined,
	        );

	        break;
	      }

	      case Kind.FIELD: {
	        const parentType = this.getParentType();
	        let fieldDef;
	        let fieldType;

	        if (parentType) {
	          fieldDef = this._getFieldDef(schema, parentType, node);

	          if (fieldDef) {
	            fieldType = fieldDef.type;
	          }
	        }

	        this._fieldDefStack.push(fieldDef);

	        this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);

	        break;
	      }

	      case Kind.DIRECTIVE:
	        this._directive = schema.getDirective(node.name.value);
	        break;

	      case Kind.OPERATION_DEFINITION: {
	        const rootType = schema.getRootType(node.operation);

	        this._typeStack.push(isObjectType(rootType) ? rootType : undefined);

	        break;
	      }

	      case Kind.INLINE_FRAGMENT:
	      case Kind.FRAGMENT_DEFINITION: {
	        const typeConditionAST = node.typeCondition;
	        const outputType = typeConditionAST
	          ? typeFromAST(schema, typeConditionAST)
	          : getNamedType(this.getType());

	        this._typeStack.push(isOutputType(outputType) ? outputType : undefined);

	        break;
	      }

	      case Kind.VARIABLE_DEFINITION: {
	        const inputType = typeFromAST(schema, node.type);

	        this._inputTypeStack.push(
	          isInputType(inputType) ? inputType : undefined,
	        );

	        break;
	      }

	      case Kind.ARGUMENT: {
	        var _this$getDirective;

	        let argDef;
	        let argType;
	        const fieldOrDirective =
	          (_this$getDirective = this.getDirective()) !== null &&
	          _this$getDirective !== void 0
	            ? _this$getDirective
	            : this.getFieldDef();

	        if (fieldOrDirective) {
	          argDef = fieldOrDirective.args.find(
	            (arg) => arg.name === node.name.value,
	          );

	          if (argDef) {
	            argType = argDef.type;
	          }
	        }

	        this._argument = argDef;

	        this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);

	        this._inputTypeStack.push(isInputType(argType) ? argType : undefined);

	        break;
	      }

	      case Kind.LIST: {
	        const listType = getNullableType(this.getInputType());
	        const itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.

	        this._defaultValueStack.push(undefined);

	        this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);

	        break;
	      }

	      case Kind.OBJECT_FIELD: {
	        const objectType = getNamedType(this.getInputType());
	        let inputFieldType;
	        let inputField;

	        if (isInputObjectType(objectType)) {
	          inputField = objectType.getFields()[node.name.value];

	          if (inputField) {
	            inputFieldType = inputField.type;
	          }
	        }

	        this._defaultValueStack.push(
	          inputField ? inputField.defaultValue : undefined,
	        );

	        this._inputTypeStack.push(
	          isInputType(inputFieldType) ? inputFieldType : undefined,
	        );

	        break;
	      }

	      case Kind.ENUM: {
	        const enumType = getNamedType(this.getInputType());
	        let enumValue;

	        if (isEnumType(enumType)) {
	          enumValue = enumType.getValue(node.value);
	        }

	        this._enumValue = enumValue;
	        break;
	      }
	    }
	  }

	  leave(node) {
	    switch (node.kind) {
	      case Kind.SELECTION_SET:
	        this._parentTypeStack.pop();

	        break;

	      case Kind.FIELD:
	        this._fieldDefStack.pop();

	        this._typeStack.pop();

	        break;

	      case Kind.DIRECTIVE:
	        this._directive = null;
	        break;

	      case Kind.OPERATION_DEFINITION:
	      case Kind.INLINE_FRAGMENT:
	      case Kind.FRAGMENT_DEFINITION:
	        this._typeStack.pop();

	        break;

	      case Kind.VARIABLE_DEFINITION:
	        this._inputTypeStack.pop();

	        break;

	      case Kind.ARGUMENT:
	        this._argument = null;

	        this._defaultValueStack.pop();

	        this._inputTypeStack.pop();

	        break;

	      case Kind.LIST:
	      case Kind.OBJECT_FIELD:
	        this._defaultValueStack.pop();

	        this._inputTypeStack.pop();

	        break;

	      case Kind.ENUM:
	        this._enumValue = null;
	        break;
	    }
	  }
	}

	/**
	 * Not exactly the same as the executor's definition of getFieldDef, in this
	 * statically evaluated environment we do not always have an Object type,
	 * and need to handle Interface and Union types.
	 */
	function getFieldDef$1(schema, parentType, fieldNode) {
	  const name = fieldNode.name.value;

	  if (
	    name === SchemaMetaFieldDef.name &&
	    schema.getQueryType() === parentType
	  ) {
	    return SchemaMetaFieldDef;
	  }

	  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
	    return TypeMetaFieldDef;
	  }

	  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {
	    return TypeNameMetaFieldDef;
	  }

	  if (isObjectType(parentType) || isInterfaceType(parentType)) {
	    return parentType.getFields()[name];
	  }
	}
	/**
	 * Creates a new visitor instance which maintains a provided TypeInfo instance
	 * along with visiting visitor.
	 */

	function visitWithTypeInfo(typeInfo, visitor) {
	  return {
	    enter(...args) {
	      const node = args[0];
	      typeInfo.enter(node);
	      const fn = getEnterLeaveForKind(visitor, node.kind).enter;

	      if (fn) {
	        const result = fn.apply(visitor, args);

	        if (result !== undefined) {
	          typeInfo.leave(node);

	          if (isNode(result)) {
	            typeInfo.enter(result);
	          }
	        }

	        return result;
	      }
	    },

	    leave(...args) {
	      const node = args[0];
	      const fn = getEnterLeaveForKind(visitor, node.kind).leave;
	      let result;

	      if (fn) {
	        result = fn.apply(visitor, args);
	      }

	      typeInfo.leave(node);
	      return result;
	    },
	  };
	}

	function isDefinitionNode(node) {
	  return (
	    isExecutableDefinitionNode(node) ||
	    isTypeSystemDefinitionNode(node) ||
	    isTypeSystemExtensionNode(node)
	  );
	}
	function isExecutableDefinitionNode(node) {
	  return (
	    node.kind === Kind.OPERATION_DEFINITION ||
	    node.kind === Kind.FRAGMENT_DEFINITION
	  );
	}
	function isSelectionNode(node) {
	  return (
	    node.kind === Kind.FIELD ||
	    node.kind === Kind.FRAGMENT_SPREAD ||
	    node.kind === Kind.INLINE_FRAGMENT
	  );
	}
	function isValueNode(node) {
	  return (
	    node.kind === Kind.VARIABLE ||
	    node.kind === Kind.INT ||
	    node.kind === Kind.FLOAT ||
	    node.kind === Kind.STRING ||
	    node.kind === Kind.BOOLEAN ||
	    node.kind === Kind.NULL ||
	    node.kind === Kind.ENUM ||
	    node.kind === Kind.LIST ||
	    node.kind === Kind.OBJECT
	  );
	}
	function isConstValueNode(node) {
	  return (
	    isValueNode(node) &&
	    (node.kind === Kind.LIST
	      ? node.values.some(isConstValueNode)
	      : node.kind === Kind.OBJECT
	      ? node.fields.some((field) => isConstValueNode(field.value))
	      : node.kind !== Kind.VARIABLE)
	  );
	}
	function isTypeNode(node) {
	  return (
	    node.kind === Kind.NAMED_TYPE ||
	    node.kind === Kind.LIST_TYPE ||
	    node.kind === Kind.NON_NULL_TYPE
	  );
	}
	function isTypeSystemDefinitionNode(node) {
	  return (
	    node.kind === Kind.SCHEMA_DEFINITION ||
	    isTypeDefinitionNode(node) ||
	    node.kind === Kind.DIRECTIVE_DEFINITION
	  );
	}
	function isTypeDefinitionNode(node) {
	  return (
	    node.kind === Kind.SCALAR_TYPE_DEFINITION ||
	    node.kind === Kind.OBJECT_TYPE_DEFINITION ||
	    node.kind === Kind.INTERFACE_TYPE_DEFINITION ||
	    node.kind === Kind.UNION_TYPE_DEFINITION ||
	    node.kind === Kind.ENUM_TYPE_DEFINITION ||
	    node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION
	  );
	}
	function isTypeSystemExtensionNode(node) {
	  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
	}
	function isTypeExtensionNode(node) {
	  return (
	    node.kind === Kind.SCALAR_TYPE_EXTENSION ||
	    node.kind === Kind.OBJECT_TYPE_EXTENSION ||
	    node.kind === Kind.INTERFACE_TYPE_EXTENSION ||
	    node.kind === Kind.UNION_TYPE_EXTENSION ||
	    node.kind === Kind.ENUM_TYPE_EXTENSION ||
	    node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION
	  );
	}

	/**
	 * Executable definitions
	 *
	 * A GraphQL document is only valid for execution if all definitions are either
	 * operation or fragment definitions.
	 *
	 * See https://spec.graphql.org/draft/#sec-Executable-Definitions
	 */
	function ExecutableDefinitionsRule(context) {
	  return {
	    Document(node) {
	      for (const definition of node.definitions) {
	        if (!isExecutableDefinitionNode(definition)) {
	          const defName =
	            definition.kind === Kind.SCHEMA_DEFINITION ||
	            definition.kind === Kind.SCHEMA_EXTENSION
	              ? 'schema'
	              : '"' + definition.name.value + '"';
	          context.reportError(
	            new GraphQLError(
	              `The ${defName} definition is not executable.`,
	              definition,
	            ),
	          );
	        }
	      }

	      return false;
	    },
	  };
	}

	/**
	 * Fields on correct type
	 *
	 * A GraphQL document is only valid if all fields selected are defined by the
	 * parent type, or are an allowed meta field such as __typename.
	 *
	 * See https://spec.graphql.org/draft/#sec-Field-Selections
	 */
	function FieldsOnCorrectTypeRule(context) {
	  return {
	    Field(node) {
	      const type = context.getParentType();

	      if (type) {
	        const fieldDef = context.getFieldDef();

	        if (!fieldDef) {
	          // This field doesn't exist, lets look for suggestions.
	          const schema = context.getSchema();
	          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.

	          let suggestion = didYouMean$1(
	            'to use an inline fragment on',
	            getSuggestedTypeNames(schema, type, fieldName),
	          ); // If there are no suggested types, then perhaps this was a typo?

	          if (suggestion === '') {
	            suggestion = didYouMean$1(getSuggestedFieldNames(type, fieldName));
	          } // Report an error, including helpful suggestions.

	          context.reportError(
	            new GraphQLError(
	              `Cannot query field "${fieldName}" on type "${type.name}".` +
	                suggestion,
	              node,
	            ),
	          );
	        }
	      }
	    },
	  };
	}
	/**
	 * Go through all of the implementations of type, as well as the interfaces that
	 * they implement. If any of those types include the provided field, suggest them,
	 * sorted by how often the type is referenced.
	 */

	function getSuggestedTypeNames(schema, type, fieldName) {
	  if (!isAbstractType(type)) {
	    // Must be an Object type, which does not have possible fields.
	    return [];
	  }

	  const suggestedTypes = new Set();
	  const usageCount = Object.create(null);

	  for (const possibleType of schema.getPossibleTypes(type)) {
	    if (!possibleType.getFields()[fieldName]) {
	      continue;
	    } // This object type defines this field.

	    suggestedTypes.add(possibleType);
	    usageCount[possibleType.name] = 1;

	    for (const possibleInterface of possibleType.getInterfaces()) {
	      var _usageCount$possibleI;

	      if (!possibleInterface.getFields()[fieldName]) {
	        continue;
	      } // This interface type defines this field.

	      suggestedTypes.add(possibleInterface);
	      usageCount[possibleInterface.name] =
	        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==
	          null && _usageCount$possibleI !== void 0
	          ? _usageCount$possibleI
	          : 0) + 1;
	    }
	  }

	  return [...suggestedTypes]
	    .sort((typeA, typeB) => {
	      // Suggest both interface and object types based on how common they are.
	      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];

	      if (usageCountDiff !== 0) {
	        return usageCountDiff;
	      } // Suggest super types first followed by subtypes

	      if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {
	        return -1;
	      }

	      if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {
	        return 1;
	      }

	      return naturalCompare(typeA.name, typeB.name);
	    })
	    .map((x) => x.name);
	}
	/**
	 * For the field name provided, determine if there are any similar field names
	 * that may be the result of a typo.
	 */

	function getSuggestedFieldNames(type, fieldName) {
	  if (isObjectType(type) || isInterfaceType(type)) {
	    const possibleFieldNames = Object.keys(type.getFields());
	    return suggestionList$1(fieldName, possibleFieldNames);
	  } // Otherwise, must be a Union type, which does not define fields.

	  return [];
	}

	/**
	 * Fragments on composite type
	 *
	 * Fragments use a type condition to determine if they apply, since fragments
	 * can only be spread into a composite type (object, interface, or union), the
	 * type condition must also be a composite type.
	 *
	 * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types
	 */
	function FragmentsOnCompositeTypesRule(context) {
	  return {
	    InlineFragment(node) {
	      const typeCondition = node.typeCondition;

	      if (typeCondition) {
	        const type = typeFromAST(context.getSchema(), typeCondition);

	        if (type && !isCompositeType(type)) {
	          const typeStr = print$1(typeCondition);
	          context.reportError(
	            new GraphQLError(
	              `Fragment cannot condition on non composite type "${typeStr}".`,
	              typeCondition,
	            ),
	          );
	        }
	      }
	    },

	    FragmentDefinition(node) {
	      const type = typeFromAST(context.getSchema(), node.typeCondition);

	      if (type && !isCompositeType(type)) {
	        const typeStr = print$1(node.typeCondition);
	        context.reportError(
	          new GraphQLError(
	            `Fragment "${node.name.value}" cannot condition on non composite type "${typeStr}".`,
	            node.typeCondition,
	          ),
	        );
	      }
	    },
	  };
	}

	/**
	 * Known argument names
	 *
	 * A GraphQL field is only valid if all supplied arguments are defined by
	 * that field.
	 *
	 * See https://spec.graphql.org/draft/#sec-Argument-Names
	 * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations
	 */
	function KnownArgumentNamesRule(context) {
	  return {
	    // eslint-disable-next-line new-cap
	    ...KnownArgumentNamesOnDirectivesRule(context),

	    Argument(argNode) {
	      const argDef = context.getArgument();
	      const fieldDef = context.getFieldDef();
	      const parentType = context.getParentType();

	      if (!argDef && fieldDef && parentType) {
	        const argName = argNode.name.value;
	        const knownArgsNames = fieldDef.args.map((arg) => arg.name);
	        const suggestions = suggestionList$1(argName, knownArgsNames);
	        context.reportError(
	          new GraphQLError(
	            `Unknown argument "${argName}" on field "${parentType.name}.${fieldDef.name}".` +
	              didYouMean$1(suggestions),
	            argNode,
	          ),
	        );
	      }
	    },
	  };
	}
	/**
	 * @internal
	 */

	function KnownArgumentNamesOnDirectivesRule(context) {
	  const directiveArgs = Object.create(null);
	  const schema = context.getSchema();
	  const definedDirectives = schema
	    ? schema.getDirectives()
	    : specifiedDirectives;

	  for (const directive of definedDirectives) {
	    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);
	  }

	  const astDefinitions = context.getDocument().definitions;

	  for (const def of astDefinitions) {
	    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
	      var _def$arguments;

	      // FIXME: https://github.com/graphql/graphql-js/issues/2203

	      /* c8 ignore next */
	      const argsNodes =
	        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0
	          ? _def$arguments
	          : [];
	      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);
	    }
	  }

	  return {
	    Directive(directiveNode) {
	      const directiveName = directiveNode.name.value;
	      const knownArgs = directiveArgs[directiveName];

	      if (directiveNode.arguments && knownArgs) {
	        for (const argNode of directiveNode.arguments) {
	          const argName = argNode.name.value;

	          if (!knownArgs.includes(argName)) {
	            const suggestions = suggestionList$1(argName, knownArgs);
	            context.reportError(
	              new GraphQLError(
	                `Unknown argument "${argName}" on directive "@${directiveName}".` +
	                  didYouMean$1(suggestions),
	                argNode,
	              ),
	            );
	          }
	        }
	      }

	      return false;
	    },
	  };
	}

	/**
	 * Known directives
	 *
	 * A GraphQL document is only valid if all `@directives` are known by the
	 * schema and legally positioned.
	 *
	 * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined
	 */
	function KnownDirectivesRule(context) {
	  const locationsMap = Object.create(null);
	  const schema = context.getSchema();
	  const definedDirectives = schema
	    ? schema.getDirectives()
	    : specifiedDirectives;

	  for (const directive of definedDirectives) {
	    locationsMap[directive.name] = directive.locations;
	  }

	  const astDefinitions = context.getDocument().definitions;

	  for (const def of astDefinitions) {
	    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
	      locationsMap[def.name.value] = def.locations.map((name) => name.value);
	    }
	  }

	  return {
	    Directive(node, _key, _parent, _path, ancestors) {
	      const name = node.name.value;
	      const locations = locationsMap[name];

	      if (!locations) {
	        context.reportError(
	          new GraphQLError(`Unknown directive "@${name}".`, node),
	        );
	        return;
	      }

	      const candidateLocation = getDirectiveLocationForASTPath(ancestors);

	      if (candidateLocation && !locations.includes(candidateLocation)) {
	        context.reportError(
	          new GraphQLError(
	            `Directive "@${name}" may not be used on ${candidateLocation}.`,
	            node,
	          ),
	        );
	      }
	    },
	  };
	}

	function getDirectiveLocationForASTPath(ancestors) {
	  const appliedTo = ancestors[ancestors.length - 1];
	  'kind' in appliedTo || invariant(false);

	  switch (appliedTo.kind) {
	    case Kind.OPERATION_DEFINITION:
	      return getDirectiveLocationForOperation(appliedTo.operation);

	    case Kind.FIELD:
	      return DirectiveLocation.FIELD;

	    case Kind.FRAGMENT_SPREAD:
	      return DirectiveLocation.FRAGMENT_SPREAD;

	    case Kind.INLINE_FRAGMENT:
	      return DirectiveLocation.INLINE_FRAGMENT;

	    case Kind.FRAGMENT_DEFINITION:
	      return DirectiveLocation.FRAGMENT_DEFINITION;

	    case Kind.VARIABLE_DEFINITION:
	      return DirectiveLocation.VARIABLE_DEFINITION;

	    case Kind.SCHEMA_DEFINITION:
	    case Kind.SCHEMA_EXTENSION:
	      return DirectiveLocation.SCHEMA;

	    case Kind.SCALAR_TYPE_DEFINITION:
	    case Kind.SCALAR_TYPE_EXTENSION:
	      return DirectiveLocation.SCALAR;

	    case Kind.OBJECT_TYPE_DEFINITION:
	    case Kind.OBJECT_TYPE_EXTENSION:
	      return DirectiveLocation.OBJECT;

	    case Kind.FIELD_DEFINITION:
	      return DirectiveLocation.FIELD_DEFINITION;

	    case Kind.INTERFACE_TYPE_DEFINITION:
	    case Kind.INTERFACE_TYPE_EXTENSION:
	      return DirectiveLocation.INTERFACE;

	    case Kind.UNION_TYPE_DEFINITION:
	    case Kind.UNION_TYPE_EXTENSION:
	      return DirectiveLocation.UNION;

	    case Kind.ENUM_TYPE_DEFINITION:
	    case Kind.ENUM_TYPE_EXTENSION:
	      return DirectiveLocation.ENUM;

	    case Kind.ENUM_VALUE_DEFINITION:
	      return DirectiveLocation.ENUM_VALUE;

	    case Kind.INPUT_OBJECT_TYPE_DEFINITION:
	    case Kind.INPUT_OBJECT_TYPE_EXTENSION:
	      return DirectiveLocation.INPUT_OBJECT;

	    case Kind.INPUT_VALUE_DEFINITION: {
	      const parentNode = ancestors[ancestors.length - 3];
	      'kind' in parentNode || invariant(false);
	      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION
	        ? DirectiveLocation.INPUT_FIELD_DEFINITION
	        : DirectiveLocation.ARGUMENT_DEFINITION;
	    }
	    // Not reachable, all possible types have been considered.

	    /* c8 ignore next */

	    default:
	      invariant(false, 'Unexpected kind: ' + inspect$2(appliedTo.kind));
	  }
	}

	function getDirectiveLocationForOperation(operation) {
	  switch (operation) {
	    case OperationTypeNode.QUERY:
	      return DirectiveLocation.QUERY;

	    case OperationTypeNode.MUTATION:
	      return DirectiveLocation.MUTATION;

	    case OperationTypeNode.SUBSCRIPTION:
	      return DirectiveLocation.SUBSCRIPTION;
	  }
	}

	/**
	 * Known fragment names
	 *
	 * A GraphQL document is only valid if all `...Fragment` fragment spreads refer
	 * to fragments defined in the same document.
	 *
	 * See https://spec.graphql.org/draft/#sec-Fragment-spread-target-defined
	 */
	function KnownFragmentNamesRule(context) {
	  return {
	    FragmentSpread(node) {
	      const fragmentName = node.name.value;
	      const fragment = context.getFragment(fragmentName);

	      if (!fragment) {
	        context.reportError(
	          new GraphQLError(`Unknown fragment "${fragmentName}".`, node.name),
	        );
	      }
	    },
	  };
	}

	/**
	 * Known type names
	 *
	 * A GraphQL document is only valid if referenced types (specifically
	 * variable definitions and fragment conditions) are defined by the type schema.
	 *
	 * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence
	 */
	function KnownTypeNamesRule(context) {
	  const schema = context.getSchema();
	  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);
	  const definedTypes = Object.create(null);

	  for (const def of context.getDocument().definitions) {
	    if (isTypeDefinitionNode(def)) {
	      definedTypes[def.name.value] = true;
	    }
	  }

	  const typeNames = [
	    ...Object.keys(existingTypesMap),
	    ...Object.keys(definedTypes),
	  ];
	  return {
	    NamedType(node, _1, parent, _2, ancestors) {
	      const typeName = node.name.value;

	      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
	        var _ancestors$;

	        const definitionNode =
	          (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0
	            ? _ancestors$
	            : parent;
	        const isSDL = definitionNode != null && isSDLNode$1(definitionNode);

	        if (isSDL && standardTypeNames$1.includes(typeName)) {
	          return;
	        }

	        const suggestedTypes = suggestionList$1(
	          typeName,
	          isSDL ? standardTypeNames$1.concat(typeNames) : typeNames,
	        );
	        context.reportError(
	          new GraphQLError(
	            `Unknown type "${typeName}".` + didYouMean$1(suggestedTypes),
	            node,
	          ),
	        );
	      }
	    },
	  };
	}
	const standardTypeNames$1 = [...specifiedScalarTypes, ...introspectionTypes].map(
	  (type) => type.name,
	);

	function isSDLNode$1(value) {
	  return (
	    'kind' in value &&
	    (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value))
	  );
	}

	/**
	 * Lone anonymous operation
	 *
	 * A GraphQL document is only valid if when it contains an anonymous operation
	 * (the query short-hand) that it contains only that one operation definition.
	 *
	 * See https://spec.graphql.org/draft/#sec-Lone-Anonymous-Operation
	 */
	function LoneAnonymousOperationRule(context) {
	  let operationCount = 0;
	  return {
	    Document(node) {
	      operationCount = node.definitions.filter(
	        (definition) => definition.kind === Kind.OPERATION_DEFINITION,
	      ).length;
	    },

	    OperationDefinition(node) {
	      if (!node.name && operationCount > 1) {
	        context.reportError(
	          new GraphQLError(
	            'This anonymous operation must be the only defined operation.',
	            node,
	          ),
	        );
	      }
	    },
	  };
	}

	/**
	 * Lone Schema definition
	 *
	 * A GraphQL document is only valid if it contains only one schema definition.
	 */
	function LoneSchemaDefinitionRule(context) {
	  var _ref, _ref2, _oldSchema$astNode;

	  const oldSchema = context.getSchema();
	  const alreadyDefined =
	    (_ref =
	      (_ref2 =
	        (_oldSchema$astNode =
	          oldSchema === null || oldSchema === void 0
	            ? void 0
	            : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0
	          ? _oldSchema$astNode
	          : oldSchema === null || oldSchema === void 0
	          ? void 0
	          : oldSchema.getQueryType()) !== null && _ref2 !== void 0
	        ? _ref2
	        : oldSchema === null || oldSchema === void 0
	        ? void 0
	        : oldSchema.getMutationType()) !== null && _ref !== void 0
	      ? _ref
	      : oldSchema === null || oldSchema === void 0
	      ? void 0
	      : oldSchema.getSubscriptionType();
	  let schemaDefinitionsCount = 0;
	  return {
	    SchemaDefinition(node) {
	      if (alreadyDefined) {
	        context.reportError(
	          new GraphQLError(
	            'Cannot define a new schema within a schema extension.',
	            node,
	          ),
	        );
	        return;
	      }

	      if (schemaDefinitionsCount > 0) {
	        context.reportError(
	          new GraphQLError('Must provide only one schema definition.', node),
	        );
	      }

	      ++schemaDefinitionsCount;
	    },
	  };
	}

	/**
	 * No fragment cycles
	 *
	 * The graph of fragment spreads must not form any cycles including spreading itself.
	 * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.
	 *
	 * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles
	 */
	function NoFragmentCyclesRule(context) {
	  // Tracks already visited fragments to maintain O(N) and to ensure that cycles
	  // are not redundantly reported.
	  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors

	  const spreadPath = []; // Position in the spread path

	  const spreadPathIndexByName = Object.create(null);
	  return {
	    OperationDefinition: () => false,

	    FragmentDefinition(node) {
	      detectCycleRecursive(node);
	      return false;
	    },
	  }; // This does a straight-forward DFS to find cycles.
	  // It does not terminate when a cycle was found but continues to explore
	  // the graph to find all possible cycles.

	  function detectCycleRecursive(fragment) {
	    if (visitedFrags[fragment.name.value]) {
	      return;
	    }

	    const fragmentName = fragment.name.value;
	    visitedFrags[fragmentName] = true;
	    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);

	    if (spreadNodes.length === 0) {
	      return;
	    }

	    spreadPathIndexByName[fragmentName] = spreadPath.length;

	    for (const spreadNode of spreadNodes) {
	      const spreadName = spreadNode.name.value;
	      const cycleIndex = spreadPathIndexByName[spreadName];
	      spreadPath.push(spreadNode);

	      if (cycleIndex === undefined) {
	        const spreadFragment = context.getFragment(spreadName);

	        if (spreadFragment) {
	          detectCycleRecursive(spreadFragment);
	        }
	      } else {
	        const cyclePath = spreadPath.slice(cycleIndex);
	        const viaPath = cyclePath
	          .slice(0, -1)
	          .map((s) => '"' + s.name.value + '"')
	          .join(', ');
	        context.reportError(
	          new GraphQLError(
	            `Cannot spread fragment "${spreadName}" within itself` +
	              (viaPath !== '' ? ` via ${viaPath}.` : '.'),
	            cyclePath,
	          ),
	        );
	      }

	      spreadPath.pop();
	    }

	    spreadPathIndexByName[fragmentName] = undefined;
	  }
	}

	/**
	 * No undefined variables
	 *
	 * A GraphQL operation is only valid if all variables encountered, both directly
	 * and via fragment spreads, are defined by that operation.
	 *
	 * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined
	 */
	function NoUndefinedVariablesRule(context) {
	  let variableNameDefined = Object.create(null);
	  return {
	    OperationDefinition: {
	      enter() {
	        variableNameDefined = Object.create(null);
	      },

	      leave(operation) {
	        const usages = context.getRecursiveVariableUsages(operation);

	        for (const { node } of usages) {
	          const varName = node.name.value;

	          if (variableNameDefined[varName] !== true) {
	            context.reportError(
	              new GraphQLError(
	                operation.name
	                  ? `Variable "$${varName}" is not defined by operation "${operation.name.value}".`
	                  : `Variable "$${varName}" is not defined.`,
	                [node, operation],
	              ),
	            );
	          }
	        }
	      },
	    },

	    VariableDefinition(node) {
	      variableNameDefined[node.variable.name.value] = true;
	    },
	  };
	}

	/**
	 * No unused fragments
	 *
	 * A GraphQL document is only valid if all fragment definitions are spread
	 * within operations, or spread within other fragments spread within operations.
	 *
	 * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used
	 */
	function NoUnusedFragmentsRule(context) {
	  const operationDefs = [];
	  const fragmentDefs = [];
	  return {
	    OperationDefinition(node) {
	      operationDefs.push(node);
	      return false;
	    },

	    FragmentDefinition(node) {
	      fragmentDefs.push(node);
	      return false;
	    },

	    Document: {
	      leave() {
	        const fragmentNameUsed = Object.create(null);

	        for (const operation of operationDefs) {
	          for (const fragment of context.getRecursivelyReferencedFragments(
	            operation,
	          )) {
	            fragmentNameUsed[fragment.name.value] = true;
	          }
	        }

	        for (const fragmentDef of fragmentDefs) {
	          const fragName = fragmentDef.name.value;

	          if (fragmentNameUsed[fragName] !== true) {
	            context.reportError(
	              new GraphQLError(
	                `Fragment "${fragName}" is never used.`,
	                fragmentDef,
	              ),
	            );
	          }
	        }
	      },
	    },
	  };
	}

	/**
	 * No unused variables
	 *
	 * A GraphQL operation is only valid if all variables defined by an operation
	 * are used, either directly or within a spread fragment.
	 *
	 * See https://spec.graphql.org/draft/#sec-All-Variables-Used
	 */
	function NoUnusedVariablesRule(context) {
	  let variableDefs = [];
	  return {
	    OperationDefinition: {
	      enter() {
	        variableDefs = [];
	      },

	      leave(operation) {
	        const variableNameUsed = Object.create(null);
	        const usages = context.getRecursiveVariableUsages(operation);

	        for (const { node } of usages) {
	          variableNameUsed[node.name.value] = true;
	        }

	        for (const variableDef of variableDefs) {
	          const variableName = variableDef.variable.name.value;

	          if (variableNameUsed[variableName] !== true) {
	            context.reportError(
	              new GraphQLError(
	                operation.name
	                  ? `Variable "$${variableName}" is never used in operation "${operation.name.value}".`
	                  : `Variable "$${variableName}" is never used.`,
	                variableDef,
	              ),
	            );
	          }
	        }
	      },
	    },

	    VariableDefinition(def) {
	      variableDefs.push(def);
	    },
	  };
	}

	/**
	 * Sort ValueNode.
	 *
	 * This function returns a sorted copy of the given ValueNode.
	 *
	 * @internal
	 */

	function sortValueNode(valueNode) {
	  switch (valueNode.kind) {
	    case Kind.OBJECT:
	      return { ...valueNode, fields: sortFields(valueNode.fields) };

	    case Kind.LIST:
	      return { ...valueNode, values: valueNode.values.map(sortValueNode) };

	    case Kind.INT:
	    case Kind.FLOAT:
	    case Kind.STRING:
	    case Kind.BOOLEAN:
	    case Kind.NULL:
	    case Kind.ENUM:
	    case Kind.VARIABLE:
	      return valueNode;
	  }
	}

	function sortFields(fields) {
	  return fields
	    .map((fieldNode) => ({
	      ...fieldNode,
	      value: sortValueNode(fieldNode.value),
	    }))
	    .sort((fieldA, fieldB) =>
	      naturalCompare(fieldA.name.value, fieldB.name.value),
	    );
	}

	function reasonMessage(reason) {
	  if (Array.isArray(reason)) {
	    return reason
	      .map(
	        ([responseName, subReason]) =>
	          `subfields "${responseName}" conflict because ` +
	          reasonMessage(subReason),
	      )
	      .join(' and ');
	  }

	  return reason;
	}
	/**
	 * Overlapping fields can be merged
	 *
	 * A selection set is only valid if all fields (including spreading any
	 * fragments) either correspond to distinct response names or can be merged
	 * without ambiguity.
	 *
	 * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging
	 */

	function OverlappingFieldsCanBeMergedRule(context) {
	  // A memoization for when two fragments are compared "between" each other for
	  // conflicts. Two fragments may be compared many times, so memoizing this can
	  // dramatically improve the performance of this validator.
	  const comparedFragmentPairs = new PairSet(); // A cache for the "field map" and list of fragment names found in any given
	  // selection set. Selection sets may be asked for this information multiple
	  // times, so this improves the performance of this validator.

	  const cachedFieldsAndFragmentNames = new Map();
	  return {
	    SelectionSet(selectionSet) {
	      const conflicts = findConflictsWithinSelectionSet(
	        context,
	        cachedFieldsAndFragmentNames,
	        comparedFragmentPairs,
	        context.getParentType(),
	        selectionSet,
	      );

	      for (const [[responseName, reason], fields1, fields2] of conflicts) {
	        const reasonMsg = reasonMessage(reason);
	        context.reportError(
	          new GraphQLError(
	            `Fields "${responseName}" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,
	            fields1.concat(fields2),
	          ),
	        );
	      }
	    },
	  };
	}

	/**
	 * Algorithm:
	 *
	 * Conflicts occur when two fields exist in a query which will produce the same
	 * response name, but represent differing values, thus creating a conflict.
	 * The algorithm below finds all conflicts via making a series of comparisons
	 * between fields. In order to compare as few fields as possible, this makes
	 * a series of comparisons "within" sets of fields and "between" sets of fields.
	 *
	 * Given any selection set, a collection produces both a set of fields by
	 * also including all inline fragments, as well as a list of fragments
	 * referenced by fragment spreads.
	 *
	 * A) Each selection set represented in the document first compares "within" its
	 * collected set of fields, finding any conflicts between every pair of
	 * overlapping fields.
	 * Note: This is the *only time* that a the fields "within" a set are compared
	 * to each other. After this only fields "between" sets are compared.
	 *
	 * B) Also, if any fragment is referenced in a selection set, then a
	 * comparison is made "between" the original set of fields and the
	 * referenced fragment.
	 *
	 * C) Also, if multiple fragments are referenced, then comparisons
	 * are made "between" each referenced fragment.
	 *
	 * D) When comparing "between" a set of fields and a referenced fragment, first
	 * a comparison is made between each field in the original set of fields and
	 * each field in the the referenced set of fields.
	 *
	 * E) Also, if any fragment is referenced in the referenced selection set,
	 * then a comparison is made "between" the original set of fields and the
	 * referenced fragment (recursively referring to step D).
	 *
	 * F) When comparing "between" two fragments, first a comparison is made between
	 * each field in the first referenced set of fields and each field in the the
	 * second referenced set of fields.
	 *
	 * G) Also, any fragments referenced by the first must be compared to the
	 * second, and any fragments referenced by the second must be compared to the
	 * first (recursively referring to step F).
	 *
	 * H) When comparing two fields, if both have selection sets, then a comparison
	 * is made "between" both selection sets, first comparing the set of fields in
	 * the first selection set with the set of fields in the second.
	 *
	 * I) Also, if any fragment is referenced in either selection set, then a
	 * comparison is made "between" the other set of fields and the
	 * referenced fragment.
	 *
	 * J) Also, if two fragments are referenced in both selection sets, then a
	 * comparison is made "between" the two fragments.
	 *
	 */
	// Find all conflicts found "within" a selection set, including those found
	// via spreading in fragments. Called when visiting each SelectionSet in the
	// GraphQL Document.
	function findConflictsWithinSelectionSet(
	  context,
	  cachedFieldsAndFragmentNames,
	  comparedFragmentPairs,
	  parentType,
	  selectionSet,
	) {
	  const conflicts = [];
	  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(
	    context,
	    cachedFieldsAndFragmentNames,
	    parentType,
	    selectionSet,
	  ); // (A) Find find all conflicts "within" the fields of this selection set.
	  // Note: this is the *only place* `collectConflictsWithin` is called.

	  collectConflictsWithin(
	    context,
	    conflicts,
	    cachedFieldsAndFragmentNames,
	    comparedFragmentPairs,
	    fieldMap,
	  );

	  if (fragmentNames.length !== 0) {
	    // (B) Then collect conflicts between these fields and those represented by
	    // each spread fragment name found.
	    for (let i = 0; i < fragmentNames.length; i++) {
	      collectConflictsBetweenFieldsAndFragment(
	        context,
	        conflicts,
	        cachedFieldsAndFragmentNames,
	        comparedFragmentPairs,
	        false,
	        fieldMap,
	        fragmentNames[i],
	      ); // (C) Then compare this fragment with all other fragments found in this
	      // selection set to collect conflicts between fragments spread together.
	      // This compares each item in the list of fragment names to every other
	      // item in that same list (except for itself).

	      for (let j = i + 1; j < fragmentNames.length; j++) {
	        collectConflictsBetweenFragments(
	          context,
	          conflicts,
	          cachedFieldsAndFragmentNames,
	          comparedFragmentPairs,
	          false,
	          fragmentNames[i],
	          fragmentNames[j],
	        );
	      }
	    }
	  }

	  return conflicts;
	} // Collect all conflicts found between a set of fields and a fragment reference
	// including via spreading in any nested fragments.

	function collectConflictsBetweenFieldsAndFragment(
	  context,
	  conflicts,
	  cachedFieldsAndFragmentNames,
	  comparedFragmentPairs,
	  areMutuallyExclusive,
	  fieldMap,
	  fragmentName,
	) {
	  const fragment = context.getFragment(fragmentName);

	  if (!fragment) {
	    return;
	  }

	  const [fieldMap2, referencedFragmentNames] =
	    getReferencedFieldsAndFragmentNames(
	      context,
	      cachedFieldsAndFragmentNames,
	      fragment,
	    ); // Do not compare a fragment's fieldMap to itself.

	  if (fieldMap === fieldMap2) {
	    return;
	  } // (D) First collect any conflicts between the provided collection of fields
	  // and the collection of fields represented by the given fragment.

	  collectConflictsBetween(
	    context,
	    conflicts,
	    cachedFieldsAndFragmentNames,
	    comparedFragmentPairs,
	    areMutuallyExclusive,
	    fieldMap,
	    fieldMap2,
	  ); // (E) Then collect any conflicts between the provided collection of fields
	  // and any fragment names found in the given fragment.

	  for (const referencedFragmentName of referencedFragmentNames) {
	    // Memoize so two fragments are not compared for conflicts more than once.
	    if (
	      comparedFragmentPairs.has(
	        referencedFragmentName,
	        fragmentName,
	        areMutuallyExclusive,
	      )
	    ) {
	      continue;
	    }

	    comparedFragmentPairs.add(
	      referencedFragmentName,
	      fragmentName,
	      areMutuallyExclusive,
	    );
	    collectConflictsBetweenFieldsAndFragment(
	      context,
	      conflicts,
	      cachedFieldsAndFragmentNames,
	      comparedFragmentPairs,
	      areMutuallyExclusive,
	      fieldMap,
	      referencedFragmentName,
	    );
	  }
	} // Collect all conflicts found between two fragments, including via spreading in
	// any nested fragments.

	function collectConflictsBetweenFragments(
	  context,
	  conflicts,
	  cachedFieldsAndFragmentNames,
	  comparedFragmentPairs,
	  areMutuallyExclusive,
	  fragmentName1,
	  fragmentName2,
	) {
	  // No need to compare a fragment to itself.
	  if (fragmentName1 === fragmentName2) {
	    return;
	  } // Memoize so two fragments are not compared for conflicts more than once.

	  if (
	    comparedFragmentPairs.has(
	      fragmentName1,
	      fragmentName2,
	      areMutuallyExclusive,
	    )
	  ) {
	    return;
	  }

	  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
	  const fragment1 = context.getFragment(fragmentName1);
	  const fragment2 = context.getFragment(fragmentName2);

	  if (!fragment1 || !fragment2) {
	    return;
	  }

	  const [fieldMap1, referencedFragmentNames1] =
	    getReferencedFieldsAndFragmentNames(
	      context,
	      cachedFieldsAndFragmentNames,
	      fragment1,
	    );
	  const [fieldMap2, referencedFragmentNames2] =
	    getReferencedFieldsAndFragmentNames(
	      context,
	      cachedFieldsAndFragmentNames,
	      fragment2,
	    ); // (F) First, collect all conflicts between these two collections of fields
	  // (not including any nested fragments).

	  collectConflictsBetween(
	    context,
	    conflicts,
	    cachedFieldsAndFragmentNames,
	    comparedFragmentPairs,
	    areMutuallyExclusive,
	    fieldMap1,
	    fieldMap2,
	  ); // (G) Then collect conflicts between the first fragment and any nested
	  // fragments spread in the second fragment.

	  for (const referencedFragmentName2 of referencedFragmentNames2) {
	    collectConflictsBetweenFragments(
	      context,
	      conflicts,
	      cachedFieldsAndFragmentNames,
	      comparedFragmentPairs,
	      areMutuallyExclusive,
	      fragmentName1,
	      referencedFragmentName2,
	    );
	  } // (G) Then collect conflicts between the second fragment and any nested
	  // fragments spread in the first fragment.

	  for (const referencedFragmentName1 of referencedFragmentNames1) {
	    collectConflictsBetweenFragments(
	      context,
	      conflicts,
	      cachedFieldsAndFragmentNames,
	      comparedFragmentPairs,
	      areMutuallyExclusive,
	      referencedFragmentName1,
	      fragmentName2,
	    );
	  }
	} // Find all conflicts found between two selection sets, including those found
	// via spreading in fragments. Called when determining if conflicts exist
	// between the sub-fields of two overlapping fields.

	function findConflictsBetweenSubSelectionSets(
	  context,
	  cachedFieldsAndFragmentNames,
	  comparedFragmentPairs,
	  areMutuallyExclusive,
	  parentType1,
	  selectionSet1,
	  parentType2,
	  selectionSet2,
	) {
	  const conflicts = [];
	  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(
	    context,
	    cachedFieldsAndFragmentNames,
	    parentType1,
	    selectionSet1,
	  );
	  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(
	    context,
	    cachedFieldsAndFragmentNames,
	    parentType2,
	    selectionSet2,
	  ); // (H) First, collect all conflicts between these two collections of field.

	  collectConflictsBetween(
	    context,
	    conflicts,
	    cachedFieldsAndFragmentNames,
	    comparedFragmentPairs,
	    areMutuallyExclusive,
	    fieldMap1,
	    fieldMap2,
	  ); // (I) Then collect conflicts between the first collection of fields and
	  // those referenced by each fragment name associated with the second.

	  for (const fragmentName2 of fragmentNames2) {
	    collectConflictsBetweenFieldsAndFragment(
	      context,
	      conflicts,
	      cachedFieldsAndFragmentNames,
	      comparedFragmentPairs,
	      areMutuallyExclusive,
	      fieldMap1,
	      fragmentName2,
	    );
	  } // (I) Then collect conflicts between the second collection of fields and
	  // those referenced by each fragment name associated with the first.

	  for (const fragmentName1 of fragmentNames1) {
	    collectConflictsBetweenFieldsAndFragment(
	      context,
	      conflicts,
	      cachedFieldsAndFragmentNames,
	      comparedFragmentPairs,
	      areMutuallyExclusive,
	      fieldMap2,
	      fragmentName1,
	    );
	  } // (J) Also collect conflicts between any fragment names by the first and
	  // fragment names by the second. This compares each item in the first set of
	  // names to each item in the second set of names.

	  for (const fragmentName1 of fragmentNames1) {
	    for (const fragmentName2 of fragmentNames2) {
	      collectConflictsBetweenFragments(
	        context,
	        conflicts,
	        cachedFieldsAndFragmentNames,
	        comparedFragmentPairs,
	        areMutuallyExclusive,
	        fragmentName1,
	        fragmentName2,
	      );
	    }
	  }

	  return conflicts;
	} // Collect all Conflicts "within" one collection of fields.

	function collectConflictsWithin(
	  context,
	  conflicts,
	  cachedFieldsAndFragmentNames,
	  comparedFragmentPairs,
	  fieldMap,
	) {
	  // A field map is a keyed collection, where each key represents a response
	  // name and the value at that key is a list of all fields which provide that
	  // response name. For every response name, if there are multiple fields, they
	  // must be compared to find a potential conflict.
	  for (const [responseName, fields] of Object.entries(fieldMap)) {
	    // This compares every field in the list to every other field in this list
	    // (except to itself). If the list only has one item, nothing needs to
	    // be compared.
	    if (fields.length > 1) {
	      for (let i = 0; i < fields.length; i++) {
	        for (let j = i + 1; j < fields.length; j++) {
	          const conflict = findConflict(
	            context,
	            cachedFieldsAndFragmentNames,
	            comparedFragmentPairs,
	            false, // within one collection is never mutually exclusive
	            responseName,
	            fields[i],
	            fields[j],
	          );

	          if (conflict) {
	            conflicts.push(conflict);
	          }
	        }
	      }
	    }
	  }
	} // Collect all Conflicts between two collections of fields. This is similar to,
	// but different from the `collectConflictsWithin` function above. This check
	// assumes that `collectConflictsWithin` has already been called on each
	// provided collection of fields. This is true because this validator traverses
	// each individual selection set.

	function collectConflictsBetween(
	  context,
	  conflicts,
	  cachedFieldsAndFragmentNames,
	  comparedFragmentPairs,
	  parentFieldsAreMutuallyExclusive,
	  fieldMap1,
	  fieldMap2,
	) {
	  // A field map is a keyed collection, where each key represents a response
	  // name and the value at that key is a list of all fields which provide that
	  // response name. For any response name which appears in both provided field
	  // maps, each field from the first field map must be compared to every field
	  // in the second field map to find potential conflicts.
	  for (const [responseName, fields1] of Object.entries(fieldMap1)) {
	    const fields2 = fieldMap2[responseName];

	    if (fields2) {
	      for (const field1 of fields1) {
	        for (const field2 of fields2) {
	          const conflict = findConflict(
	            context,
	            cachedFieldsAndFragmentNames,
	            comparedFragmentPairs,
	            parentFieldsAreMutuallyExclusive,
	            responseName,
	            field1,
	            field2,
	          );

	          if (conflict) {
	            conflicts.push(conflict);
	          }
	        }
	      }
	    }
	  }
	} // Determines if there is a conflict between two particular fields, including
	// comparing their sub-fields.

	function findConflict(
	  context,
	  cachedFieldsAndFragmentNames,
	  comparedFragmentPairs,
	  parentFieldsAreMutuallyExclusive,
	  responseName,
	  field1,
	  field2,
	) {
	  const [parentType1, node1, def1] = field1;
	  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same
	  // time, due to the parent types, then it is safe to permit them to diverge
	  // in aliased field or arguments used as they will not present any ambiguity
	  // by differing.
	  // It is known that two parent types could never overlap if they are
	  // different Object types. Interface or Union types might overlap - if not
	  // in the current state of the schema, then perhaps in some future version,
	  // thus may not safely diverge.

	  const areMutuallyExclusive =
	    parentFieldsAreMutuallyExclusive ||
	    (parentType1 !== parentType2 &&
	      isObjectType(parentType1) &&
	      isObjectType(parentType2));

	  if (!areMutuallyExclusive) {
	    // Two aliases must refer to the same field.
	    const name1 = node1.name.value;
	    const name2 = node2.name.value;

	    if (name1 !== name2) {
	      return [
	        [responseName, `"${name1}" and "${name2}" are different fields`],
	        [node1],
	        [node2],
	      ];
	    } // Two field calls must have the same arguments.

	    if (stringifyArguments(node1) !== stringifyArguments(node2)) {
	      return [
	        [responseName, 'they have differing arguments'],
	        [node1],
	        [node2],
	      ];
	    }
	  } // The return type for each field.

	  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;
	  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;

	  if (type1 && type2 && doTypesConflict(type1, type2)) {
	    return [
	      [
	        responseName,
	        `they return conflicting types "${inspect$2(type1)}" and "${inspect$2(
          type2,
        )}"`,
	      ],
	      [node1],
	      [node2],
	    ];
	  } // Collect and compare sub-fields. Use the same "visited fragment names" list
	  // for both collections so fields in a fragment reference are never
	  // compared to themselves.

	  const selectionSet1 = node1.selectionSet;
	  const selectionSet2 = node2.selectionSet;

	  if (selectionSet1 && selectionSet2) {
	    const conflicts = findConflictsBetweenSubSelectionSets(
	      context,
	      cachedFieldsAndFragmentNames,
	      comparedFragmentPairs,
	      areMutuallyExclusive,
	      getNamedType(type1),
	      selectionSet1,
	      getNamedType(type2),
	      selectionSet2,
	    );
	    return subfieldConflicts(conflicts, responseName, node1, node2);
	  }
	}

	function stringifyArguments(fieldNode) {
	  var _fieldNode$arguments;

	  // FIXME https://github.com/graphql/graphql-js/issues/2203
	  const args =
	    /* c8 ignore next */
	    (_fieldNode$arguments = fieldNode.arguments) !== null &&
	    _fieldNode$arguments !== void 0
	      ? _fieldNode$arguments
	      : [];
	  const inputObjectWithArgs = {
	    kind: Kind.OBJECT,
	    fields: args.map((argNode) => ({
	      kind: Kind.OBJECT_FIELD,
	      name: argNode.name,
	      value: argNode.value,
	    })),
	  };
	  return print$1(sortValueNode(inputObjectWithArgs));
	} // Two types conflict if both types could not apply to a value simultaneously.
	// Composite types are ignored as their individual field types will be compared
	// later recursively. However List and Non-Null types must match.

	function doTypesConflict(type1, type2) {
	  if (isListType(type1)) {
	    return isListType(type2)
	      ? doTypesConflict(type1.ofType, type2.ofType)
	      : true;
	  }

	  if (isListType(type2)) {
	    return true;
	  }

	  if (isNonNullType(type1)) {
	    return isNonNullType(type2)
	      ? doTypesConflict(type1.ofType, type2.ofType)
	      : true;
	  }

	  if (isNonNullType(type2)) {
	    return true;
	  }

	  if (isLeafType(type1) || isLeafType(type2)) {
	    return type1 !== type2;
	  }

	  return false;
	} // Given a selection set, return the collection of fields (a mapping of response
	// name to field nodes and definitions) as well as a list of fragment names
	// referenced via fragment spreads.

	function getFieldsAndFragmentNames(
	  context,
	  cachedFieldsAndFragmentNames,
	  parentType,
	  selectionSet,
	) {
	  const cached = cachedFieldsAndFragmentNames.get(selectionSet);

	  if (cached) {
	    return cached;
	  }

	  const nodeAndDefs = Object.create(null);
	  const fragmentNames = Object.create(null);

	  _collectFieldsAndFragmentNames(
	    context,
	    parentType,
	    selectionSet,
	    nodeAndDefs,
	    fragmentNames,
	  );

	  const result = [nodeAndDefs, Object.keys(fragmentNames)];
	  cachedFieldsAndFragmentNames.set(selectionSet, result);
	  return result;
	} // Given a reference to a fragment, return the represented collection of fields
	// as well as a list of nested fragment names referenced via fragment spreads.

	function getReferencedFieldsAndFragmentNames(
	  context,
	  cachedFieldsAndFragmentNames,
	  fragment,
	) {
	  // Short-circuit building a type from the node if possible.
	  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);

	  if (cached) {
	    return cached;
	  }

	  const fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);
	  return getFieldsAndFragmentNames(
	    context,
	    cachedFieldsAndFragmentNames,
	    fragmentType,
	    fragment.selectionSet,
	  );
	}

	function _collectFieldsAndFragmentNames(
	  context,
	  parentType,
	  selectionSet,
	  nodeAndDefs,
	  fragmentNames,
	) {
	  for (const selection of selectionSet.selections) {
	    switch (selection.kind) {
	      case Kind.FIELD: {
	        const fieldName = selection.name.value;
	        let fieldDef;

	        if (isObjectType(parentType) || isInterfaceType(parentType)) {
	          fieldDef = parentType.getFields()[fieldName];
	        }

	        const responseName = selection.alias
	          ? selection.alias.value
	          : fieldName;

	        if (!nodeAndDefs[responseName]) {
	          nodeAndDefs[responseName] = [];
	        }

	        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
	        break;
	      }

	      case Kind.FRAGMENT_SPREAD:
	        fragmentNames[selection.name.value] = true;
	        break;

	      case Kind.INLINE_FRAGMENT: {
	        const typeCondition = selection.typeCondition;
	        const inlineFragmentType = typeCondition
	          ? typeFromAST(context.getSchema(), typeCondition)
	          : parentType;

	        _collectFieldsAndFragmentNames(
	          context,
	          inlineFragmentType,
	          selection.selectionSet,
	          nodeAndDefs,
	          fragmentNames,
	        );

	        break;
	      }
	    }
	  }
	} // Given a series of Conflicts which occurred between two sub-fields, generate
	// a single Conflict.

	function subfieldConflicts(conflicts, responseName, node1, node2) {
	  if (conflicts.length > 0) {
	    return [
	      [responseName, conflicts.map(([reason]) => reason)],
	      [node1, ...conflicts.map(([, fields1]) => fields1).flat()],
	      [node2, ...conflicts.map(([, , fields2]) => fields2).flat()],
	    ];
	  }
	}
	/**
	 * A way to keep track of pairs of things when the ordering of the pair does not matter.
	 */

	class PairSet {
	  constructor() {
	    this._data = new Map();
	  }

	  has(a, b, areMutuallyExclusive) {
	    var _this$_data$get;

	    const [key1, key2] = a < b ? [a, b] : [b, a];
	    const result =
	      (_this$_data$get = this._data.get(key1)) === null ||
	      _this$_data$get === void 0
	        ? void 0
	        : _this$_data$get.get(key2);

	    if (result === undefined) {
	      return false;
	    } // areMutuallyExclusive being false is a superset of being true, hence if
	    // we want to know if this PairSet "has" these two with no exclusivity,
	    // we have to ensure it was added as such.

	    return areMutuallyExclusive ? true : areMutuallyExclusive === result;
	  }

	  add(a, b, areMutuallyExclusive) {
	    const [key1, key2] = a < b ? [a, b] : [b, a];

	    const map = this._data.get(key1);

	    if (map === undefined) {
	      this._data.set(key1, new Map([[key2, areMutuallyExclusive]]));
	    } else {
	      map.set(key2, areMutuallyExclusive);
	    }
	  }
	}

	/**
	 * Possible fragment spread
	 *
	 * A fragment spread is only valid if the type condition could ever possibly
	 * be true: if there is a non-empty intersection of the possible parent types,
	 * and possible types which pass the type condition.
	 */
	function PossibleFragmentSpreadsRule(context) {
	  return {
	    InlineFragment(node) {
	      const fragType = context.getType();
	      const parentType = context.getParentType();

	      if (
	        isCompositeType(fragType) &&
	        isCompositeType(parentType) &&
	        !doTypesOverlap(context.getSchema(), fragType, parentType)
	      ) {
	        const parentTypeStr = inspect$2(parentType);
	        const fragTypeStr = inspect$2(fragType);
	        context.reportError(
	          new GraphQLError(
	            `Fragment cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`,
	            node,
	          ),
	        );
	      }
	    },

	    FragmentSpread(node) {
	      const fragName = node.name.value;
	      const fragType = getFragmentType(context, fragName);
	      const parentType = context.getParentType();

	      if (
	        fragType &&
	        parentType &&
	        !doTypesOverlap(context.getSchema(), fragType, parentType)
	      ) {
	        const parentTypeStr = inspect$2(parentType);
	        const fragTypeStr = inspect$2(fragType);
	        context.reportError(
	          new GraphQLError(
	            `Fragment "${fragName}" cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`,
	            node,
	          ),
	        );
	      }
	    },
	  };
	}

	function getFragmentType(context, name) {
	  const frag = context.getFragment(name);

	  if (frag) {
	    const type = typeFromAST(context.getSchema(), frag.typeCondition);

	    if (isCompositeType(type)) {
	      return type;
	    }
	  }
	}

	/**
	 * Possible type extension
	 *
	 * A type extension is only valid if the type is defined and has the same kind.
	 */
	function PossibleTypeExtensionsRule(context) {
	  const schema = context.getSchema();
	  const definedTypes = Object.create(null);

	  for (const def of context.getDocument().definitions) {
	    if (isTypeDefinitionNode(def)) {
	      definedTypes[def.name.value] = def;
	    }
	  }

	  return {
	    ScalarTypeExtension: checkExtension,
	    ObjectTypeExtension: checkExtension,
	    InterfaceTypeExtension: checkExtension,
	    UnionTypeExtension: checkExtension,
	    EnumTypeExtension: checkExtension,
	    InputObjectTypeExtension: checkExtension,
	  };

	  function checkExtension(node) {
	    const typeName = node.name.value;
	    const defNode = definedTypes[typeName];
	    const existingType =
	      schema === null || schema === void 0 ? void 0 : schema.getType(typeName);
	    let expectedKind;

	    if (defNode) {
	      expectedKind = defKindToExtKind[defNode.kind];
	    } else if (existingType) {
	      expectedKind = typeToExtKind(existingType);
	    }

	    if (expectedKind) {
	      if (expectedKind !== node.kind) {
	        const kindStr = extensionKindToTypeName(node.kind);
	        context.reportError(
	          new GraphQLError(
	            `Cannot extend non-${kindStr} type "${typeName}".`,
	            defNode ? [defNode, node] : node,
	          ),
	        );
	      }
	    } else {
	      const allTypeNames = Object.keys({
	        ...definedTypes,
	        ...(schema === null || schema === void 0
	          ? void 0
	          : schema.getTypeMap()),
	      });
	      const suggestedTypes = suggestionList$1(typeName, allTypeNames);
	      context.reportError(
	        new GraphQLError(
	          `Cannot extend type "${typeName}" because it is not defined.` +
	            didYouMean$1(suggestedTypes),
	          node.name,
	        ),
	      );
	    }
	  }
	}
	const defKindToExtKind = {
	  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,
	  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,
	  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,
	  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,
	  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,
	  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION,
	};

	function typeToExtKind(type) {
	  if (isScalarType(type)) {
	    return Kind.SCALAR_TYPE_EXTENSION;
	  }

	  if (isObjectType(type)) {
	    return Kind.OBJECT_TYPE_EXTENSION;
	  }

	  if (isInterfaceType(type)) {
	    return Kind.INTERFACE_TYPE_EXTENSION;
	  }

	  if (isUnionType(type)) {
	    return Kind.UNION_TYPE_EXTENSION;
	  }

	  if (isEnumType(type)) {
	    return Kind.ENUM_TYPE_EXTENSION;
	  }

	  if (isInputObjectType(type)) {
	    return Kind.INPUT_OBJECT_TYPE_EXTENSION;
	  }
	  /* c8 ignore next 3 */
	  // Not reachable. All possible types have been considered

	  invariant(false, 'Unexpected type: ' + inspect$2(type));
	}

	function extensionKindToTypeName(kind) {
	  switch (kind) {
	    case Kind.SCALAR_TYPE_EXTENSION:
	      return 'scalar';

	    case Kind.OBJECT_TYPE_EXTENSION:
	      return 'object';

	    case Kind.INTERFACE_TYPE_EXTENSION:
	      return 'interface';

	    case Kind.UNION_TYPE_EXTENSION:
	      return 'union';

	    case Kind.ENUM_TYPE_EXTENSION:
	      return 'enum';

	    case Kind.INPUT_OBJECT_TYPE_EXTENSION:
	      return 'input object';
	    // Not reachable. All possible types have been considered

	    /* c8 ignore next */

	    default:
	      invariant(false, 'Unexpected kind: ' + inspect$2(kind));
	  }
	}

	/**
	 * Provided required arguments
	 *
	 * A field or directive is only valid if all required (non-null without a
	 * default value) field arguments have been provided.
	 */
	function ProvidedRequiredArgumentsRule(context) {
	  return {
	    // eslint-disable-next-line new-cap
	    ...ProvidedRequiredArgumentsOnDirectivesRule(context),
	    Field: {
	      // Validate on leave to allow for deeper errors to appear first.
	      leave(fieldNode) {
	        var _fieldNode$arguments;

	        const fieldDef = context.getFieldDef();

	        if (!fieldDef) {
	          return false;
	        }

	        const providedArgs = new Set( // FIXME: https://github.com/graphql/graphql-js/issues/2203
	          /* c8 ignore next */
	          (_fieldNode$arguments = fieldNode.arguments) === null ||
	          _fieldNode$arguments === void 0
	            ? void 0
	            : _fieldNode$arguments.map((arg) => arg.name.value),
	        );

	        for (const argDef of fieldDef.args) {
	          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {
	            const argTypeStr = inspect$2(argDef.type);
	            context.reportError(
	              new GraphQLError(
	                `Field "${fieldDef.name}" argument "${argDef.name}" of type "${argTypeStr}" is required, but it was not provided.`,
	                fieldNode,
	              ),
	            );
	          }
	        }
	      },
	    },
	  };
	}
	/**
	 * @internal
	 */

	function ProvidedRequiredArgumentsOnDirectivesRule(context) {
	  var _schema$getDirectives;

	  const requiredArgsMap = Object.create(null);
	  const schema = context.getSchema();
	  const definedDirectives =
	    (_schema$getDirectives =
	      schema === null || schema === void 0
	        ? void 0
	        : schema.getDirectives()) !== null && _schema$getDirectives !== void 0
	      ? _schema$getDirectives
	      : specifiedDirectives;

	  for (const directive of definedDirectives) {
	    requiredArgsMap[directive.name] = keyMap(
	      directive.args.filter(isRequiredArgument),
	      (arg) => arg.name,
	    );
	  }

	  const astDefinitions = context.getDocument().definitions;

	  for (const def of astDefinitions) {
	    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
	      var _def$arguments;

	      // FIXME: https://github.com/graphql/graphql-js/issues/2203

	      /* c8 ignore next */
	      const argNodes =
	        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0
	          ? _def$arguments
	          : [];
	      requiredArgsMap[def.name.value] = keyMap(
	        argNodes.filter(isRequiredArgumentNode),
	        (arg) => arg.name.value,
	      );
	    }
	  }

	  return {
	    Directive: {
	      // Validate on leave to allow for deeper errors to appear first.
	      leave(directiveNode) {
	        const directiveName = directiveNode.name.value;
	        const requiredArgs = requiredArgsMap[directiveName];

	        if (requiredArgs) {
	          var _directiveNode$argume;

	          // FIXME: https://github.com/graphql/graphql-js/issues/2203

	          /* c8 ignore next */
	          const argNodes =
	            (_directiveNode$argume = directiveNode.arguments) !== null &&
	            _directiveNode$argume !== void 0
	              ? _directiveNode$argume
	              : [];
	          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));

	          for (const [argName, argDef] of Object.entries(requiredArgs)) {
	            if (!argNodeMap.has(argName)) {
	              const argType = isType(argDef.type)
	                ? inspect$2(argDef.type)
	                : print$1(argDef.type);
	              context.reportError(
	                new GraphQLError(
	                  `Directive "@${directiveName}" argument "${argName}" of type "${argType}" is required, but it was not provided.`,
	                  directiveNode,
	                ),
	              );
	            }
	          }
	        }
	      },
	    },
	  };
	}

	function isRequiredArgumentNode(arg) {
	  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;
	}

	/**
	 * Scalar leafs
	 *
	 * A GraphQL document is valid only if all leaf fields (fields without
	 * sub selections) are of scalar or enum types.
	 */
	function ScalarLeafsRule(context) {
	  return {
	    Field(node) {
	      const type = context.getType();
	      const selectionSet = node.selectionSet;

	      if (type) {
	        if (isLeafType(getNamedType(type))) {
	          if (selectionSet) {
	            const fieldName = node.name.value;
	            const typeStr = inspect$2(type);
	            context.reportError(
	              new GraphQLError(
	                `Field "${fieldName}" must not have a selection since type "${typeStr}" has no subfields.`,
	                selectionSet,
	              ),
	            );
	          }
	        } else if (!selectionSet) {
	          const fieldName = node.name.value;
	          const typeStr = inspect$2(type);
	          context.reportError(
	            new GraphQLError(
	              `Field "${fieldName}" of type "${typeStr}" must have a selection of subfields. Did you mean "${fieldName} { ... }"?`,
	              node,
	            ),
	          );
	        }
	      }
	    },
	  };
	}

	/**
	 * Build a string describing the path.
	 */
	function printPathArray(path) {
	  return path
	    .map((key) =>
	      typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key,
	    )
	    .join('');
	}

	/**
	 * Given a Path and a key, return a new Path containing the new key.
	 */
	function addPath(prev, key, typename) {
	  return {
	    prev,
	    key,
	    typename,
	  };
	}
	/**
	 * Given a Path, return an Array of the path keys.
	 */

	function pathToArray(path) {
	  const flattened = [];
	  let curr = path;

	  while (curr) {
	    flattened.push(curr.key);
	    curr = curr.prev;
	  }

	  return flattened.reverse();
	}

	/**
	 * Coerces a JavaScript value given a GraphQL Input Type.
	 */
	function coerceInputValue(inputValue, type, onError = defaultOnError) {
	  return coerceInputValueImpl(inputValue, type, onError, undefined);
	}

	function defaultOnError(path, invalidValue, error) {
	  let errorPrefix = 'Invalid value ' + inspect$2(invalidValue);

	  if (path.length > 0) {
	    errorPrefix += ` at "value${printPathArray(path)}"`;
	  }

	  error.message = errorPrefix + ': ' + error.message;
	  throw error;
	}

	function coerceInputValueImpl(inputValue, type, onError, path) {
	  if (isNonNullType(type)) {
	    if (inputValue != null) {
	      return coerceInputValueImpl(inputValue, type.ofType, onError, path);
	    }

	    onError(
	      pathToArray(path),
	      inputValue,
	      new GraphQLError(
	        `Expected non-nullable type "${inspect$2(type)}" not to be null.`,
	      ),
	    );
	    return;
	  }

	  if (inputValue == null) {
	    // Explicitly return the value null.
	    return null;
	  }

	  if (isListType(type)) {
	    const itemType = type.ofType;

	    if (isIterableObject(inputValue)) {
	      return Array.from(inputValue, (itemValue, index) => {
	        const itemPath = addPath(path, index, undefined);
	        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
	      });
	    } // Lists accept a non-list value as a list of one.

	    return [coerceInputValueImpl(inputValue, itemType, onError, path)];
	  }

	  if (isInputObjectType(type)) {
	    if (!isObjectLike(inputValue)) {
	      onError(
	        pathToArray(path),
	        inputValue,
	        new GraphQLError(`Expected type "${type.name}" to be an object.`),
	      );
	      return;
	    }

	    const coercedValue = {};
	    const fieldDefs = type.getFields();

	    for (const field of Object.values(fieldDefs)) {
	      const fieldValue = inputValue[field.name];

	      if (fieldValue === undefined) {
	        if (field.defaultValue !== undefined) {
	          coercedValue[field.name] = field.defaultValue;
	        } else if (isNonNullType(field.type)) {
	          const typeStr = inspect$2(field.type);
	          onError(
	            pathToArray(path),
	            inputValue,
	            new GraphQLError(
	              `Field "${field.name}" of required type "${typeStr}" was not provided.`,
	            ),
	          );
	        }

	        continue;
	      }

	      coercedValue[field.name] = coerceInputValueImpl(
	        fieldValue,
	        field.type,
	        onError,
	        addPath(path, field.name, type.name),
	      );
	    } // Ensure every provided field is defined.

	    for (const fieldName of Object.keys(inputValue)) {
	      if (!fieldDefs[fieldName]) {
	        const suggestions = suggestionList$1(
	          fieldName,
	          Object.keys(type.getFields()),
	        );
	        onError(
	          pathToArray(path),
	          inputValue,
	          new GraphQLError(
	            `Field "${fieldName}" is not defined by type "${type.name}".` +
	              didYouMean$1(suggestions),
	          ),
	        );
	      }
	    }

	    return coercedValue;
	  }

	  if (isLeafType(type)) {
	    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),
	    // which can throw to indicate failure. If it throws, maintain a reference
	    // to the original error.

	    try {
	      parseResult = type.parseValue(inputValue);
	    } catch (error) {
	      if (error instanceof GraphQLError) {
	        onError(pathToArray(path), inputValue, error);
	      } else {
	        onError(
	          pathToArray(path),
	          inputValue,
	          new GraphQLError(
	            `Expected type "${type.name}". ` + error.message,
	            undefined,
	            undefined,
	            undefined,
	            undefined,
	            error,
	          ),
	        );
	      }

	      return;
	    }

	    if (parseResult === undefined) {
	      onError(
	        pathToArray(path),
	        inputValue,
	        new GraphQLError(`Expected type "${type.name}".`),
	      );
	    }

	    return parseResult;
	  }
	  /* c8 ignore next 3 */
	  // Not reachable, all possible types have been considered.

	  invariant(false, 'Unexpected input type: ' + inspect$2(type));
	}

	/**
	 * Produces a JavaScript value given a GraphQL Value AST.
	 *
	 * A GraphQL type must be provided, which will be used to interpret different
	 * GraphQL Value literals.
	 *
	 * Returns `undefined` when the value could not be validly coerced according to
	 * the provided type.
	 *
	 * | GraphQL Value        | JSON Value    |
	 * | -------------------- | ------------- |
	 * | Input Object         | Object        |
	 * | List                 | Array         |
	 * | Boolean              | Boolean       |
	 * | String               | String        |
	 * | Int / Float          | Number        |
	 * | Enum Value           | Unknown       |
	 * | NullValue            | null          |
	 *
	 */

	function valueFromAST$1(valueNode, type, variables) {
	  if (!valueNode) {
	    // When there is no node, then there is also no value.
	    // Importantly, this is different from returning the value null.
	    return;
	  }

	  if (valueNode.kind === Kind.VARIABLE) {
	    const variableName = valueNode.name.value;

	    if (variables == null || variables[variableName] === undefined) {
	      // No valid return value.
	      return;
	    }

	    const variableValue = variables[variableName];

	    if (variableValue === null && isNonNullType(type)) {
	      return; // Invalid: intentionally return no value.
	    } // Note: This does no further checking that this variable is correct.
	    // This assumes that this query has been validated and the variable
	    // usage here is of the correct type.

	    return variableValue;
	  }

	  if (isNonNullType(type)) {
	    if (valueNode.kind === Kind.NULL) {
	      return; // Invalid: intentionally return no value.
	    }

	    return valueFromAST$1(valueNode, type.ofType, variables);
	  }

	  if (valueNode.kind === Kind.NULL) {
	    // This is explicitly returning the value null.
	    return null;
	  }

	  if (isListType(type)) {
	    const itemType = type.ofType;

	    if (valueNode.kind === Kind.LIST) {
	      const coercedValues = [];

	      for (const itemNode of valueNode.values) {
	        if (isMissingVariable(itemNode, variables)) {
	          // If an array contains a missing variable, it is either coerced to
	          // null or if the item type is non-null, it considered invalid.
	          if (isNonNullType(itemType)) {
	            return; // Invalid: intentionally return no value.
	          }

	          coercedValues.push(null);
	        } else {
	          const itemValue = valueFromAST$1(itemNode, itemType, variables);

	          if (itemValue === undefined) {
	            return; // Invalid: intentionally return no value.
	          }

	          coercedValues.push(itemValue);
	        }
	      }

	      return coercedValues;
	    }

	    const coercedValue = valueFromAST$1(valueNode, itemType, variables);

	    if (coercedValue === undefined) {
	      return; // Invalid: intentionally return no value.
	    }

	    return [coercedValue];
	  }

	  if (isInputObjectType(type)) {
	    if (valueNode.kind !== Kind.OBJECT) {
	      return; // Invalid: intentionally return no value.
	    }

	    const coercedObj = Object.create(null);
	    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);

	    for (const field of Object.values(type.getFields())) {
	      const fieldNode = fieldNodes[field.name];

	      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
	        if (field.defaultValue !== undefined) {
	          coercedObj[field.name] = field.defaultValue;
	        } else if (isNonNullType(field.type)) {
	          return; // Invalid: intentionally return no value.
	        }

	        continue;
	      }

	      const fieldValue = valueFromAST$1(fieldNode.value, field.type, variables);

	      if (fieldValue === undefined) {
	        return; // Invalid: intentionally return no value.
	      }

	      coercedObj[field.name] = fieldValue;
	    }

	    return coercedObj;
	  }

	  if (isLeafType(type)) {
	    // Scalars and Enums fulfill parsing a literal value via parseLiteral().
	    // Invalid values represent a failure to parse correctly, in which case
	    // no value is returned.
	    let result;

	    try {
	      result = type.parseLiteral(valueNode, variables);
	    } catch (_error) {
	      return; // Invalid: intentionally return no value.
	    }

	    if (result === undefined) {
	      return; // Invalid: intentionally return no value.
	    }

	    return result;
	  }
	  /* c8 ignore next 3 */
	  // Not reachable, all possible input types have been considered.

	  invariant(false, 'Unexpected input type: ' + inspect$2(type));
	} // Returns true if the provided valueNode is a variable which is not defined
	// in the set of variables.

	function isMissingVariable(valueNode, variables) {
	  return (
	    valueNode.kind === Kind.VARIABLE &&
	    (variables == null || variables[valueNode.name.value] === undefined)
	  );
	}

	/**
	 * Prepares an object map of variableValues of the correct type based on the
	 * provided variable definitions and arbitrary input. If the input cannot be
	 * parsed to match the variable definitions, a GraphQLError will be thrown.
	 *
	 * Note: The returned value is a plain Object with a prototype, since it is
	 * exposed to user code. Care should be taken to not pull values from the
	 * Object prototype.
	 */
	function getVariableValues(schema, varDefNodes, inputs, options) {
	  const errors = [];
	  const maxErrors =
	    options === null || options === void 0 ? void 0 : options.maxErrors;

	  try {
	    const coerced = coerceVariableValues(
	      schema,
	      varDefNodes,
	      inputs,
	      (error) => {
	        if (maxErrors != null && errors.length >= maxErrors) {
	          throw new GraphQLError(
	            'Too many errors processing variables, error limit reached. Execution aborted.',
	          );
	        }

	        errors.push(error);
	      },
	    );

	    if (errors.length === 0) {
	      return {
	        coerced,
	      };
	    }
	  } catch (error) {
	    errors.push(error);
	  }

	  return {
	    errors,
	  };
	}

	function coerceVariableValues(schema, varDefNodes, inputs, onError) {
	  const coercedValues = {};

	  for (const varDefNode of varDefNodes) {
	    const varName = varDefNode.variable.name.value;
	    const varType = typeFromAST(schema, varDefNode.type);

	    if (!isInputType(varType)) {
	      // Must use input types for variables. This should be caught during
	      // validation, however is checked again here for safety.
	      const varTypeStr = print$1(varDefNode.type);
	      onError(
	        new GraphQLError(
	          `Variable "$${varName}" expected value of type "${varTypeStr}" which cannot be used as an input type.`,
	          varDefNode.type,
	        ),
	      );
	      continue;
	    }

	    if (!hasOwnProperty$1(inputs, varName)) {
	      if (varDefNode.defaultValue) {
	        coercedValues[varName] = valueFromAST$1(varDefNode.defaultValue, varType);
	      } else if (isNonNullType(varType)) {
	        const varTypeStr = inspect$2(varType);
	        onError(
	          new GraphQLError(
	            `Variable "$${varName}" of required type "${varTypeStr}" was not provided.`,
	            varDefNode,
	          ),
	        );
	      }

	      continue;
	    }

	    const value = inputs[varName];

	    if (value === null && isNonNullType(varType)) {
	      const varTypeStr = inspect$2(varType);
	      onError(
	        new GraphQLError(
	          `Variable "$${varName}" of non-null type "${varTypeStr}" must not be null.`,
	          varDefNode,
	        ),
	      );
	      continue;
	    }

	    coercedValues[varName] = coerceInputValue(
	      value,
	      varType,
	      (path, invalidValue, error) => {
	        let prefix =
	          `Variable "$${varName}" got invalid value ` + inspect$2(invalidValue);

	        if (path.length > 0) {
	          prefix += ` at "${varName}${printPathArray(path)}"`;
	        }

	        onError(
	          new GraphQLError(
	            prefix + '; ' + error.message,
	            varDefNode,
	            undefined,
	            undefined,
	            undefined,
	            error.originalError,
	          ),
	        );
	      },
	    );
	  }

	  return coercedValues;
	}
	/**
	 * Prepares an object map of argument values given a list of argument
	 * definitions and list of argument AST nodes.
	 *
	 * Note: The returned value is a plain Object with a prototype, since it is
	 * exposed to user code. Care should be taken to not pull values from the
	 * Object prototype.
	 *
	 * @internal
	 */

	function getArgumentValues(def, node, variableValues) {
	  var _node$arguments;

	  const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203

	  /* c8 ignore next */

	  const argumentNodes =
	    (_node$arguments = node.arguments) !== null && _node$arguments !== void 0
	      ? _node$arguments
	      : [];
	  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);

	  for (const argDef of def.args) {
	    const name = argDef.name;
	    const argType = argDef.type;
	    const argumentNode = argNodeMap[name];

	    if (!argumentNode) {
	      if (argDef.defaultValue !== undefined) {
	        coercedValues[name] = argDef.defaultValue;
	      } else if (isNonNullType(argType)) {
	        throw new GraphQLError(
	          `Argument "${name}" of required type "${inspect$2(argType)}" ` +
	            'was not provided.',
	          node,
	        );
	      }

	      continue;
	    }

	    const valueNode = argumentNode.value;
	    let isNull = valueNode.kind === Kind.NULL;

	    if (valueNode.kind === Kind.VARIABLE) {
	      const variableName = valueNode.name.value;

	      if (
	        variableValues == null ||
	        !hasOwnProperty$1(variableValues, variableName)
	      ) {
	        if (argDef.defaultValue !== undefined) {
	          coercedValues[name] = argDef.defaultValue;
	        } else if (isNonNullType(argType)) {
	          throw new GraphQLError(
	            `Argument "${name}" of required type "${inspect$2(argType)}" ` +
	              `was provided the variable "$${variableName}" which was not provided a runtime value.`,
	            valueNode,
	          );
	        }

	        continue;
	      }

	      isNull = variableValues[variableName] == null;
	    }

	    if (isNull && isNonNullType(argType)) {
	      throw new GraphQLError(
	        `Argument "${name}" of non-null type "${inspect$2(argType)}" ` +
	          'must not be null.',
	        valueNode,
	      );
	    }

	    const coercedValue = valueFromAST$1(valueNode, argType, variableValues);

	    if (coercedValue === undefined) {
	      // Note: ValuesOfCorrectTypeRule validation should catch this before
	      // execution. This is a runtime check to ensure execution does not
	      // continue with an invalid argument value.
	      throw new GraphQLError(
	        `Argument "${name}" has invalid value ${print$1(valueNode)}.`,
	        valueNode,
	      );
	    }

	    coercedValues[name] = coercedValue;
	  }

	  return coercedValues;
	}
	/**
	 * Prepares an object map of argument values given a directive definition
	 * and a AST node which may contain directives. Optionally also accepts a map
	 * of variable values.
	 *
	 * If the directive does not exist on the node, returns undefined.
	 *
	 * Note: The returned value is a plain Object with a prototype, since it is
	 * exposed to user code. Care should be taken to not pull values from the
	 * Object prototype.
	 */

	function getDirectiveValues(directiveDef, node, variableValues) {
	  var _node$directives;

	  const directiveNode =
	    (_node$directives = node.directives) === null || _node$directives === void 0
	      ? void 0
	      : _node$directives.find(
	          (directive) => directive.name.value === directiveDef.name,
	        );

	  if (directiveNode) {
	    return getArgumentValues(directiveDef, directiveNode, variableValues);
	  }
	}

	function hasOwnProperty$1(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var values$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		getVariableValues: getVariableValues,
		getArgumentValues: getArgumentValues,
		getDirectiveValues: getDirectiveValues
	});

	/**
	 * Given a selectionSet, collects all of the fields and returns them.
	 *
	 * CollectFields requires the "runtime type" of an object. For a field that
	 * returns an Interface or Union type, the "runtime type" will be the actual
	 * object type returned by that field.
	 *
	 * @internal
	 */

	function collectFields(
	  schema,
	  fragments,
	  variableValues,
	  runtimeType,
	  selectionSet,
	) {
	  const fields = new Map();
	  collectFieldsImpl(
	    schema,
	    fragments,
	    variableValues,
	    runtimeType,
	    selectionSet,
	    fields,
	    new Set(),
	  );
	  return fields;
	}
	/**
	 * Given an array of field nodes, collects all of the subfields of the passed
	 * in fields, and returns them at the end.
	 *
	 * CollectSubFields requires the "return type" of an object. For a field that
	 * returns an Interface or Union type, the "return type" will be the actual
	 * object type returned by that field.
	 *
	 * @internal
	 */

	function collectSubfields$1(
	  schema,
	  fragments,
	  variableValues,
	  returnType,
	  fieldNodes,
	) {
	  const subFieldNodes = new Map();
	  const visitedFragmentNames = new Set();

	  for (const node of fieldNodes) {
	    if (node.selectionSet) {
	      collectFieldsImpl(
	        schema,
	        fragments,
	        variableValues,
	        returnType,
	        node.selectionSet,
	        subFieldNodes,
	        visitedFragmentNames,
	      );
	    }
	  }

	  return subFieldNodes;
	}

	function collectFieldsImpl(
	  schema,
	  fragments,
	  variableValues,
	  runtimeType,
	  selectionSet,
	  fields,
	  visitedFragmentNames,
	) {
	  for (const selection of selectionSet.selections) {
	    switch (selection.kind) {
	      case Kind.FIELD: {
	        if (!shouldIncludeNode(variableValues, selection)) {
	          continue;
	        }

	        const name = getFieldEntryKey(selection);
	        const fieldList = fields.get(name);

	        if (fieldList !== undefined) {
	          fieldList.push(selection);
	        } else {
	          fields.set(name, [selection]);
	        }

	        break;
	      }

	      case Kind.INLINE_FRAGMENT: {
	        if (
	          !shouldIncludeNode(variableValues, selection) ||
	          !doesFragmentConditionMatch(schema, selection, runtimeType)
	        ) {
	          continue;
	        }

	        collectFieldsImpl(
	          schema,
	          fragments,
	          variableValues,
	          runtimeType,
	          selection.selectionSet,
	          fields,
	          visitedFragmentNames,
	        );
	        break;
	      }

	      case Kind.FRAGMENT_SPREAD: {
	        const fragName = selection.name.value;

	        if (
	          visitedFragmentNames.has(fragName) ||
	          !shouldIncludeNode(variableValues, selection)
	        ) {
	          continue;
	        }

	        visitedFragmentNames.add(fragName);
	        const fragment = fragments[fragName];

	        if (
	          !fragment ||
	          !doesFragmentConditionMatch(schema, fragment, runtimeType)
	        ) {
	          continue;
	        }

	        collectFieldsImpl(
	          schema,
	          fragments,
	          variableValues,
	          runtimeType,
	          fragment.selectionSet,
	          fields,
	          visitedFragmentNames,
	        );
	        break;
	      }
	    }
	  }
	}
	/**
	 * Determines if a field should be included based on the `@include` and `@skip`
	 * directives, where `@skip` has higher precedence than `@include`.
	 */

	function shouldIncludeNode(variableValues, node) {
	  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);

	  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {
	    return false;
	  }

	  const include = getDirectiveValues(
	    GraphQLIncludeDirective,
	    node,
	    variableValues,
	  );

	  if (
	    (include === null || include === void 0 ? void 0 : include.if) === false
	  ) {
	    return false;
	  }

	  return true;
	}
	/**
	 * Determines if a fragment is applicable to the given type.
	 */

	function doesFragmentConditionMatch(schema, fragment, type) {
	  const typeConditionNode = fragment.typeCondition;

	  if (!typeConditionNode) {
	    return true;
	  }

	  const conditionalType = typeFromAST(schema, typeConditionNode);

	  if (conditionalType === type) {
	    return true;
	  }

	  if (isAbstractType(conditionalType)) {
	    return schema.isSubType(conditionalType, type);
	  }

	  return false;
	}
	/**
	 * Implements the logic to compute the key of a given field's entry
	 */

	function getFieldEntryKey(node) {
	  return node.alias ? node.alias.value : node.name.value;
	}

	/**
	 * Subscriptions must only include a non-introspection field.
	 *
	 * A GraphQL subscription is valid only if it contains a single root field and
	 * that root field is not an introspection field.
	 *
	 * See https://spec.graphql.org/draft/#sec-Single-root-field
	 */
	function SingleFieldSubscriptionsRule(context) {
	  return {
	    OperationDefinition(node) {
	      if (node.operation === 'subscription') {
	        const schema = context.getSchema();
	        const subscriptionType = schema.getSubscriptionType();

	        if (subscriptionType) {
	          const operationName = node.name ? node.name.value : null;
	          const variableValues = Object.create(null);
	          const document = context.getDocument();
	          const fragments = Object.create(null);

	          for (const definition of document.definitions) {
	            if (definition.kind === Kind.FRAGMENT_DEFINITION) {
	              fragments[definition.name.value] = definition;
	            }
	          }

	          const fields = collectFields(
	            schema,
	            fragments,
	            variableValues,
	            subscriptionType,
	            node.selectionSet,
	          );

	          if (fields.size > 1) {
	            const fieldSelectionLists = [...fields.values()];
	            const extraFieldSelectionLists = fieldSelectionLists.slice(1);
	            const extraFieldSelections = extraFieldSelectionLists.flat();
	            context.reportError(
	              new GraphQLError(
	                operationName != null
	                  ? `Subscription "${operationName}" must select only one top level field.`
	                  : 'Anonymous Subscription must select only one top level field.',
	                extraFieldSelections,
	              ),
	            );
	          }

	          for (const fieldNodes of fields.values()) {
	            const field = fieldNodes[0];
	            const fieldName = field.name.value;

	            if (fieldName.startsWith('__')) {
	              context.reportError(
	                new GraphQLError(
	                  operationName != null
	                    ? `Subscription "${operationName}" must not select an introspection top level field.`
	                    : 'Anonymous Subscription must not select an introspection top level field.',
	                  fieldNodes,
	                ),
	              );
	            }
	          }
	        }
	      }
	    },
	  };
	}

	/**
	 * Groups array items into a Map, given a function to produce grouping key.
	 */
	function groupBy(list, keyFn) {
	  const result = new Map();

	  for (const item of list) {
	    const key = keyFn(item);
	    const group = result.get(key);

	    if (group === undefined) {
	      result.set(key, [item]);
	    } else {
	      group.push(item);
	    }
	  }

	  return result;
	}

	/**
	 * Unique argument definition names
	 *
	 * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.
	 * A GraphQL Directive is only valid if all its arguments are uniquely named.
	 */
	function UniqueArgumentDefinitionNamesRule(context) {
	  return {
	    DirectiveDefinition(directiveNode) {
	      var _directiveNode$argume;

	      // FIXME: https://github.com/graphql/graphql-js/issues/2203

	      /* c8 ignore next */
	      const argumentNodes =
	        (_directiveNode$argume = directiveNode.arguments) !== null &&
	        _directiveNode$argume !== void 0
	          ? _directiveNode$argume
	          : [];
	      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);
	    },

	    InterfaceTypeDefinition: checkArgUniquenessPerField,
	    InterfaceTypeExtension: checkArgUniquenessPerField,
	    ObjectTypeDefinition: checkArgUniquenessPerField,
	    ObjectTypeExtension: checkArgUniquenessPerField,
	  };

	  function checkArgUniquenessPerField(typeNode) {
	    var _typeNode$fields;

	    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203

	    /* c8 ignore next */

	    const fieldNodes =
	      (_typeNode$fields = typeNode.fields) !== null &&
	      _typeNode$fields !== void 0
	        ? _typeNode$fields
	        : [];

	    for (const fieldDef of fieldNodes) {
	      var _fieldDef$arguments;

	      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203

	      /* c8 ignore next */

	      const argumentNodes =
	        (_fieldDef$arguments = fieldDef.arguments) !== null &&
	        _fieldDef$arguments !== void 0
	          ? _fieldDef$arguments
	          : [];
	      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);
	    }

	    return false;
	  }

	  function checkArgUniqueness(parentName, argumentNodes) {
	    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);

	    for (const [argName, argNodes] of seenArgs) {
	      if (argNodes.length > 1) {
	        context.reportError(
	          new GraphQLError(
	            `Argument "${parentName}(${argName}:)" can only be defined once.`,
	            argNodes.map((node) => node.name),
	          ),
	        );
	      }
	    }

	    return false;
	  }
	}

	/**
	 * Unique argument names
	 *
	 * A GraphQL field or directive is only valid if all supplied arguments are
	 * uniquely named.
	 *
	 * See https://spec.graphql.org/draft/#sec-Argument-Names
	 */
	function UniqueArgumentNamesRule(context) {
	  return {
	    Field: checkArgUniqueness,
	    Directive: checkArgUniqueness,
	  };

	  function checkArgUniqueness(parentNode) {
	    var _parentNode$arguments;

	    // FIXME: https://github.com/graphql/graphql-js/issues/2203

	    /* c8 ignore next */
	    const argumentNodes =
	      (_parentNode$arguments = parentNode.arguments) !== null &&
	      _parentNode$arguments !== void 0
	        ? _parentNode$arguments
	        : [];
	    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);

	    for (const [argName, argNodes] of seenArgs) {
	      if (argNodes.length > 1) {
	        context.reportError(
	          new GraphQLError(
	            `There can be only one argument named "${argName}".`,
	            argNodes.map((node) => node.name),
	          ),
	        );
	      }
	    }
	  }
	}

	/**
	 * Unique directive names
	 *
	 * A GraphQL document is only valid if all defined directives have unique names.
	 */
	function UniqueDirectiveNamesRule(context) {
	  const knownDirectiveNames = Object.create(null);
	  const schema = context.getSchema();
	  return {
	    DirectiveDefinition(node) {
	      const directiveName = node.name.value;

	      if (
	        schema !== null &&
	        schema !== void 0 &&
	        schema.getDirective(directiveName)
	      ) {
	        context.reportError(
	          new GraphQLError(
	            `Directive "@${directiveName}" already exists in the schema. It cannot be redefined.`,
	            node.name,
	          ),
	        );
	        return;
	      }

	      if (knownDirectiveNames[directiveName]) {
	        context.reportError(
	          new GraphQLError(
	            `There can be only one directive named "@${directiveName}".`,
	            [knownDirectiveNames[directiveName], node.name],
	          ),
	        );
	      } else {
	        knownDirectiveNames[directiveName] = node.name;
	      }

	      return false;
	    },
	  };
	}

	/**
	 * Unique directive names per location
	 *
	 * A GraphQL document is only valid if all non-repeatable directives at
	 * a given location are uniquely named.
	 *
	 * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location
	 */
	function UniqueDirectivesPerLocationRule(context) {
	  const uniqueDirectiveMap = Object.create(null);
	  const schema = context.getSchema();
	  const definedDirectives = schema
	    ? schema.getDirectives()
	    : specifiedDirectives;

	  for (const directive of definedDirectives) {
	    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
	  }

	  const astDefinitions = context.getDocument().definitions;

	  for (const def of astDefinitions) {
	    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
	      uniqueDirectiveMap[def.name.value] = !def.repeatable;
	    }
	  }

	  const schemaDirectives = Object.create(null);
	  const typeDirectivesMap = Object.create(null);
	  return {
	    // Many different AST nodes may contain directives. Rather than listing
	    // them all, just listen for entering any node, and check to see if it
	    // defines any directives.
	    enter(node) {
	      if (!('directives' in node) || !node.directives) {
	        return;
	      }

	      let seenDirectives;

	      if (
	        node.kind === Kind.SCHEMA_DEFINITION ||
	        node.kind === Kind.SCHEMA_EXTENSION
	      ) {
	        seenDirectives = schemaDirectives;
	      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {
	        const typeName = node.name.value;
	        seenDirectives = typeDirectivesMap[typeName];

	        if (seenDirectives === undefined) {
	          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);
	        }
	      } else {
	        seenDirectives = Object.create(null);
	      }

	      for (const directive of node.directives) {
	        const directiveName = directive.name.value;

	        if (uniqueDirectiveMap[directiveName]) {
	          if (seenDirectives[directiveName]) {
	            context.reportError(
	              new GraphQLError(
	                `The directive "@${directiveName}" can only be used once at this location.`,
	                [seenDirectives[directiveName], directive],
	              ),
	            );
	          } else {
	            seenDirectives[directiveName] = directive;
	          }
	        }
	      }
	    },
	  };
	}

	/**
	 * Unique enum value names
	 *
	 * A GraphQL enum type is only valid if all its values are uniquely named.
	 */
	function UniqueEnumValueNamesRule(context) {
	  const schema = context.getSchema();
	  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
	  const knownValueNames = Object.create(null);
	  return {
	    EnumTypeDefinition: checkValueUniqueness,
	    EnumTypeExtension: checkValueUniqueness,
	  };

	  function checkValueUniqueness(node) {
	    var _node$values;

	    const typeName = node.name.value;

	    if (!knownValueNames[typeName]) {
	      knownValueNames[typeName] = Object.create(null);
	    } // FIXME: https://github.com/graphql/graphql-js/issues/2203

	    /* c8 ignore next */

	    const valueNodes =
	      (_node$values = node.values) !== null && _node$values !== void 0
	        ? _node$values
	        : [];
	    const valueNames = knownValueNames[typeName];

	    for (const valueDef of valueNodes) {
	      const valueName = valueDef.name.value;
	      const existingType = existingTypeMap[typeName];

	      if (isEnumType(existingType) && existingType.getValue(valueName)) {
	        context.reportError(
	          new GraphQLError(
	            `Enum value "${typeName}.${valueName}" already exists in the schema. It cannot also be defined in this type extension.`,
	            valueDef.name,
	          ),
	        );
	      } else if (valueNames[valueName]) {
	        context.reportError(
	          new GraphQLError(
	            `Enum value "${typeName}.${valueName}" can only be defined once.`,
	            [valueNames[valueName], valueDef.name],
	          ),
	        );
	      } else {
	        valueNames[valueName] = valueDef.name;
	      }
	    }

	    return false;
	  }
	}

	/**
	 * Unique field definition names
	 *
	 * A GraphQL complex type is only valid if all its fields are uniquely named.
	 */
	function UniqueFieldDefinitionNamesRule(context) {
	  const schema = context.getSchema();
	  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
	  const knownFieldNames = Object.create(null);
	  return {
	    InputObjectTypeDefinition: checkFieldUniqueness,
	    InputObjectTypeExtension: checkFieldUniqueness,
	    InterfaceTypeDefinition: checkFieldUniqueness,
	    InterfaceTypeExtension: checkFieldUniqueness,
	    ObjectTypeDefinition: checkFieldUniqueness,
	    ObjectTypeExtension: checkFieldUniqueness,
	  };

	  function checkFieldUniqueness(node) {
	    var _node$fields;

	    const typeName = node.name.value;

	    if (!knownFieldNames[typeName]) {
	      knownFieldNames[typeName] = Object.create(null);
	    } // FIXME: https://github.com/graphql/graphql-js/issues/2203

	    /* c8 ignore next */

	    const fieldNodes =
	      (_node$fields = node.fields) !== null && _node$fields !== void 0
	        ? _node$fields
	        : [];
	    const fieldNames = knownFieldNames[typeName];

	    for (const fieldDef of fieldNodes) {
	      const fieldName = fieldDef.name.value;

	      if (hasField(existingTypeMap[typeName], fieldName)) {
	        context.reportError(
	          new GraphQLError(
	            `Field "${typeName}.${fieldName}" already exists in the schema. It cannot also be defined in this type extension.`,
	            fieldDef.name,
	          ),
	        );
	      } else if (fieldNames[fieldName]) {
	        context.reportError(
	          new GraphQLError(
	            `Field "${typeName}.${fieldName}" can only be defined once.`,
	            [fieldNames[fieldName], fieldDef.name],
	          ),
	        );
	      } else {
	        fieldNames[fieldName] = fieldDef.name;
	      }
	    }

	    return false;
	  }
	}

	function hasField(type, fieldName) {
	  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {
	    return type.getFields()[fieldName] != null;
	  }

	  return false;
	}

	/**
	 * Unique fragment names
	 *
	 * A GraphQL document is only valid if all defined fragments have unique names.
	 *
	 * See https://spec.graphql.org/draft/#sec-Fragment-Name-Uniqueness
	 */
	function UniqueFragmentNamesRule(context) {
	  const knownFragmentNames = Object.create(null);
	  return {
	    OperationDefinition: () => false,

	    FragmentDefinition(node) {
	      const fragmentName = node.name.value;

	      if (knownFragmentNames[fragmentName]) {
	        context.reportError(
	          new GraphQLError(
	            `There can be only one fragment named "${fragmentName}".`,
	            [knownFragmentNames[fragmentName], node.name],
	          ),
	        );
	      } else {
	        knownFragmentNames[fragmentName] = node.name;
	      }

	      return false;
	    },
	  };
	}

	/**
	 * Unique input field names
	 *
	 * A GraphQL input object value is only valid if all supplied fields are
	 * uniquely named.
	 *
	 * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness
	 */
	function UniqueInputFieldNamesRule(context) {
	  const knownNameStack = [];
	  let knownNames = Object.create(null);
	  return {
	    ObjectValue: {
	      enter() {
	        knownNameStack.push(knownNames);
	        knownNames = Object.create(null);
	      },

	      leave() {
	        const prevKnownNames = knownNameStack.pop();
	        prevKnownNames || invariant(false);
	        knownNames = prevKnownNames;
	      },
	    },

	    ObjectField(node) {
	      const fieldName = node.name.value;

	      if (knownNames[fieldName]) {
	        context.reportError(
	          new GraphQLError(
	            `There can be only one input field named "${fieldName}".`,
	            [knownNames[fieldName], node.name],
	          ),
	        );
	      } else {
	        knownNames[fieldName] = node.name;
	      }
	    },
	  };
	}

	/**
	 * Unique operation names
	 *
	 * A GraphQL document is only valid if all defined operations have unique names.
	 *
	 * See https://spec.graphql.org/draft/#sec-Operation-Name-Uniqueness
	 */
	function UniqueOperationNamesRule(context) {
	  const knownOperationNames = Object.create(null);
	  return {
	    OperationDefinition(node) {
	      const operationName = node.name;

	      if (operationName) {
	        if (knownOperationNames[operationName.value]) {
	          context.reportError(
	            new GraphQLError(
	              `There can be only one operation named "${operationName.value}".`,
	              [knownOperationNames[operationName.value], operationName],
	            ),
	          );
	        } else {
	          knownOperationNames[operationName.value] = operationName;
	        }
	      }

	      return false;
	    },

	    FragmentDefinition: () => false,
	  };
	}

	/**
	 * Unique operation types
	 *
	 * A GraphQL document is only valid if it has only one type per operation.
	 */
	function UniqueOperationTypesRule(context) {
	  const schema = context.getSchema();
	  const definedOperationTypes = Object.create(null);
	  const existingOperationTypes = schema
	    ? {
	        query: schema.getQueryType(),
	        mutation: schema.getMutationType(),
	        subscription: schema.getSubscriptionType(),
	      }
	    : {};
	  return {
	    SchemaDefinition: checkOperationTypes,
	    SchemaExtension: checkOperationTypes,
	  };

	  function checkOperationTypes(node) {
	    var _node$operationTypes;

	    // See: https://github.com/graphql/graphql-js/issues/2203

	    /* c8 ignore next */
	    const operationTypesNodes =
	      (_node$operationTypes = node.operationTypes) !== null &&
	      _node$operationTypes !== void 0
	        ? _node$operationTypes
	        : [];

	    for (const operationType of operationTypesNodes) {
	      const operation = operationType.operation;
	      const alreadyDefinedOperationType = definedOperationTypes[operation];

	      if (existingOperationTypes[operation]) {
	        context.reportError(
	          new GraphQLError(
	            `Type for ${operation} already defined in the schema. It cannot be redefined.`,
	            operationType,
	          ),
	        );
	      } else if (alreadyDefinedOperationType) {
	        context.reportError(
	          new GraphQLError(
	            `There can be only one ${operation} type in schema.`,
	            [alreadyDefinedOperationType, operationType],
	          ),
	        );
	      } else {
	        definedOperationTypes[operation] = operationType;
	      }
	    }

	    return false;
	  }
	}

	/**
	 * Unique type names
	 *
	 * A GraphQL document is only valid if all defined types have unique names.
	 */
	function UniqueTypeNamesRule(context) {
	  const knownTypeNames = Object.create(null);
	  const schema = context.getSchema();
	  return {
	    ScalarTypeDefinition: checkTypeName,
	    ObjectTypeDefinition: checkTypeName,
	    InterfaceTypeDefinition: checkTypeName,
	    UnionTypeDefinition: checkTypeName,
	    EnumTypeDefinition: checkTypeName,
	    InputObjectTypeDefinition: checkTypeName,
	  };

	  function checkTypeName(node) {
	    const typeName = node.name.value;

	    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {
	      context.reportError(
	        new GraphQLError(
	          `Type "${typeName}" already exists in the schema. It cannot also be defined in this type definition.`,
	          node.name,
	        ),
	      );
	      return;
	    }

	    if (knownTypeNames[typeName]) {
	      context.reportError(
	        new GraphQLError(`There can be only one type named "${typeName}".`, [
	          knownTypeNames[typeName],
	          node.name,
	        ]),
	      );
	    } else {
	      knownTypeNames[typeName] = node.name;
	    }

	    return false;
	  }
	}

	/**
	 * Unique variable names
	 *
	 * A GraphQL operation is only valid if all its variables are uniquely named.
	 */
	function UniqueVariableNamesRule(context) {
	  return {
	    OperationDefinition(operationNode) {
	      var _operationNode$variab;

	      // See: https://github.com/graphql/graphql-js/issues/2203

	      /* c8 ignore next */
	      const variableDefinitions =
	        (_operationNode$variab = operationNode.variableDefinitions) !== null &&
	        _operationNode$variab !== void 0
	          ? _operationNode$variab
	          : [];
	      const seenVariableDefinitions = groupBy(
	        variableDefinitions,
	        (node) => node.variable.name.value,
	      );

	      for (const [variableName, variableNodes] of seenVariableDefinitions) {
	        if (variableNodes.length > 1) {
	          context.reportError(
	            new GraphQLError(
	              `There can be only one variable named "$${variableName}".`,
	              variableNodes.map((node) => node.variable.name),
	            ),
	          );
	        }
	      }
	    },
	  };
	}

	/**
	 * Value literals of correct type
	 *
	 * A GraphQL document is only valid if all value literals are of the type
	 * expected at their position.
	 *
	 * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type
	 */
	function ValuesOfCorrectTypeRule(context) {
	  return {
	    ListValue(node) {
	      // Note: TypeInfo will traverse into a list's item type, so look to the
	      // parent input type to check if it is a list.
	      const type = getNullableType(context.getParentInputType());

	      if (!isListType(type)) {
	        isValidValueNode(context, node);
	        return false; // Don't traverse further.
	      }
	    },

	    ObjectValue(node) {
	      const type = getNamedType(context.getInputType());

	      if (!isInputObjectType(type)) {
	        isValidValueNode(context, node);
	        return false; // Don't traverse further.
	      } // Ensure every required field exists.

	      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);

	      for (const fieldDef of Object.values(type.getFields())) {
	        const fieldNode = fieldNodeMap[fieldDef.name];

	        if (!fieldNode && isRequiredInputField(fieldDef)) {
	          const typeStr = inspect$2(fieldDef.type);
	          context.reportError(
	            new GraphQLError(
	              `Field "${type.name}.${fieldDef.name}" of required type "${typeStr}" was not provided.`,
	              node,
	            ),
	          );
	        }
	      }
	    },

	    ObjectField(node) {
	      const parentType = getNamedType(context.getParentInputType());
	      const fieldType = context.getInputType();

	      if (!fieldType && isInputObjectType(parentType)) {
	        const suggestions = suggestionList$1(
	          node.name.value,
	          Object.keys(parentType.getFields()),
	        );
	        context.reportError(
	          new GraphQLError(
	            `Field "${node.name.value}" is not defined by type "${parentType.name}".` +
	              didYouMean$1(suggestions),
	            node,
	          ),
	        );
	      }
	    },

	    NullValue(node) {
	      const type = context.getInputType();

	      if (isNonNullType(type)) {
	        context.reportError(
	          new GraphQLError(
	            `Expected value of type "${inspect$2(type)}", found ${print$1(node)}.`,
	            node,
	          ),
	        );
	      }
	    },

	    EnumValue: (node) => isValidValueNode(context, node),
	    IntValue: (node) => isValidValueNode(context, node),
	    FloatValue: (node) => isValidValueNode(context, node),
	    StringValue: (node) => isValidValueNode(context, node),
	    BooleanValue: (node) => isValidValueNode(context, node),
	  };
	}
	/**
	 * Any value literal may be a valid representation of a Scalar, depending on
	 * that scalar type.
	 */

	function isValidValueNode(context, node) {
	  // Report any error at the full type expected by the location.
	  const locationType = context.getInputType();

	  if (!locationType) {
	    return;
	  }

	  const type = getNamedType(locationType);

	  if (!isLeafType(type)) {
	    const typeStr = inspect$2(locationType);
	    context.reportError(
	      new GraphQLError(
	        `Expected value of type "${typeStr}", found ${print$1(node)}.`,
	        node,
	      ),
	    );
	    return;
	  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),
	  // which may throw or return an invalid value to indicate failure.

	  try {
	    const parseResult = type.parseLiteral(
	      node,
	      undefined,
	      /* variables */
	    );

	    if (parseResult === undefined) {
	      const typeStr = inspect$2(locationType);
	      context.reportError(
	        new GraphQLError(
	          `Expected value of type "${typeStr}", found ${print$1(node)}.`,
	          node,
	        ),
	      );
	    }
	  } catch (error) {
	    const typeStr = inspect$2(locationType);

	    if (error instanceof GraphQLError) {
	      context.reportError(error);
	    } else {
	      context.reportError(
	        new GraphQLError(
	          `Expected value of type "${typeStr}", found ${print$1(node)}; ` +
	            error.message,
	          node,
	          undefined,
	          undefined,
	          undefined,
	          error,
	        ),
	      );
	    }
	  }
	}

	/**
	 * Variables are input types
	 *
	 * A GraphQL operation is only valid if all the variables it defines are of
	 * input types (scalar, enum, or input object).
	 *
	 * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types
	 */
	function VariablesAreInputTypesRule(context) {
	  return {
	    VariableDefinition(node) {
	      const type = typeFromAST(context.getSchema(), node.type);

	      if (type !== undefined && !isInputType(type)) {
	        const variableName = node.variable.name.value;
	        const typeName = print$1(node.type);
	        context.reportError(
	          new GraphQLError(
	            `Variable "$${variableName}" cannot be non-input type "${typeName}".`,
	            node.type,
	          ),
	        );
	      }
	    },
	  };
	}

	/**
	 * Variables in allowed position
	 *
	 * Variable usages must be compatible with the arguments they are passed to.
	 *
	 * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed
	 */
	function VariablesInAllowedPositionRule(context) {
	  let varDefMap = Object.create(null);
	  return {
	    OperationDefinition: {
	      enter() {
	        varDefMap = Object.create(null);
	      },

	      leave(operation) {
	        const usages = context.getRecursiveVariableUsages(operation);

	        for (const { node, type, defaultValue } of usages) {
	          const varName = node.name.value;
	          const varDef = varDefMap[varName];

	          if (varDef && type) {
	            // A var type is allowed if it is the same or more strict (e.g. is
	            // a subtype of) than the expected type. It can be more strict if
	            // the variable type is non-null when the expected type is nullable.
	            // If both are list types, the variable item type can be more strict
	            // than the expected item type (contravariant).
	            const schema = context.getSchema();
	            const varType = typeFromAST(schema, varDef.type);

	            if (
	              varType &&
	              !allowedVariableUsage(
	                schema,
	                varType,
	                varDef.defaultValue,
	                type,
	                defaultValue,
	              )
	            ) {
	              const varTypeStr = inspect$2(varType);
	              const typeStr = inspect$2(type);
	              context.reportError(
	                new GraphQLError(
	                  `Variable "$${varName}" of type "${varTypeStr}" used in position expecting type "${typeStr}".`,
	                  [varDef, node],
	                ),
	              );
	            }
	          }
	        }
	      },
	    },

	    VariableDefinition(node) {
	      varDefMap[node.variable.name.value] = node;
	    },
	  };
	}
	/**
	 * Returns true if the variable is allowed in the location it was found,
	 * which includes considering if default values exist for either the variable
	 * or the location at which it is located.
	 */

	function allowedVariableUsage(
	  schema,
	  varType,
	  varDefaultValue,
	  locationType,
	  locationDefaultValue,
	) {
	  if (isNonNullType(locationType) && !isNonNullType(varType)) {
	    const hasNonNullVariableDefaultValue =
	      varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;
	    const hasLocationDefaultValue = locationDefaultValue !== undefined;

	    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {
	      return false;
	    }

	    const nullableLocationType = locationType.ofType;
	    return isTypeSubTypeOf(schema, varType, nullableLocationType);
	  }

	  return isTypeSubTypeOf(schema, varType, locationType);
	}

	// Spec Section: "Executable Definitions"

	/**
	 * This set includes all validation rules defined by the GraphQL spec.
	 *
	 * The order of the rules in this list has been adjusted to lead to the
	 * most clear output when encountering multiple validation errors.
	 */
	const specifiedRules = Object.freeze([
	  ExecutableDefinitionsRule,
	  UniqueOperationNamesRule,
	  LoneAnonymousOperationRule,
	  SingleFieldSubscriptionsRule,
	  KnownTypeNamesRule,
	  FragmentsOnCompositeTypesRule,
	  VariablesAreInputTypesRule,
	  ScalarLeafsRule,
	  FieldsOnCorrectTypeRule,
	  UniqueFragmentNamesRule,
	  KnownFragmentNamesRule,
	  NoUnusedFragmentsRule,
	  PossibleFragmentSpreadsRule,
	  NoFragmentCyclesRule,
	  UniqueVariableNamesRule,
	  NoUndefinedVariablesRule,
	  NoUnusedVariablesRule,
	  KnownDirectivesRule,
	  UniqueDirectivesPerLocationRule,
	  KnownArgumentNamesRule,
	  UniqueArgumentNamesRule,
	  ValuesOfCorrectTypeRule,
	  ProvidedRequiredArgumentsRule,
	  VariablesInAllowedPositionRule,
	  OverlappingFieldsCanBeMergedRule,
	  UniqueInputFieldNamesRule,
	]);
	/**
	 * @internal
	 */

	const specifiedSDLRules = Object.freeze([
	  LoneSchemaDefinitionRule,
	  UniqueOperationTypesRule,
	  UniqueTypeNamesRule,
	  UniqueEnumValueNamesRule,
	  UniqueFieldDefinitionNamesRule,
	  UniqueArgumentDefinitionNamesRule,
	  UniqueDirectiveNamesRule,
	  KnownTypeNamesRule,
	  KnownDirectivesRule,
	  UniqueDirectivesPerLocationRule,
	  PossibleTypeExtensionsRule,
	  KnownArgumentNamesOnDirectivesRule,
	  UniqueArgumentNamesRule,
	  UniqueInputFieldNamesRule,
	  ProvidedRequiredArgumentsOnDirectivesRule,
	]);

	var specifiedRules$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		specifiedRules: specifiedRules,
		specifiedSDLRules: specifiedSDLRules
	});

	/**
	 * An instance of this class is passed as the "this" context to all validators,
	 * allowing access to commonly useful contextual information from within a
	 * validation rule.
	 */
	class ASTValidationContext {
	  constructor(ast, onError) {
	    this._ast = ast;
	    this._fragments = undefined;
	    this._fragmentSpreads = new Map();
	    this._recursivelyReferencedFragments = new Map();
	    this._onError = onError;
	  }

	  get [Symbol.toStringTag]() {
	    return 'ASTValidationContext';
	  }

	  reportError(error) {
	    this._onError(error);
	  }

	  getDocument() {
	    return this._ast;
	  }

	  getFragment(name) {
	    let fragments;

	    if (this._fragments) {
	      fragments = this._fragments;
	    } else {
	      fragments = Object.create(null);

	      for (const defNode of this.getDocument().definitions) {
	        if (defNode.kind === Kind.FRAGMENT_DEFINITION) {
	          fragments[defNode.name.value] = defNode;
	        }
	      }

	      this._fragments = fragments;
	    }

	    return fragments[name];
	  }

	  getFragmentSpreads(node) {
	    let spreads = this._fragmentSpreads.get(node);

	    if (!spreads) {
	      spreads = [];
	      const setsToVisit = [node];
	      let set;

	      while ((set = setsToVisit.pop())) {
	        for (const selection of set.selections) {
	          if (selection.kind === Kind.FRAGMENT_SPREAD) {
	            spreads.push(selection);
	          } else if (selection.selectionSet) {
	            setsToVisit.push(selection.selectionSet);
	          }
	        }
	      }

	      this._fragmentSpreads.set(node, spreads);
	    }

	    return spreads;
	  }

	  getRecursivelyReferencedFragments(operation) {
	    let fragments = this._recursivelyReferencedFragments.get(operation);

	    if (!fragments) {
	      fragments = [];
	      const collectedNames = Object.create(null);
	      const nodesToVisit = [operation.selectionSet];
	      let node;

	      while ((node = nodesToVisit.pop())) {
	        for (const spread of this.getFragmentSpreads(node)) {
	          const fragName = spread.name.value;

	          if (collectedNames[fragName] !== true) {
	            collectedNames[fragName] = true;
	            const fragment = this.getFragment(fragName);

	            if (fragment) {
	              fragments.push(fragment);
	              nodesToVisit.push(fragment.selectionSet);
	            }
	          }
	        }
	      }

	      this._recursivelyReferencedFragments.set(operation, fragments);
	    }

	    return fragments;
	  }
	}
	class SDLValidationContext extends ASTValidationContext {
	  constructor(ast, schema, onError) {
	    super(ast, onError);
	    this._schema = schema;
	  }

	  get [Symbol.toStringTag]() {
	    return 'SDLValidationContext';
	  }

	  getSchema() {
	    return this._schema;
	  }
	}
	class ValidationContext extends ASTValidationContext {
	  constructor(schema, ast, typeInfo, onError) {
	    super(ast, onError);
	    this._schema = schema;
	    this._typeInfo = typeInfo;
	    this._variableUsages = new Map();
	    this._recursiveVariableUsages = new Map();
	  }

	  get [Symbol.toStringTag]() {
	    return 'ValidationContext';
	  }

	  getSchema() {
	    return this._schema;
	  }

	  getVariableUsages(node) {
	    let usages = this._variableUsages.get(node);

	    if (!usages) {
	      const newUsages = [];
	      const typeInfo = new TypeInfo(this._schema);
	      visit(
	        node,
	        visitWithTypeInfo(typeInfo, {
	          VariableDefinition: () => false,

	          Variable(variable) {
	            newUsages.push({
	              node: variable,
	              type: typeInfo.getInputType(),
	              defaultValue: typeInfo.getDefaultValue(),
	            });
	          },
	        }),
	      );
	      usages = newUsages;

	      this._variableUsages.set(node, usages);
	    }

	    return usages;
	  }

	  getRecursiveVariableUsages(operation) {
	    let usages = this._recursiveVariableUsages.get(operation);

	    if (!usages) {
	      usages = this.getVariableUsages(operation);

	      for (const frag of this.getRecursivelyReferencedFragments(operation)) {
	        usages = usages.concat(this.getVariableUsages(frag));
	      }

	      this._recursiveVariableUsages.set(operation, usages);
	    }

	    return usages;
	  }

	  getType() {
	    return this._typeInfo.getType();
	  }

	  getParentType() {
	    return this._typeInfo.getParentType();
	  }

	  getInputType() {
	    return this._typeInfo.getInputType();
	  }

	  getParentInputType() {
	    return this._typeInfo.getParentInputType();
	  }

	  getFieldDef() {
	    return this._typeInfo.getFieldDef();
	  }

	  getDirective() {
	    return this._typeInfo.getDirective();
	  }

	  getArgument() {
	    return this._typeInfo.getArgument();
	  }

	  getEnumValue() {
	    return this._typeInfo.getEnumValue();
	  }
	}

	/**
	 * Implements the "Validation" section of the spec.
	 *
	 * Validation runs synchronously, returning an array of encountered errors, or
	 * an empty array if no errors were encountered and the document is valid.
	 *
	 * A list of specific validation rules may be provided. If not provided, the
	 * default list of rules defined by the GraphQL specification will be used.
	 *
	 * Each validation rules is a function which returns a visitor
	 * (see the language/visitor API). Visitor methods are expected to return
	 * GraphQLErrors, or Arrays of GraphQLErrors when invalid.
	 *
	 * Validate will stop validation after a `maxErrors` limit has been reached.
	 * Attackers can send pathologically invalid queries to induce a DoS attack,
	 * so by default `maxErrors` set to 100 errors.
	 *
	 * Optionally a custom TypeInfo instance may be provided. If not provided, one
	 * will be created from the provided schema.
	 */

	function validate$3(
	  schema,
	  documentAST,
	  rules = specifiedRules,
	  options,
	  /** @deprecated will be removed in 17.0.0 */
	  typeInfo = new TypeInfo(schema),
	) {
	  var _options$maxErrors;

	  const maxErrors =
	    (_options$maxErrors =
	      options === null || options === void 0 ? void 0 : options.maxErrors) !==
	      null && _options$maxErrors !== void 0
	      ? _options$maxErrors
	      : 100;
	  documentAST || devAssert(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.

	  assertValidSchema(schema);
	  const abortObj = Object.freeze({});
	  const errors = [];
	  const context = new ValidationContext(
	    schema,
	    documentAST,
	    typeInfo,
	    (error) => {
	      if (errors.length >= maxErrors) {
	        errors.push(
	          new GraphQLError(
	            'Too many validation errors, error limit reached. Validation aborted.',
	          ),
	        ); // eslint-disable-next-line @typescript-eslint/no-throw-literal

	        throw abortObj;
	      }

	      errors.push(error);
	    },
	  ); // This uses a specialized visitor which runs multiple visitors in parallel,
	  // while maintaining the visitor skip and break API.

	  const visitor = visitInParallel(rules.map((rule) => rule(context))); // Visit the whole document with each instance of all provided rules.

	  try {
	    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));
	  } catch (e) {
	    if (e !== abortObj) {
	      throw e;
	    }
	  }

	  return errors;
	}
	/**
	 * @internal
	 */

	function validateSDL(
	  documentAST,
	  schemaToExtend,
	  rules = specifiedSDLRules,
	) {
	  const errors = [];
	  const context = new SDLValidationContext(
	    documentAST,
	    schemaToExtend,
	    (error) => {
	      errors.push(error);
	    },
	  );
	  const visitors = rules.map((rule) => rule(context));
	  visit(documentAST, visitInParallel(visitors));
	  return errors;
	}
	/**
	 * Utility function which asserts a SDL document is valid by throwing an error
	 * if it is invalid.
	 *
	 * @internal
	 */

	function assertValidSDL(documentAST) {
	  const errors = validateSDL(documentAST);

	  if (errors.length !== 0) {
	    throw new Error(errors.map((error) => error.message).join('\n\n'));
	  }
	}
	/**
	 * Utility function which asserts a SDL document is valid by throwing an error
	 * if it is invalid.
	 *
	 * @internal
	 */

	function assertValidSDLExtension(documentAST, schema) {
	  const errors = validateSDL(documentAST, schema);

	  if (errors.length !== 0) {
	    throw new Error(errors.map((error) => error.message).join('\n\n'));
	  }
	}

	var validate$4 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		validate: validate$3,
		validateSDL: validateSDL,
		assertValidSDL: assertValidSDL,
		assertValidSDLExtension: assertValidSDLExtension
	});

	/**
	 * Memoizes the provided three-argument function.
	 */
	function memoize3(fn) {
	  let cache0;
	  return function memoized(a1, a2, a3) {
	    if (cache0 === undefined) {
	      cache0 = new WeakMap();
	    }

	    let cache1 = cache0.get(a1);

	    if (cache1 === undefined) {
	      cache1 = new WeakMap();
	      cache0.set(a1, cache1);
	    }

	    let cache2 = cache1.get(a2);

	    if (cache2 === undefined) {
	      cache2 = new WeakMap();
	      cache1.set(a2, cache2);
	    }

	    let fnResult = cache2.get(a3);

	    if (fnResult === undefined) {
	      fnResult = fn(a1, a2, a3);
	      cache2.set(a3, fnResult);
	    }

	    return fnResult;
	  };
	}

	/**
	 * This function transforms a JS object `ObjMap<Promise<T>>` into
	 * a `Promise<ObjMap<T>>`
	 *
	 * This is akin to bluebird's `Promise.props`, but implemented only using
	 * `Promise.all` so it will work with any implementation of ES6 promises.
	 */
	function promiseForObject(object) {
	  return Promise.all(Object.values(object)).then((resolvedValues) => {
	    const resolvedObject = Object.create(null);

	    for (const [i, key] of Object.keys(object).entries()) {
	      resolvedObject[key] = resolvedValues[i];
	    }

	    return resolvedObject;
	  });
	}

	/**
	 * Similar to Array.prototype.reduce(), however the reducing callback may return
	 * a Promise, in which case reduction will continue after each promise resolves.
	 *
	 * If the callback does not return a Promise, then this function will also not
	 * return a Promise.
	 */
	function promiseReduce(values, callbackFn, initialValue) {
	  let accumulator = initialValue;

	  for (const value of values) {
	    accumulator = isPromise(accumulator)
	      ? accumulator.then((resolved) => callbackFn(resolved, value))
	      : callbackFn(accumulator, value);
	  }

	  return accumulator;
	}

	/**
	 * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.
	 */

	function toError(thrownValue) {
	  return thrownValue instanceof Error
	    ? thrownValue
	    : new NonErrorThrown(thrownValue);
	}

	class NonErrorThrown extends Error {
	  constructor(thrownValue) {
	    super('Unexpected error value: ' + inspect$2(thrownValue));
	    this.name = 'NonErrorThrown';
	    this.thrownValue = thrownValue;
	  }
	}

	/**
	 * Given an arbitrary value, presumably thrown while attempting to execute a
	 * GraphQL operation, produce a new GraphQLError aware of the location in the
	 * document responsible for the original Error.
	 */

	function locatedError(rawOriginalError, nodes, path) {
	  var _nodes;

	  const originalError = toError(rawOriginalError); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.

	  if (isLocatedGraphQLError(originalError)) {
	    return originalError;
	  }

	  return new GraphQLError(
	    originalError.message,
	    (_nodes = originalError.nodes) !== null && _nodes !== void 0
	      ? _nodes
	      : nodes,
	    originalError.source,
	    originalError.positions,
	    path,
	    originalError,
	  );
	}

	function isLocatedGraphQLError(error) {
	  return Array.isArray(error.path);
	}

	/**
	 * A memoized collection of relevant subfields with regard to the return
	 * type. Memoizing ensures the subfields are not repeatedly calculated, which
	 * saves overhead when resolving lists of values.
	 */

	const collectSubfields = memoize3((exeContext, returnType, fieldNodes) =>
	  collectSubfields$1(
	    exeContext.schema,
	    exeContext.fragments,
	    exeContext.variableValues,
	    returnType,
	    fieldNodes,
	  ),
	);
	/**
	 * Terminology
	 *
	 * "Definitions" are the generic name for top-level statements in the document.
	 * Examples of this include:
	 * 1) Operations (such as a query)
	 * 2) Fragments
	 *
	 * "Operations" are a generic name for requests in the document.
	 * Examples of this include:
	 * 1) query,
	 * 2) mutation
	 *
	 * "Selections" are the definitions that can appear legally and at
	 * single level of the query. These include:
	 * 1) field references e.g `a`
	 * 2) fragment "spreads" e.g. `...c`
	 * 3) inline fragment "spreads" e.g. `...on Type { a }`
	 */

	/**
	 * Data that must be available at all points during query execution.
	 *
	 * Namely, schema of the type system that is currently executing,
	 * and the fragments defined in the query document
	 */

	/**
	 * Implements the "Executing requests" section of the GraphQL specification.
	 *
	 * Returns either a synchronous ExecutionResult (if all encountered resolvers
	 * are synchronous), or a Promise of an ExecutionResult that will eventually be
	 * resolved and never rejected.
	 *
	 * If the arguments to this function do not result in a legal execution context,
	 * a GraphQLError will be thrown immediately explaining the invalid input.
	 */
	function execute(args) {
	  // Temporary for v15 to v16 migration. Remove in v17
	  arguments.length < 2 ||
	    devAssert(
	      false,
	      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',
	    );
	  const { schema, document, variableValues, rootValue } = args; // If arguments are missing or incorrect, throw an error.

	  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,
	  // a "Response" with only errors is returned.

	  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.

	  if (!('schema' in exeContext)) {
	    return {
	      errors: exeContext,
	    };
	  } // Return a Promise that will eventually resolve to the data described by
	  // The "Response" section of the GraphQL specification.
	  //
	  // If errors are encountered while executing a GraphQL field, only that
	  // field and its descendants will be omitted, and sibling fields will still
	  // be executed. An execution which encounters errors will still result in a
	  // resolved Promise.
	  //
	  // Errors from sub-fields of a NonNull type may propagate to the top level,
	  // at which point we still log the error and null the parent field, which
	  // in this case is the entire response.

	  try {
	    const { operation } = exeContext;
	    const result = executeOperation(exeContext, operation, rootValue);

	    if (isPromise(result)) {
	      return result.then(
	        (data) => buildResponse(data, exeContext.errors),
	        (error) => {
	          exeContext.errors.push(error);
	          return buildResponse(null, exeContext.errors);
	        },
	      );
	    }

	    return buildResponse(result, exeContext.errors);
	  } catch (error) {
	    exeContext.errors.push(error);
	    return buildResponse(null, exeContext.errors);
	  }
	}
	/**
	 * Also implements the "Executing requests" section of the GraphQL specification.
	 * However, it guarantees to complete synchronously (or throw an error) assuming
	 * that all field resolvers are also synchronous.
	 */

	function executeSync(args) {
	  const result = execute(args); // Assert that the execution was synchronous.

	  if (isPromise(result)) {
	    throw new Error('GraphQL execution failed to complete synchronously.');
	  }

	  return result;
	}
	/**
	 * Given a completed execution context and data, build the `{ errors, data }`
	 * response defined by the "Response" section of the GraphQL specification.
	 */

	function buildResponse(data, errors) {
	  return errors.length === 0
	    ? {
	        data,
	      }
	    : {
	        errors,
	        data,
	      };
	}
	/**
	 * Essential assertions before executing to provide developer feedback for
	 * improper use of the GraphQL library.
	 *
	 * @internal
	 */

	function assertValidExecutionArguments(
	  schema,
	  document,
	  rawVariableValues,
	) {
	  document || devAssert(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.

	  assertValidSchema(schema); // Variables, if provided, must be an object.

	  rawVariableValues == null ||
	    isObjectLike(rawVariableValues) ||
	    devAssert(
	      false,
	      'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.',
	    );
	}
	/**
	 * Constructs a ExecutionContext object from the arguments passed to
	 * execute, which we will pass throughout the other execution methods.
	 *
	 * Throws a GraphQLError if a valid execution context cannot be created.
	 *
	 * @internal
	 */

	function buildExecutionContext(args) {
	  var _definition$name, _operation$variableDe;

	  const {
	    schema,
	    document,
	    rootValue,
	    contextValue,
	    variableValues: rawVariableValues,
	    operationName,
	    fieldResolver,
	    typeResolver,
	    subscribeFieldResolver,
	  } = args;
	  let operation;
	  const fragments = Object.create(null);

	  for (const definition of document.definitions) {
	    switch (definition.kind) {
	      case Kind.OPERATION_DEFINITION:
	        if (operationName == null) {
	          if (operation !== undefined) {
	            return [
	              new GraphQLError(
	                'Must provide operation name if query contains multiple operations.',
	              ),
	            ];
	          }

	          operation = definition;
	        } else if (
	          ((_definition$name = definition.name) === null ||
	          _definition$name === void 0
	            ? void 0
	            : _definition$name.value) === operationName
	        ) {
	          operation = definition;
	        }

	        break;

	      case Kind.FRAGMENT_DEFINITION:
	        fragments[definition.name.value] = definition;
	        break;
	    }
	  }

	  if (!operation) {
	    if (operationName != null) {
	      return [new GraphQLError(`Unknown operation named "${operationName}".`)];
	    }

	    return [new GraphQLError('Must provide an operation.')];
	  } // FIXME: https://github.com/graphql/graphql-js/issues/2203

	  /* c8 ignore next */

	  const variableDefinitions =
	    (_operation$variableDe = operation.variableDefinitions) !== null &&
	    _operation$variableDe !== void 0
	      ? _operation$variableDe
	      : [];
	  const coercedVariableValues = getVariableValues(
	    schema,
	    variableDefinitions,
	    rawVariableValues !== null && rawVariableValues !== void 0
	      ? rawVariableValues
	      : {},
	    {
	      maxErrors: 50,
	    },
	  );

	  if (coercedVariableValues.errors) {
	    return coercedVariableValues.errors;
	  }

	  return {
	    schema,
	    fragments,
	    rootValue,
	    contextValue,
	    operation,
	    variableValues: coercedVariableValues.coerced,
	    fieldResolver:
	      fieldResolver !== null && fieldResolver !== void 0
	        ? fieldResolver
	        : defaultFieldResolver,
	    typeResolver:
	      typeResolver !== null && typeResolver !== void 0
	        ? typeResolver
	        : defaultTypeResolver,
	    subscribeFieldResolver:
	      subscribeFieldResolver !== null && subscribeFieldResolver !== void 0
	        ? subscribeFieldResolver
	        : defaultFieldResolver,
	    errors: [],
	  };
	}
	/**
	 * Implements the "Executing operations" section of the spec.
	 */

	function executeOperation(exeContext, operation, rootValue) {
	  const rootType = exeContext.schema.getRootType(operation.operation);

	  if (rootType == null) {
	    throw new GraphQLError(
	      `Schema is not configured to execute ${operation.operation} operation.`,
	      operation,
	    );
	  }

	  const rootFields = collectFields(
	    exeContext.schema,
	    exeContext.fragments,
	    exeContext.variableValues,
	    rootType,
	    operation.selectionSet,
	  );
	  const path = undefined;

	  switch (operation.operation) {
	    case OperationTypeNode.QUERY:
	      return executeFields(exeContext, rootType, rootValue, path, rootFields);

	    case OperationTypeNode.MUTATION:
	      return executeFieldsSerially(
	        exeContext,
	        rootType,
	        rootValue,
	        path,
	        rootFields,
	      );

	    case OperationTypeNode.SUBSCRIPTION:
	      // TODO: deprecate `subscribe` and move all logic here
	      // Temporary solution until we finish merging execute and subscribe together
	      return executeFields(exeContext, rootType, rootValue, path, rootFields);
	  }
	}
	/**
	 * Implements the "Executing selection sets" section of the spec
	 * for fields that must be executed serially.
	 */

	function executeFieldsSerially(
	  exeContext,
	  parentType,
	  sourceValue,
	  path,
	  fields,
	) {
	  return promiseReduce(
	    fields.entries(),
	    (results, [responseName, fieldNodes]) => {
	      const fieldPath = addPath(path, responseName, parentType.name);
	      const result = executeField(
	        exeContext,
	        parentType,
	        sourceValue,
	        fieldNodes,
	        fieldPath,
	      );

	      if (result === undefined) {
	        return results;
	      }

	      if (isPromise(result)) {
	        return result.then((resolvedResult) => {
	          results[responseName] = resolvedResult;
	          return results;
	        });
	      }

	      results[responseName] = result;
	      return results;
	    },
	    Object.create(null),
	  );
	}
	/**
	 * Implements the "Executing selection sets" section of the spec
	 * for fields that may be executed in parallel.
	 */

	function executeFields(exeContext, parentType, sourceValue, path, fields) {
	  const results = Object.create(null);
	  let containsPromise = false;

	  for (const [responseName, fieldNodes] of fields.entries()) {
	    const fieldPath = addPath(path, responseName, parentType.name);
	    const result = executeField(
	      exeContext,
	      parentType,
	      sourceValue,
	      fieldNodes,
	      fieldPath,
	    );

	    if (result !== undefined) {
	      results[responseName] = result;

	      if (isPromise(result)) {
	        containsPromise = true;
	      }
	    }
	  } // If there are no promises, we can just return the object

	  if (!containsPromise) {
	    return results;
	  } // Otherwise, results is a map from field name to the result of resolving that
	  // field, which is possibly a promise. Return a promise that will return this
	  // same map, but with any promises replaced with the values they resolved to.

	  return promiseForObject(results);
	}
	/**
	 * Implements the "Executing fields" section of the spec
	 * In particular, this function figures out the value that the field returns by
	 * calling its resolve function, then calls completeValue to complete promises,
	 * serialize scalars, or execute the sub-selection-set for objects.
	 */

	function executeField(exeContext, parentType, source, fieldNodes, path) {
	  var _fieldDef$resolve;

	  const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);

	  if (!fieldDef) {
	    return;
	  }

	  const returnType = fieldDef.type;
	  const resolveFn =
	    (_fieldDef$resolve = fieldDef.resolve) !== null &&
	    _fieldDef$resolve !== void 0
	      ? _fieldDef$resolve
	      : exeContext.fieldResolver;
	  const info = buildResolveInfo(
	    exeContext,
	    fieldDef,
	    fieldNodes,
	    parentType,
	    path,
	  ); // Get the resolve function, regardless of if its result is normal or abrupt (error).

	  try {
	    // Build a JS object of arguments from the field.arguments AST, using the
	    // variables scope to fulfill any variable references.
	    // TODO: find a way to memoize, in case this field is within a List type.
	    const args = getArgumentValues(
	      fieldDef,
	      fieldNodes[0],
	      exeContext.variableValues,
	    ); // The resolve function's optional third argument is a context value that
	    // is provided to every resolve function within an execution. It is commonly
	    // used to represent an authenticated user, or request-specific caches.

	    const contextValue = exeContext.contextValue;
	    const result = resolveFn(source, args, contextValue, info);
	    let completed;

	    if (isPromise(result)) {
	      completed = result.then((resolved) =>
	        completeValue(exeContext, returnType, fieldNodes, info, path, resolved),
	      );
	    } else {
	      completed = completeValue(
	        exeContext,
	        returnType,
	        fieldNodes,
	        info,
	        path,
	        result,
	      );
	    }

	    if (isPromise(completed)) {
	      // Note: we don't rely on a `catch` method, but we do expect "thenable"
	      // to take a second callback for the error case.
	      return completed.then(undefined, (rawError) => {
	        const error = locatedError(rawError, fieldNodes, pathToArray(path));
	        return handleFieldError(error, returnType, exeContext);
	      });
	    }

	    return completed;
	  } catch (rawError) {
	    const error = locatedError(rawError, fieldNodes, pathToArray(path));
	    return handleFieldError(error, returnType, exeContext);
	  }
	}
	/**
	 * @internal
	 */

	function buildResolveInfo(
	  exeContext,
	  fieldDef,
	  fieldNodes,
	  parentType,
	  path,
	) {
	  // The resolve function's optional fourth argument is a collection of
	  // information about the current execution state.
	  return {
	    fieldName: fieldDef.name,
	    fieldNodes,
	    returnType: fieldDef.type,
	    parentType,
	    path,
	    schema: exeContext.schema,
	    fragments: exeContext.fragments,
	    rootValue: exeContext.rootValue,
	    operation: exeContext.operation,
	    variableValues: exeContext.variableValues,
	  };
	}

	function handleFieldError(error, returnType, exeContext) {
	  // If the field type is non-nullable, then it is resolved without any
	  // protection from errors, however it still properly locates the error.
	  if (isNonNullType(returnType)) {
	    throw error;
	  } // Otherwise, error protection is applied, logging the error and resolving
	  // a null value for this field if one is encountered.

	  exeContext.errors.push(error);
	  return null;
	}
	/**
	 * Implements the instructions for completeValue as defined in the
	 * "Value Completion" section of the spec.
	 *
	 * If the field type is Non-Null, then this recursively completes the value
	 * for the inner type. It throws a field error if that completion returns null,
	 * as per the "Nullability" section of the spec.
	 *
	 * If the field type is a List, then this recursively completes the value
	 * for the inner type on each item in the list.
	 *
	 * If the field type is a Scalar or Enum, ensures the completed value is a legal
	 * value of the type by calling the `serialize` method of GraphQL type
	 * definition.
	 *
	 * If the field is an abstract type, determine the runtime type of the value
	 * and then complete based on that type
	 *
	 * Otherwise, the field type expects a sub-selection set, and will complete the
	 * value by executing all sub-selections.
	 */

	function completeValue(exeContext, returnType, fieldNodes, info, path, result) {
	  // If result is an Error, throw a located error.
	  if (result instanceof Error) {
	    throw result;
	  } // If field type is NonNull, complete for inner type, and throw field error
	  // if result is null.

	  if (isNonNullType(returnType)) {
	    const completed = completeValue(
	      exeContext,
	      returnType.ofType,
	      fieldNodes,
	      info,
	      path,
	      result,
	    );

	    if (completed === null) {
	      throw new Error(
	        `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`,
	      );
	    }

	    return completed;
	  } // If result value is null or undefined then return null.

	  if (result == null) {
	    return null;
	  } // If field type is List, complete each item in the list with the inner type

	  if (isListType(returnType)) {
	    return completeListValue(
	      exeContext,
	      returnType,
	      fieldNodes,
	      info,
	      path,
	      result,
	    );
	  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,
	  // returning null if serialization is not possible.

	  if (isLeafType(returnType)) {
	    return completeLeafValue(returnType, result);
	  } // If field type is an abstract type, Interface or Union, determine the
	  // runtime Object type and complete for that type.

	  if (isAbstractType(returnType)) {
	    return completeAbstractValue(
	      exeContext,
	      returnType,
	      fieldNodes,
	      info,
	      path,
	      result,
	    );
	  } // If field type is Object, execute and complete all sub-selections.

	  if (isObjectType(returnType)) {
	    return completeObjectValue(
	      exeContext,
	      returnType,
	      fieldNodes,
	      info,
	      path,
	      result,
	    );
	  }
	  /* c8 ignore next 6 */
	  // Not reachable, all possible output types have been considered.

	  invariant(
	      false,
	      'Cannot complete value of unexpected output type: ' + inspect$2(returnType),
	    );
	}
	/**
	 * Complete a list value by completing each item in the list with the
	 * inner type
	 */

	function completeListValue(
	  exeContext,
	  returnType,
	  fieldNodes,
	  info,
	  path,
	  result,
	) {
	  if (!isIterableObject(result)) {
	    throw new GraphQLError(
	      `Expected Iterable, but did not find one for field "${info.parentType.name}.${info.fieldName}".`,
	    );
	  } // This is specified as a simple map, however we're optimizing the path
	  // where the list contains no Promises by avoiding creating another Promise.

	  const itemType = returnType.ofType;
	  let containsPromise = false;
	  const completedResults = Array.from(result, (item, index) => {
	    // No need to modify the info object containing the path,
	    // since from here on it is not ever accessed by resolver functions.
	    const itemPath = addPath(path, index, undefined);

	    try {
	      let completedItem;

	      if (isPromise(item)) {
	        completedItem = item.then((resolved) =>
	          completeValue(
	            exeContext,
	            itemType,
	            fieldNodes,
	            info,
	            itemPath,
	            resolved,
	          ),
	        );
	      } else {
	        completedItem = completeValue(
	          exeContext,
	          itemType,
	          fieldNodes,
	          info,
	          itemPath,
	          item,
	        );
	      }

	      if (isPromise(completedItem)) {
	        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect "thenable"
	        // to take a second callback for the error case.

	        return completedItem.then(undefined, (rawError) => {
	          const error = locatedError(
	            rawError,
	            fieldNodes,
	            pathToArray(itemPath),
	          );
	          return handleFieldError(error, itemType, exeContext);
	        });
	      }

	      return completedItem;
	    } catch (rawError) {
	      const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));
	      return handleFieldError(error, itemType, exeContext);
	    }
	  });
	  return containsPromise ? Promise.all(completedResults) : completedResults;
	}
	/**
	 * Complete a Scalar or Enum by serializing to a valid value, returning
	 * null if serialization is not possible.
	 */

	function completeLeafValue(returnType, result) {
	  const serializedResult = returnType.serialize(result);

	  if (serializedResult == null) {
	    throw new Error(
	      `Expected \`${inspect$2(returnType)}.serialize(${inspect$2(result)})\` to ` +
	        `return non-nullable value, returned: ${inspect$2(serializedResult)}`,
	    );
	  }

	  return serializedResult;
	}
	/**
	 * Complete a value of an abstract type by determining the runtime object type
	 * of that value, then complete the value for that type.
	 */

	function completeAbstractValue(
	  exeContext,
	  returnType,
	  fieldNodes,
	  info,
	  path,
	  result,
	) {
	  var _returnType$resolveTy;

	  const resolveTypeFn =
	    (_returnType$resolveTy = returnType.resolveType) !== null &&
	    _returnType$resolveTy !== void 0
	      ? _returnType$resolveTy
	      : exeContext.typeResolver;
	  const contextValue = exeContext.contextValue;
	  const runtimeType = resolveTypeFn(result, contextValue, info, returnType);

	  if (isPromise(runtimeType)) {
	    return runtimeType.then((resolvedRuntimeType) =>
	      completeObjectValue(
	        exeContext,
	        ensureValidRuntimeType(
	          resolvedRuntimeType,
	          exeContext,
	          returnType,
	          fieldNodes,
	          info,
	          result,
	        ),
	        fieldNodes,
	        info,
	        path,
	        result,
	      ),
	    );
	  }

	  return completeObjectValue(
	    exeContext,
	    ensureValidRuntimeType(
	      runtimeType,
	      exeContext,
	      returnType,
	      fieldNodes,
	      info,
	      result,
	    ),
	    fieldNodes,
	    info,
	    path,
	    result,
	  );
	}

	function ensureValidRuntimeType(
	  runtimeTypeName,
	  exeContext,
	  returnType,
	  fieldNodes,
	  info,
	  result,
	) {
	  if (runtimeTypeName == null) {
	    throw new GraphQLError(
	      `Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}". Either the "${returnType.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`,
	      fieldNodes,
	    );
	  } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`
	  // TODO: remove in 17.0.0 release

	  if (isObjectType(runtimeTypeName)) {
	    throw new GraphQLError(
	      'Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.',
	    );
	  }

	  if (typeof runtimeTypeName !== 'string') {
	    throw new GraphQLError(
	      `Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}" with ` +
	        `value ${inspect$2(result)}, received "${inspect$2(runtimeTypeName)}".`,
	    );
	  }

	  const runtimeType = exeContext.schema.getType(runtimeTypeName);

	  if (runtimeType == null) {
	    throw new GraphQLError(
	      `Abstract type "${returnType.name}" was resolved to a type "${runtimeTypeName}" that does not exist inside the schema.`,
	      fieldNodes,
	    );
	  }

	  if (!isObjectType(runtimeType)) {
	    throw new GraphQLError(
	      `Abstract type "${returnType.name}" was resolved to a non-object type "${runtimeTypeName}".`,
	      fieldNodes,
	    );
	  }

	  if (!exeContext.schema.isSubType(returnType, runtimeType)) {
	    throw new GraphQLError(
	      `Runtime Object type "${runtimeType.name}" is not a possible type for "${returnType.name}".`,
	      fieldNodes,
	    );
	  }

	  return runtimeType;
	}
	/**
	 * Complete an Object value by executing all sub-selections.
	 */

	function completeObjectValue(
	  exeContext,
	  returnType,
	  fieldNodes,
	  info,
	  path,
	  result,
	) {
	  // Collect sub-fields to execute to complete this value.
	  const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the
	  // current result. If isTypeOf returns false, then raise an error rather
	  // than continuing execution.

	  if (returnType.isTypeOf) {
	    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);

	    if (isPromise(isTypeOf)) {
	      return isTypeOf.then((resolvedIsTypeOf) => {
	        if (!resolvedIsTypeOf) {
	          throw invalidReturnTypeError(returnType, result, fieldNodes);
	        }

	        return executeFields(
	          exeContext,
	          returnType,
	          result,
	          path,
	          subFieldNodes,
	        );
	      });
	    }

	    if (!isTypeOf) {
	      throw invalidReturnTypeError(returnType, result, fieldNodes);
	    }
	  }

	  return executeFields(exeContext, returnType, result, path, subFieldNodes);
	}

	function invalidReturnTypeError(returnType, result, fieldNodes) {
	  return new GraphQLError(
	    `Expected value of type "${returnType.name}" but got: ${inspect$2(result)}.`,
	    fieldNodes,
	  );
	}
	/**
	 * If a resolveType function is not given, then a default resolve behavior is
	 * used which attempts two strategies:
	 *
	 * First, See if the provided value has a `__typename` field defined, if so, use
	 * that value as name of the resolved type.
	 *
	 * Otherwise, test each possible type for the abstract type by calling
	 * isTypeOf for the object being coerced, returning the first type that matches.
	 */

	const defaultTypeResolver = function (
	  value,
	  contextValue,
	  info,
	  abstractType,
	) {
	  // First, look for `__typename`.
	  if (isObjectLike(value) && typeof value.__typename === 'string') {
	    return value.__typename;
	  } // Otherwise, test each possible type.

	  const possibleTypes = info.schema.getPossibleTypes(abstractType);
	  const promisedIsTypeOfResults = [];

	  for (let i = 0; i < possibleTypes.length; i++) {
	    const type = possibleTypes[i];

	    if (type.isTypeOf) {
	      const isTypeOfResult = type.isTypeOf(value, contextValue, info);

	      if (isPromise(isTypeOfResult)) {
	        promisedIsTypeOfResults[i] = isTypeOfResult;
	      } else if (isTypeOfResult) {
	        return type.name;
	      }
	    }
	  }

	  if (promisedIsTypeOfResults.length) {
	    return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {
	      for (let i = 0; i < isTypeOfResults.length; i++) {
	        if (isTypeOfResults[i]) {
	          return possibleTypes[i].name;
	        }
	      }
	    });
	  }
	};
	/**
	 * If a resolve function is not given, then a default resolve behavior is used
	 * which takes the property of the source object of the same name as the field
	 * and returns it as the result, or if it's a function, returns the result
	 * of calling that function while passing along args and context value.
	 */

	const defaultFieldResolver = function (
	  source,
	  args,
	  contextValue,
	  info,
	) {
	  // ensure source is a value for which property access is acceptable.
	  if (isObjectLike(source) || typeof source === 'function') {
	    const property = source[info.fieldName];

	    if (typeof property === 'function') {
	      return source[info.fieldName](args, contextValue, info);
	    }

	    return property;
	  }
	};
	/**
	 * This method looks up the field on the given type definition.
	 * It has special casing for the three introspection fields,
	 * __schema, __type and __typename. __typename is special because
	 * it can always be queried as a field, even in situations where no
	 * other fields are allowed, like on a Union. __schema and __type
	 * could get automatically added to the query type, but that would
	 * require mutating type definitions, which would cause issues.
	 *
	 * @internal
	 */

	function getFieldDef(schema, parentType, fieldNode) {
	  const fieldName = fieldNode.name.value;

	  if (
	    fieldName === SchemaMetaFieldDef.name &&
	    schema.getQueryType() === parentType
	  ) {
	    return SchemaMetaFieldDef;
	  } else if (
	    fieldName === TypeMetaFieldDef.name &&
	    schema.getQueryType() === parentType
	  ) {
	    return TypeMetaFieldDef;
	  } else if (fieldName === TypeNameMetaFieldDef.name) {
	    return TypeNameMetaFieldDef;
	  }

	  return parentType.getFields()[fieldName];
	}

	/**
	 * This is the primary entry point function for fulfilling GraphQL operations
	 * by parsing, validating, and executing a GraphQL document along side a
	 * GraphQL schema.
	 *
	 * More sophisticated GraphQL servers, such as those which persist queries,
	 * may wish to separate the validation and execution phases to a static time
	 * tooling step, and a server runtime step.
	 *
	 * Accepts either an object with named arguments, or individual arguments:
	 *
	 * schema:
	 *    The GraphQL type system to use when validating and executing a query.
	 * source:
	 *    A GraphQL language formatted string representing the requested operation.
	 * rootValue:
	 *    The value provided as the first argument to resolver functions on the top
	 *    level type (e.g. the query object type).
	 * contextValue:
	 *    The context value is provided as an argument to resolver functions after
	 *    field arguments. It is used to pass shared information useful at any point
	 *    during executing this query, for example the currently logged in user and
	 *    connections to databases or other services.
	 * variableValues:
	 *    A mapping of variable name to runtime value to use for all variables
	 *    defined in the requestString.
	 * operationName:
	 *    The name of the operation to use if requestString contains multiple
	 *    possible operations. Can be omitted if requestString contains only
	 *    one operation.
	 * fieldResolver:
	 *    A resolver function to use when one is not provided by the schema.
	 *    If not provided, the default field resolver is used (which looks for a
	 *    value or method on the source value with the field's name).
	 * typeResolver:
	 *    A type resolver function to use when none is provided by the schema.
	 *    If not provided, the default type resolver is used (which looks for a
	 *    `__typename` field or alternatively calls the `isTypeOf` method).
	 */

	function graphql$1(args) {
	  // Always return a Promise for a consistent API.
	  return new Promise((resolve) => resolve(graphqlImpl(args)));
	}
	/**
	 * The graphqlSync function also fulfills GraphQL operations by parsing,
	 * validating, and executing a GraphQL document along side a GraphQL schema.
	 * However, it guarantees to complete synchronously (or throw an error) assuming
	 * that all field resolvers are also synchronous.
	 */

	function graphqlSync(args) {
	  const result = graphqlImpl(args); // Assert that the execution was synchronous.

	  if (isPromise(result)) {
	    throw new Error('GraphQL execution failed to complete synchronously.');
	  }

	  return result;
	}

	function graphqlImpl(args) {
	  // Temporary for v15 to v16 migration. Remove in v17
	  arguments.length < 2 ||
	    devAssert(
	      false,
	      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',
	    );
	  const {
	    schema,
	    source,
	    rootValue,
	    contextValue,
	    variableValues,
	    operationName,
	    fieldResolver,
	    typeResolver,
	  } = args; // Validate Schema

	  const schemaValidationErrors = validateSchema$1(schema);

	  if (schemaValidationErrors.length > 0) {
	    return {
	      errors: schemaValidationErrors,
	    };
	  } // Parse

	  let document;

	  try {
	    document = parse(source);
	  } catch (syntaxError) {
	    return {
	      errors: [syntaxError],
	    };
	  } // Validate

	  const validationErrors = validate$3(schema, document);

	  if (validationErrors.length > 0) {
	    return {
	      errors: validationErrors,
	    };
	  } // Execute

	  return execute({
	    schema,
	    document,
	    rootValue,
	    contextValue,
	    variableValues,
	    operationName,
	    fieldResolver,
	    typeResolver,
	  });
	}

	/**
	 * Returns true if the provided object implements the AsyncIterator protocol via
	 * implementing a `Symbol.asyncIterator` method.
	 */
	function isAsyncIterable(maybeAsyncIterable) {
	  return (
	    typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0
	      ? void 0
	      : maybeAsyncIterable[Symbol.asyncIterator]) === 'function'
	  );
	}

	/**
	 * Given an AsyncIterable and a callback function, return an AsyncIterator
	 * which produces values mapped via calling the callback function.
	 */
	function mapAsyncIterator(iterable, callback) {
	  const iterator = iterable[Symbol.asyncIterator]();

	  async function mapResult(result) {
	    if (result.done) {
	      return result;
	    }

	    try {
	      return {
	        value: await callback(result.value),
	        done: false,
	      };
	    } catch (error) {
	      /* c8 ignore start */
	      // FIXME: add test case
	      if (typeof iterator.return === 'function') {
	        try {
	          await iterator.return();
	        } catch (_e) {
	          /* ignore error */
	        }
	      }

	      throw error;
	      /* c8 ignore stop */
	    }
	  }

	  return {
	    async next() {
	      return mapResult(await iterator.next());
	    },

	    async return() {
	      // If iterator.return() does not exist, then type R must be undefined.
	      return typeof iterator.return === 'function'
	        ? mapResult(await iterator.return())
	        : {
	            value: undefined,
	            done: true,
	          };
	    },

	    async throw(error) {
	      if (typeof iterator.throw === 'function') {
	        return mapResult(await iterator.throw(error));
	      }

	      throw error;
	    },

	    [Symbol.asyncIterator]() {
	      return this;
	    },
	  };
	}

	/**
	 * Implements the "Subscribe" algorithm described in the GraphQL specification.
	 *
	 * Returns a Promise which resolves to either an AsyncIterator (if successful)
	 * or an ExecutionResult (error). The promise will be rejected if the schema or
	 * other arguments to this function are invalid, or if the resolved event stream
	 * is not an async iterable.
	 *
	 * If the client-provided arguments to this function do not result in a
	 * compliant subscription, a GraphQL Response (ExecutionResult) with
	 * descriptive errors and no data will be returned.
	 *
	 * If the source stream could not be created due to faulty subscription
	 * resolver logic or underlying systems, the promise will resolve to a single
	 * ExecutionResult containing `errors` and no `data`.
	 *
	 * If the operation succeeded, the promise resolves to an AsyncIterator, which
	 * yields a stream of ExecutionResults representing the response stream.
	 *
	 * Accepts either an object with named arguments, or individual arguments.
	 */

	async function subscribe(args) {
	  // Temporary for v15 to v16 migration. Remove in v17
	  arguments.length < 2 ||
	    devAssert(
	      false,
	      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',
	    );
	  const {
	    schema,
	    document,
	    rootValue,
	    contextValue,
	    variableValues,
	    operationName,
	    fieldResolver,
	    subscribeFieldResolver,
	  } = args;
	  const resultOrStream = await createSourceEventStream(
	    schema,
	    document,
	    rootValue,
	    contextValue,
	    variableValues,
	    operationName,
	    subscribeFieldResolver,
	  );

	  if (!isAsyncIterable(resultOrStream)) {
	    return resultOrStream;
	  } // For each payload yielded from a subscription, map it over the normal
	  // GraphQL `execute` function, with `payload` as the rootValue.
	  // This implements the "MapSourceToResponseEvent" algorithm described in
	  // the GraphQL specification. The `execute` function provides the
	  // "ExecuteSubscriptionEvent" algorithm, as it is nearly identical to the
	  // "ExecuteQuery" algorithm, for which `execute` is also used.

	  const mapSourceToResponse = (payload) =>
	    execute({
	      schema,
	      document,
	      rootValue: payload,
	      contextValue,
	      variableValues,
	      operationName,
	      fieldResolver,
	    }); // Map every source value to a ExecutionResult value as described above.

	  return mapAsyncIterator(resultOrStream, mapSourceToResponse);
	}
	/**
	 * Implements the "CreateSourceEventStream" algorithm described in the
	 * GraphQL specification, resolving the subscription source event stream.
	 *
	 * Returns a Promise which resolves to either an AsyncIterable (if successful)
	 * or an ExecutionResult (error). The promise will be rejected if the schema or
	 * other arguments to this function are invalid, or if the resolved event stream
	 * is not an async iterable.
	 *
	 * If the client-provided arguments to this function do not result in a
	 * compliant subscription, a GraphQL Response (ExecutionResult) with
	 * descriptive errors and no data will be returned.
	 *
	 * If the the source stream could not be created due to faulty subscription
	 * resolver logic or underlying systems, the promise will resolve to a single
	 * ExecutionResult containing `errors` and no `data`.
	 *
	 * If the operation succeeded, the promise resolves to the AsyncIterable for the
	 * event stream returned by the resolver.
	 *
	 * A Source Event Stream represents a sequence of events, each of which triggers
	 * a GraphQL execution for that event.
	 *
	 * This may be useful when hosting the stateful subscription service in a
	 * different process or machine than the stateless GraphQL execution engine,
	 * or otherwise separating these two steps. For more on this, see the
	 * "Supporting Subscriptions at Scale" information in the GraphQL specification.
	 */

	async function createSourceEventStream(
	  schema,
	  document,
	  rootValue,
	  contextValue,
	  variableValues,
	  operationName,
	  subscribeFieldResolver,
	) {
	  // If arguments are missing or incorrectly typed, this is an internal
	  // developer mistake which should throw an early error.
	  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,
	  // a "Response" with only errors is returned.

	  const exeContext = buildExecutionContext({
	    schema,
	    document,
	    rootValue,
	    contextValue,
	    variableValues,
	    operationName,
	    subscribeFieldResolver,
	  }); // Return early errors if execution context failed.

	  if (!('schema' in exeContext)) {
	    return {
	      errors: exeContext,
	    };
	  }

	  try {
	    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.

	    if (!isAsyncIterable(eventStream)) {
	      throw new Error(
	        'Subscription field must return Async Iterable. ' +
	          `Received: ${inspect$2(eventStream)}.`,
	      );
	    }

	    return eventStream;
	  } catch (error) {
	    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.
	    // Otherwise treat the error as a system-class error and re-throw it.
	    if (error instanceof GraphQLError) {
	      return {
	        errors: [error],
	      };
	    }

	    throw error;
	  }
	}

	async function executeSubscription(exeContext) {
	  const { schema, fragments, operation, variableValues, rootValue } =
	    exeContext;
	  const rootType = schema.getSubscriptionType();

	  if (rootType == null) {
	    throw new GraphQLError(
	      'Schema is not configured to execute subscription operation.',
	      operation,
	    );
	  }

	  const rootFields = collectFields(
	    schema,
	    fragments,
	    variableValues,
	    rootType,
	    operation.selectionSet,
	  );
	  const [responseName, fieldNodes] = [...rootFields.entries()][0];
	  const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);

	  if (!fieldDef) {
	    const fieldName = fieldNodes[0].name.value;
	    throw new GraphQLError(
	      `The subscription field "${fieldName}" is not defined.`,
	      fieldNodes,
	    );
	  }

	  const path = addPath(undefined, responseName, rootType.name);
	  const info = buildResolveInfo(
	    exeContext,
	    fieldDef,
	    fieldNodes,
	    rootType,
	    path,
	  );

	  try {
	    var _fieldDef$subscribe;

	    // Implements the "ResolveFieldEventStream" algorithm from GraphQL specification.
	    // It differs from "ResolveFieldValue" due to providing a different `resolveFn`.
	    // Build a JS object of arguments from the field.arguments AST, using the
	    // variables scope to fulfill any variable references.
	    const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that
	    // is provided to every resolve function within an execution. It is commonly
	    // used to represent an authenticated user, or request-specific caches.

	    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an
	    // AsyncIterable yielding raw payloads.

	    const resolveFn =
	      (_fieldDef$subscribe = fieldDef.subscribe) !== null &&
	      _fieldDef$subscribe !== void 0
	        ? _fieldDef$subscribe
	        : exeContext.subscribeFieldResolver;
	    const eventStream = await resolveFn(rootValue, args, contextValue, info);

	    if (eventStream instanceof Error) {
	      throw eventStream;
	    }

	    return eventStream;
	  } catch (error) {
	    throw locatedError(error, fieldNodes, pathToArray(path));
	  }
	}

	/**
	 * No deprecated
	 *
	 * A GraphQL document is only valid if all selected fields and all used enum values have not been
	 * deprecated.
	 *
	 * Note: This rule is optional and is not part of the Validation section of the GraphQL
	 * Specification. The main purpose of this rule is detection of deprecated usages and not
	 * necessarily to forbid their use when querying a service.
	 */
	function NoDeprecatedCustomRule(context) {
	  return {
	    Field(node) {
	      const fieldDef = context.getFieldDef();
	      const deprecationReason =
	        fieldDef === null || fieldDef === void 0
	          ? void 0
	          : fieldDef.deprecationReason;

	      if (fieldDef && deprecationReason != null) {
	        const parentType = context.getParentType();
	        parentType != null || invariant(false);
	        context.reportError(
	          new GraphQLError(
	            `The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`,
	            node,
	          ),
	        );
	      }
	    },

	    Argument(node) {
	      const argDef = context.getArgument();
	      const deprecationReason =
	        argDef === null || argDef === void 0
	          ? void 0
	          : argDef.deprecationReason;

	      if (argDef && deprecationReason != null) {
	        const directiveDef = context.getDirective();

	        if (directiveDef != null) {
	          context.reportError(
	            new GraphQLError(
	              `Directive "@${directiveDef.name}" argument "${argDef.name}" is deprecated. ${deprecationReason}`,
	              node,
	            ),
	          );
	        } else {
	          const parentType = context.getParentType();
	          const fieldDef = context.getFieldDef();
	          (parentType != null && fieldDef != null) || invariant(false);
	          context.reportError(
	            new GraphQLError(
	              `Field "${parentType.name}.${fieldDef.name}" argument "${argDef.name}" is deprecated. ${deprecationReason}`,
	              node,
	            ),
	          );
	        }
	      }
	    },

	    ObjectField(node) {
	      const inputObjectDef = getNamedType(context.getParentInputType());

	      if (isInputObjectType(inputObjectDef)) {
	        const inputFieldDef = inputObjectDef.getFields()[node.name.value];
	        const deprecationReason =
	          inputFieldDef === null || inputFieldDef === void 0
	            ? void 0
	            : inputFieldDef.deprecationReason;

	        if (deprecationReason != null) {
	          context.reportError(
	            new GraphQLError(
	              `The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`,
	              node,
	            ),
	          );
	        }
	      }
	    },

	    EnumValue(node) {
	      const enumValueDef = context.getEnumValue();
	      const deprecationReason =
	        enumValueDef === null || enumValueDef === void 0
	          ? void 0
	          : enumValueDef.deprecationReason;

	      if (enumValueDef && deprecationReason != null) {
	        const enumTypeDef = getNamedType(context.getInputType());
	        enumTypeDef != null || invariant(false);
	        context.reportError(
	          new GraphQLError(
	            `The enum value "${enumTypeDef.name}.${enumValueDef.name}" is deprecated. ${deprecationReason}`,
	            node,
	          ),
	        );
	      }
	    },
	  };
	}

	/**
	 * Prohibit introspection queries
	 *
	 * A GraphQL document is only valid if all fields selected are not fields that
	 * return an introspection type.
	 *
	 * Note: This rule is optional and is not part of the Validation section of the
	 * GraphQL Specification. This rule effectively disables introspection, which
	 * does not reflect best practices and should only be done if absolutely necessary.
	 */
	function NoSchemaIntrospectionCustomRule(context) {
	  return {
	    Field(node) {
	      const type = getNamedType(context.getType());

	      if (type && isIntrospectionType(type)) {
	        context.reportError(
	          new GraphQLError(
	            `GraphQL introspection has been disabled, but the requested query contained the field "${node.name.value}".`,
	            node,
	          ),
	        );
	      }
	    },
	  };
	}

	/**
	 * Produce the GraphQL query recommended for a full schema introspection.
	 * Accepts optional IntrospectionOptions.
	 */
	function getIntrospectionQuery(options) {
	  const optionsWithDefault = {
	    descriptions: true,
	    specifiedByUrl: false,
	    directiveIsRepeatable: false,
	    schemaDescription: false,
	    inputValueDeprecation: false,
	    ...options,
	  };
	  const descriptions = optionsWithDefault.descriptions ? 'description' : '';
	  const specifiedByUrl = optionsWithDefault.specifiedByUrl
	    ? 'specifiedByURL'
	    : '';
	  const directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable
	    ? 'isRepeatable'
	    : '';
	  const schemaDescription = optionsWithDefault.schemaDescription
	    ? descriptions
	    : '';

	  function inputDeprecation(str) {
	    return optionsWithDefault.inputValueDeprecation ? str : '';
	  }

	  return `
    query IntrospectionQuery {
      __schema {
        ${schemaDescription}
        queryType { name }
        mutationType { name }
        subscriptionType { name }
        types {
          ...FullType
        }
        directives {
          name
          ${descriptions}
          ${directiveIsRepeatable}
          locations
          args${inputDeprecation('(includeDeprecated: true)')} {
            ...InputValue
          }
        }
      }
    }

    fragment FullType on __Type {
      kind
      name
      ${descriptions}
      ${specifiedByUrl}
      fields(includeDeprecated: true) {
        name
        ${descriptions}
        args${inputDeprecation('(includeDeprecated: true)')} {
          ...InputValue
        }
        type {
          ...TypeRef
        }
        isDeprecated
        deprecationReason
      }
      inputFields${inputDeprecation('(includeDeprecated: true)')} {
        ...InputValue
      }
      interfaces {
        ...TypeRef
      }
      enumValues(includeDeprecated: true) {
        name
        ${descriptions}
        isDeprecated
        deprecationReason
      }
      possibleTypes {
        ...TypeRef
      }
    }

    fragment InputValue on __InputValue {
      name
      ${descriptions}
      type { ...TypeRef }
      defaultValue
      ${inputDeprecation('isDeprecated')}
      ${inputDeprecation('deprecationReason')}
    }

    fragment TypeRef on __Type {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                  ofType {
                    kind
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
  `;
	}

	/**
	 * Returns an operation AST given a document AST and optionally an operation
	 * name. If a name is not provided, an operation is only returned if only one is
	 * provided in the document.
	 */

	function getOperationAST(documentAST, operationName) {
	  let operation = null;

	  for (const definition of documentAST.definitions) {
	    if (definition.kind === Kind.OPERATION_DEFINITION) {
	      var _definition$name;

	      if (operationName == null) {
	        // If no operation name was provided, only return an Operation if there
	        // is one defined in the document. Upon encountering the second, return
	        // null.
	        if (operation) {
	          return null;
	        }

	        operation = definition;
	      } else if (
	        ((_definition$name = definition.name) === null ||
	        _definition$name === void 0
	          ? void 0
	          : _definition$name.value) === operationName
	      ) {
	        return definition;
	      }
	    }
	  }

	  return operation;
	}

	/**
	 * Extracts the root type of the operation from the schema.
	 *
	 * @deprecated Please use `GraphQLSchema.getRootType` instead. Will be removed in v17
	 */
	function getOperationRootType(schema, operation) {
	  if (operation.operation === 'query') {
	    const queryType = schema.getQueryType();

	    if (!queryType) {
	      throw new GraphQLError(
	        'Schema does not define the required query root type.',
	        operation,
	      );
	    }

	    return queryType;
	  }

	  if (operation.operation === 'mutation') {
	    const mutationType = schema.getMutationType();

	    if (!mutationType) {
	      throw new GraphQLError(
	        'Schema is not configured for mutations.',
	        operation,
	      );
	    }

	    return mutationType;
	  }

	  if (operation.operation === 'subscription') {
	    const subscriptionType = schema.getSubscriptionType();

	    if (!subscriptionType) {
	      throw new GraphQLError(
	        'Schema is not configured for subscriptions.',
	        operation,
	      );
	    }

	    return subscriptionType;
	  }

	  throw new GraphQLError(
	    'Can only have query, mutation and subscription operations.',
	    operation,
	  );
	}

	/**
	 * Build an IntrospectionQuery from a GraphQLSchema
	 *
	 * IntrospectionQuery is useful for utilities that care about type and field
	 * relationships, but do not need to traverse through those relationships.
	 *
	 * This is the inverse of buildClientSchema. The primary use case is outside
	 * of the server context, for instance when doing schema comparisons.
	 */

	function introspectionFromSchema(schema, options) {
	  const optionsWithDefaults = {
	    specifiedByUrl: true,
	    directiveIsRepeatable: true,
	    schemaDescription: true,
	    inputValueDeprecation: true,
	    ...options,
	  };
	  const document = parse(getIntrospectionQuery(optionsWithDefaults));
	  const result = executeSync({
	    schema,
	    document,
	  });
	  (!result.errors && result.data) || invariant(false);
	  return result.data;
	}

	/**
	 * Build a GraphQLSchema for use by client tools.
	 *
	 * Given the result of a client running the introspection query, creates and
	 * returns a GraphQLSchema instance which can be then used with all graphql-js
	 * tools, but cannot be used to execute a query, as introspection does not
	 * represent the "resolver", "parse" or "serialize" functions or any other
	 * server-internal mechanisms.
	 *
	 * This function expects a complete introspection result. Don't forget to check
	 * the "errors" field of a server response before calling this function.
	 */

	function buildClientSchema(introspection, options) {
	  (isObjectLike(introspection) && isObjectLike(introspection.__schema)) ||
	    devAssert(
	      false,
	      `Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${inspect$2(
        introspection,
      )}.`,
	    ); // Get the schema from the introspection result.

	  const schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.

	  const typeMap = keyValMap(
	    schemaIntrospection.types,
	    (typeIntrospection) => typeIntrospection.name,
	    (typeIntrospection) => buildType(typeIntrospection),
	  ); // Include standard types only if they are used.

	  for (const stdType of [...specifiedScalarTypes, ...introspectionTypes]) {
	    if (typeMap[stdType.name]) {
	      typeMap[stdType.name] = stdType;
	    }
	  } // Get the root Query, Mutation, and Subscription types.

	  const queryType = schemaIntrospection.queryType
	    ? getObjectType(schemaIntrospection.queryType)
	    : null;
	  const mutationType = schemaIntrospection.mutationType
	    ? getObjectType(schemaIntrospection.mutationType)
	    : null;
	  const subscriptionType = schemaIntrospection.subscriptionType
	    ? getObjectType(schemaIntrospection.subscriptionType)
	    : null; // Get the directives supported by Introspection, assuming empty-set if
	  // directives were not queried for.

	  const directives = schemaIntrospection.directives
	    ? schemaIntrospection.directives.map(buildDirective)
	    : []; // Then produce and return a Schema with these types.

	  return new GraphQLSchema({
	    description: schemaIntrospection.description,
	    query: queryType,
	    mutation: mutationType,
	    subscription: subscriptionType,
	    types: Object.values(typeMap),
	    directives,
	    assumeValid:
	      options === null || options === void 0 ? void 0 : options.assumeValid,
	  }); // Given a type reference in introspection, return the GraphQLType instance.
	  // preferring cached instances before building new instances.

	  function getType(typeRef) {
	    if (typeRef.kind === TypeKind.LIST) {
	      const itemRef = typeRef.ofType;

	      if (!itemRef) {
	        throw new Error('Decorated type deeper than introspection query.');
	      }

	      return new GraphQLList(getType(itemRef));
	    }

	    if (typeRef.kind === TypeKind.NON_NULL) {
	      const nullableRef = typeRef.ofType;

	      if (!nullableRef) {
	        throw new Error('Decorated type deeper than introspection query.');
	      }

	      const nullableType = getType(nullableRef);
	      return new GraphQLNonNull(assertNullableType(nullableType));
	    }

	    return getNamedType(typeRef);
	  }

	  function getNamedType(typeRef) {
	    const typeName = typeRef.name;

	    if (!typeName) {
	      throw new Error(`Unknown type reference: ${inspect$2(typeRef)}.`);
	    }

	    const type = typeMap[typeName];

	    if (!type) {
	      throw new Error(
	        `Invalid or incomplete schema, unknown type: ${typeName}. Ensure that a full introspection query is used in order to build a client schema.`,
	      );
	    }

	    return type;
	  }

	  function getObjectType(typeRef) {
	    return assertObjectType(getNamedType(typeRef));
	  }

	  function getInterfaceType(typeRef) {
	    return assertInterfaceType(getNamedType(typeRef));
	  } // Given a type's introspection result, construct the correct
	  // GraphQLType instance.

	  function buildType(type) {
	    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
	    if (type != null && type.name != null && type.kind != null) {
	      // FIXME: Properly type IntrospectionType, it's a breaking change so fix in v17
	      // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
	      switch (type.kind) {
	        case TypeKind.SCALAR:
	          return buildScalarDef(type);

	        case TypeKind.OBJECT:
	          return buildObjectDef(type);

	        case TypeKind.INTERFACE:
	          return buildInterfaceDef(type);

	        case TypeKind.UNION:
	          return buildUnionDef(type);

	        case TypeKind.ENUM:
	          return buildEnumDef(type);

	        case TypeKind.INPUT_OBJECT:
	          return buildInputObjectDef(type);
	      }
	    }

	    const typeStr = inspect$2(type);
	    throw new Error(
	      `Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${typeStr}.`,
	    );
	  }

	  function buildScalarDef(scalarIntrospection) {
	    return new GraphQLScalarType({
	      name: scalarIntrospection.name,
	      description: scalarIntrospection.description,
	      specifiedByURL: scalarIntrospection.specifiedByURL,
	    });
	  }

	  function buildImplementationsList(implementingIntrospection) {
	    // TODO: Temporary workaround until GraphQL ecosystem will fully support
	    // 'interfaces' on interface types.
	    if (
	      implementingIntrospection.interfaces === null &&
	      implementingIntrospection.kind === TypeKind.INTERFACE
	    ) {
	      return [];
	    }

	    if (!implementingIntrospection.interfaces) {
	      const implementingIntrospectionStr = inspect$2(implementingIntrospection);
	      throw new Error(
	        `Introspection result missing interfaces: ${implementingIntrospectionStr}.`,
	      );
	    }

	    return implementingIntrospection.interfaces.map(getInterfaceType);
	  }

	  function buildObjectDef(objectIntrospection) {
	    return new GraphQLObjectType({
	      name: objectIntrospection.name,
	      description: objectIntrospection.description,
	      interfaces: () => buildImplementationsList(objectIntrospection),
	      fields: () => buildFieldDefMap(objectIntrospection),
	    });
	  }

	  function buildInterfaceDef(interfaceIntrospection) {
	    return new GraphQLInterfaceType({
	      name: interfaceIntrospection.name,
	      description: interfaceIntrospection.description,
	      interfaces: () => buildImplementationsList(interfaceIntrospection),
	      fields: () => buildFieldDefMap(interfaceIntrospection),
	    });
	  }

	  function buildUnionDef(unionIntrospection) {
	    if (!unionIntrospection.possibleTypes) {
	      const unionIntrospectionStr = inspect$2(unionIntrospection);
	      throw new Error(
	        `Introspection result missing possibleTypes: ${unionIntrospectionStr}.`,
	      );
	    }

	    return new GraphQLUnionType({
	      name: unionIntrospection.name,
	      description: unionIntrospection.description,
	      types: () => unionIntrospection.possibleTypes.map(getObjectType),
	    });
	  }

	  function buildEnumDef(enumIntrospection) {
	    if (!enumIntrospection.enumValues) {
	      const enumIntrospectionStr = inspect$2(enumIntrospection);
	      throw new Error(
	        `Introspection result missing enumValues: ${enumIntrospectionStr}.`,
	      );
	    }

	    return new GraphQLEnumType({
	      name: enumIntrospection.name,
	      description: enumIntrospection.description,
	      values: keyValMap(
	        enumIntrospection.enumValues,
	        (valueIntrospection) => valueIntrospection.name,
	        (valueIntrospection) => ({
	          description: valueIntrospection.description,
	          deprecationReason: valueIntrospection.deprecationReason,
	        }),
	      ),
	    });
	  }

	  function buildInputObjectDef(inputObjectIntrospection) {
	    if (!inputObjectIntrospection.inputFields) {
	      const inputObjectIntrospectionStr = inspect$2(inputObjectIntrospection);
	      throw new Error(
	        `Introspection result missing inputFields: ${inputObjectIntrospectionStr}.`,
	      );
	    }

	    return new GraphQLInputObjectType({
	      name: inputObjectIntrospection.name,
	      description: inputObjectIntrospection.description,
	      fields: () => buildInputValueDefMap(inputObjectIntrospection.inputFields),
	    });
	  }

	  function buildFieldDefMap(typeIntrospection) {
	    if (!typeIntrospection.fields) {
	      throw new Error(
	        `Introspection result missing fields: ${inspect$2(typeIntrospection)}.`,
	      );
	    }

	    return keyValMap(
	      typeIntrospection.fields,
	      (fieldIntrospection) => fieldIntrospection.name,
	      buildField,
	    );
	  }

	  function buildField(fieldIntrospection) {
	    const type = getType(fieldIntrospection.type);

	    if (!isOutputType(type)) {
	      const typeStr = inspect$2(type);
	      throw new Error(
	        `Introspection must provide output type for fields, but received: ${typeStr}.`,
	      );
	    }

	    if (!fieldIntrospection.args) {
	      const fieldIntrospectionStr = inspect$2(fieldIntrospection);
	      throw new Error(
	        `Introspection result missing field args: ${fieldIntrospectionStr}.`,
	      );
	    }

	    return {
	      description: fieldIntrospection.description,
	      deprecationReason: fieldIntrospection.deprecationReason,
	      type,
	      args: buildInputValueDefMap(fieldIntrospection.args),
	    };
	  }

	  function buildInputValueDefMap(inputValueIntrospections) {
	    return keyValMap(
	      inputValueIntrospections,
	      (inputValue) => inputValue.name,
	      buildInputValue,
	    );
	  }

	  function buildInputValue(inputValueIntrospection) {
	    const type = getType(inputValueIntrospection.type);

	    if (!isInputType(type)) {
	      const typeStr = inspect$2(type);
	      throw new Error(
	        `Introspection must provide input type for arguments, but received: ${typeStr}.`,
	      );
	    }

	    const defaultValue =
	      inputValueIntrospection.defaultValue != null
	        ? valueFromAST$1(parseValue(inputValueIntrospection.defaultValue), type)
	        : undefined;
	    return {
	      description: inputValueIntrospection.description,
	      type,
	      defaultValue,
	      deprecationReason: inputValueIntrospection.deprecationReason,
	    };
	  }

	  function buildDirective(directiveIntrospection) {
	    if (!directiveIntrospection.args) {
	      const directiveIntrospectionStr = inspect$2(directiveIntrospection);
	      throw new Error(
	        `Introspection result missing directive args: ${directiveIntrospectionStr}.`,
	      );
	    }

	    if (!directiveIntrospection.locations) {
	      const directiveIntrospectionStr = inspect$2(directiveIntrospection);
	      throw new Error(
	        `Introspection result missing directive locations: ${directiveIntrospectionStr}.`,
	      );
	    }

	    return new GraphQLDirective({
	      name: directiveIntrospection.name,
	      description: directiveIntrospection.description,
	      isRepeatable: directiveIntrospection.isRepeatable,
	      locations: directiveIntrospection.locations.slice(),
	      args: buildInputValueDefMap(directiveIntrospection.args),
	    });
	  }
	}

	/**
	 * Produces a new schema given an existing schema and a document which may
	 * contain GraphQL type extensions and definitions. The original schema will
	 * remain unaltered.
	 *
	 * Because a schema represents a graph of references, a schema cannot be
	 * extended without effectively making an entire copy. We do not know until it's
	 * too late if subgraphs remain unchanged.
	 *
	 * This algorithm copies the provided schema, applying extensions while
	 * producing the copy. The original schema remains unaltered.
	 */
	function extendSchema(schema, documentAST, options) {
	  assertSchema(schema);
	  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||
	    devAssert(false, 'Must provide valid Document AST.');

	  if (
	    (options === null || options === void 0 ? void 0 : options.assumeValid) !==
	      true &&
	    (options === null || options === void 0
	      ? void 0
	      : options.assumeValidSDL) !== true
	  ) {
	    assertValidSDLExtension(documentAST, schema);
	  }

	  const schemaConfig = schema.toConfig();
	  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);
	  return schemaConfig === extendedConfig
	    ? schema
	    : new GraphQLSchema(extendedConfig);
	}
	/**
	 * @internal
	 */

	function extendSchemaImpl(schemaConfig, documentAST, options) {
	  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;

	  // Collect the type definitions and extensions found in the document.
	  const typeDefs = [];
	  const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can
	  // have the same name. For example, a type named "skip".

	  const directiveDefs = [];
	  let schemaDef; // Schema extensions are collected which may add additional operation types.

	  const schemaExtensions = [];

	  for (const def of documentAST.definitions) {
	    if (def.kind === Kind.SCHEMA_DEFINITION) {
	      schemaDef = def;
	    } else if (def.kind === Kind.SCHEMA_EXTENSION) {
	      schemaExtensions.push(def);
	    } else if (isTypeDefinitionNode(def)) {
	      typeDefs.push(def);
	    } else if (isTypeExtensionNode(def)) {
	      const extendedTypeName = def.name.value;
	      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];
	      typeExtensionsMap[extendedTypeName] = existingTypeExtensions
	        ? existingTypeExtensions.concat([def])
	        : [def];
	    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {
	      directiveDefs.push(def);
	    }
	  } // If this document contains no new types, extensions, or directives then
	  // return the same unmodified GraphQLSchema instance.

	  if (
	    Object.keys(typeExtensionsMap).length === 0 &&
	    typeDefs.length === 0 &&
	    directiveDefs.length === 0 &&
	    schemaExtensions.length === 0 &&
	    schemaDef == null
	  ) {
	    return schemaConfig;
	  }

	  const typeMap = Object.create(null);

	  for (const existingType of schemaConfig.types) {
	    typeMap[existingType.name] = extendNamedType(existingType);
	  }

	  for (const typeNode of typeDefs) {
	    var _stdTypeMap$name;

	    const name = typeNode.name.value;
	    typeMap[name] =
	      (_stdTypeMap$name = stdTypeMap[name]) !== null &&
	      _stdTypeMap$name !== void 0
	        ? _stdTypeMap$name
	        : buildType(typeNode);
	  }

	  const operationTypes = {
	    // Get the extended root operation types.
	    query: schemaConfig.query && replaceNamedType(schemaConfig.query),
	    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),
	    subscription:
	      schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),
	    // Then, incorporate schema definition and all schema extensions.
	    ...(schemaDef && getOperationTypes([schemaDef])),
	    ...getOperationTypes(schemaExtensions),
	  }; // Then produce and return a Schema config with these types.

	  return {
	    description:
	      (_schemaDef = schemaDef) === null || _schemaDef === void 0
	        ? void 0
	        : (_schemaDef$descriptio = _schemaDef.description) === null ||
	          _schemaDef$descriptio === void 0
	        ? void 0
	        : _schemaDef$descriptio.value,
	    ...operationTypes,
	    types: Object.values(typeMap),
	    directives: [
	      ...schemaConfig.directives.map(replaceDirective),
	      ...directiveDefs.map(buildDirective),
	    ],
	    extensions: Object.create(null),
	    astNode:
	      (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0
	        ? _schemaDef2
	        : schemaConfig.astNode,
	    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),
	    assumeValid:
	      (_options$assumeValid =
	        options === null || options === void 0
	          ? void 0
	          : options.assumeValid) !== null && _options$assumeValid !== void 0
	        ? _options$assumeValid
	        : false,
	  }; // Below are functions used for producing this schema that have closed over
	  // this scope and have access to the schema, cache, and newly defined types.

	  function replaceType(type) {
	    if (isListType(type)) {
	      // @ts-expect-error
	      return new GraphQLList(replaceType(type.ofType));
	    }

	    if (isNonNullType(type)) {
	      // @ts-expect-error
	      return new GraphQLNonNull(replaceType(type.ofType));
	    } // @ts-expect-error FIXME

	    return replaceNamedType(type);
	  }

	  function replaceNamedType(type) {
	    // Note: While this could make early assertions to get the correctly
	    // typed values, that would throw immediately while type system
	    // validation with validateSchema() will produce more actionable results.
	    return typeMap[type.name];
	  }

	  function replaceDirective(directive) {
	    const config = directive.toConfig();
	    return new GraphQLDirective({
	      ...config,
	      args: mapValue(config.args, extendArg),
	    });
	  }

	  function extendNamedType(type) {
	    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {
	      // Builtin types are not extended.
	      return type;
	    }

	    if (isScalarType(type)) {
	      return extendScalarType(type);
	    }

	    if (isObjectType(type)) {
	      return extendObjectType(type);
	    }

	    if (isInterfaceType(type)) {
	      return extendInterfaceType(type);
	    }

	    if (isUnionType(type)) {
	      return extendUnionType(type);
	    }

	    if (isEnumType(type)) {
	      return extendEnumType(type);
	    }

	    if (isInputObjectType(type)) {
	      return extendInputObjectType(type);
	    }
	    /* c8 ignore next 3 */
	    // Not reachable, all possible type definition nodes have been considered.

	    invariant(false, 'Unexpected type: ' + inspect$2(type));
	  }

	  function extendInputObjectType(type) {
	    var _typeExtensionsMap$co;

	    const config = type.toConfig();
	    const extensions =
	      (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null &&
	      _typeExtensionsMap$co !== void 0
	        ? _typeExtensionsMap$co
	        : [];
	    return new GraphQLInputObjectType({
	      ...config,
	      fields: () => ({
	        ...mapValue(config.fields, (field) => ({
	          ...field,
	          type: replaceType(field.type),
	        })),
	        ...buildInputFieldMap(extensions),
	      }),
	      extensionASTNodes: config.extensionASTNodes.concat(extensions),
	    });
	  }

	  function extendEnumType(type) {
	    var _typeExtensionsMap$ty;

	    const config = type.toConfig();
	    const extensions =
	      (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null &&
	      _typeExtensionsMap$ty !== void 0
	        ? _typeExtensionsMap$ty
	        : [];
	    return new GraphQLEnumType({
	      ...config,
	      values: { ...config.values, ...buildEnumValueMap(extensions) },
	      extensionASTNodes: config.extensionASTNodes.concat(extensions),
	    });
	  }

	  function extendScalarType(type) {
	    var _typeExtensionsMap$co2;

	    const config = type.toConfig();
	    const extensions =
	      (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null &&
	      _typeExtensionsMap$co2 !== void 0
	        ? _typeExtensionsMap$co2
	        : [];
	    let specifiedByURL = config.specifiedByURL;

	    for (const extensionNode of extensions) {
	      var _getSpecifiedByURL;

	      specifiedByURL =
	        (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null &&
	        _getSpecifiedByURL !== void 0
	          ? _getSpecifiedByURL
	          : specifiedByURL;
	    }

	    return new GraphQLScalarType({
	      ...config,
	      specifiedByURL,
	      extensionASTNodes: config.extensionASTNodes.concat(extensions),
	    });
	  }

	  function extendObjectType(type) {
	    var _typeExtensionsMap$co3;

	    const config = type.toConfig();
	    const extensions =
	      (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null &&
	      _typeExtensionsMap$co3 !== void 0
	        ? _typeExtensionsMap$co3
	        : [];
	    return new GraphQLObjectType({
	      ...config,
	      interfaces: () => [
	        ...type.getInterfaces().map(replaceNamedType),
	        ...buildInterfaces(extensions),
	      ],
	      fields: () => ({
	        ...mapValue(config.fields, extendField),
	        ...buildFieldMap(extensions),
	      }),
	      extensionASTNodes: config.extensionASTNodes.concat(extensions),
	    });
	  }

	  function extendInterfaceType(type) {
	    var _typeExtensionsMap$co4;

	    const config = type.toConfig();
	    const extensions =
	      (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null &&
	      _typeExtensionsMap$co4 !== void 0
	        ? _typeExtensionsMap$co4
	        : [];
	    return new GraphQLInterfaceType({
	      ...config,
	      interfaces: () => [
	        ...type.getInterfaces().map(replaceNamedType),
	        ...buildInterfaces(extensions),
	      ],
	      fields: () => ({
	        ...mapValue(config.fields, extendField),
	        ...buildFieldMap(extensions),
	      }),
	      extensionASTNodes: config.extensionASTNodes.concat(extensions),
	    });
	  }

	  function extendUnionType(type) {
	    var _typeExtensionsMap$co5;

	    const config = type.toConfig();
	    const extensions =
	      (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null &&
	      _typeExtensionsMap$co5 !== void 0
	        ? _typeExtensionsMap$co5
	        : [];
	    return new GraphQLUnionType({
	      ...config,
	      types: () => [
	        ...type.getTypes().map(replaceNamedType),
	        ...buildUnionTypes(extensions),
	      ],
	      extensionASTNodes: config.extensionASTNodes.concat(extensions),
	    });
	  }

	  function extendField(field) {
	    return {
	      ...field,
	      type: replaceType(field.type),
	      args: field.args && mapValue(field.args, extendArg),
	    };
	  }

	  function extendArg(arg) {
	    return { ...arg, type: replaceType(arg.type) };
	  }

	  function getOperationTypes(nodes) {
	    const opTypes = {};

	    for (const node of nodes) {
	      var _node$operationTypes;

	      // FIXME: https://github.com/graphql/graphql-js/issues/2203
	      const operationTypesNodes =
	        /* c8 ignore next */
	        (_node$operationTypes = node.operationTypes) !== null &&
	        _node$operationTypes !== void 0
	          ? _node$operationTypes
	          : [];

	      for (const operationType of operationTypesNodes) {
	        // Note: While this could make early assertions to get the correctly
	        // typed values below, that would throw immediately while type system
	        // validation with validateSchema() will produce more actionable results.
	        // @ts-expect-error
	        opTypes[operationType.operation] = getNamedType(operationType.type);
	      }
	    }

	    return opTypes;
	  }

	  function getNamedType(node) {
	    var _stdTypeMap$name2;

	    const name = node.name.value;
	    const type =
	      (_stdTypeMap$name2 = stdTypeMap[name]) !== null &&
	      _stdTypeMap$name2 !== void 0
	        ? _stdTypeMap$name2
	        : typeMap[name];

	    if (type === undefined) {
	      throw new Error(`Unknown type: "${name}".`);
	    }

	    return type;
	  }

	  function getWrappedType(node) {
	    if (node.kind === Kind.LIST_TYPE) {
	      return new GraphQLList(getWrappedType(node.type));
	    }

	    if (node.kind === Kind.NON_NULL_TYPE) {
	      return new GraphQLNonNull(getWrappedType(node.type));
	    }

	    return getNamedType(node);
	  }

	  function buildDirective(node) {
	    var _node$description;

	    return new GraphQLDirective({
	      name: node.name.value,
	      description:
	        (_node$description = node.description) === null ||
	        _node$description === void 0
	          ? void 0
	          : _node$description.value,
	      // @ts-expect-error
	      locations: node.locations.map(({ value }) => value),
	      isRepeatable: node.repeatable,
	      args: buildArgumentMap(node.arguments),
	      astNode: node,
	    });
	  }

	  function buildFieldMap(nodes) {
	    const fieldConfigMap = Object.create(null);

	    for (const node of nodes) {
	      var _node$fields;

	      // FIXME: https://github.com/graphql/graphql-js/issues/2203
	      const nodeFields =
	        /* c8 ignore next */
	        (_node$fields = node.fields) !== null && _node$fields !== void 0
	          ? _node$fields
	          : [];

	      for (const field of nodeFields) {
	        var _field$description;

	        fieldConfigMap[field.name.value] = {
	          // Note: While this could make assertions to get the correctly typed
	          // value, that would throw immediately while type system validation
	          // with validateSchema() will produce more actionable results.
	          type: getWrappedType(field.type),
	          description:
	            (_field$description = field.description) === null ||
	            _field$description === void 0
	              ? void 0
	              : _field$description.value,
	          args: buildArgumentMap(field.arguments),
	          deprecationReason: getDeprecationReason(field),
	          astNode: field,
	        };
	      }
	    }

	    return fieldConfigMap;
	  }

	  function buildArgumentMap(args) {
	    // FIXME: https://github.com/graphql/graphql-js/issues/2203
	    const argsNodes =
	      /* c8 ignore next */
	      args !== null && args !== void 0 ? args : [];
	    const argConfigMap = Object.create(null);

	    for (const arg of argsNodes) {
	      var _arg$description;

	      // Note: While this could make assertions to get the correctly typed
	      // value, that would throw immediately while type system validation
	      // with validateSchema() will produce more actionable results.
	      const type = getWrappedType(arg.type);
	      argConfigMap[arg.name.value] = {
	        type,
	        description:
	          (_arg$description = arg.description) === null ||
	          _arg$description === void 0
	            ? void 0
	            : _arg$description.value,
	        defaultValue: valueFromAST$1(arg.defaultValue, type),
	        deprecationReason: getDeprecationReason(arg),
	        astNode: arg,
	      };
	    }

	    return argConfigMap;
	  }

	  function buildInputFieldMap(nodes) {
	    const inputFieldMap = Object.create(null);

	    for (const node of nodes) {
	      var _node$fields2;

	      // FIXME: https://github.com/graphql/graphql-js/issues/2203
	      const fieldsNodes =
	        /* c8 ignore next */
	        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0
	          ? _node$fields2
	          : [];

	      for (const field of fieldsNodes) {
	        var _field$description2;

	        // Note: While this could make assertions to get the correctly typed
	        // value, that would throw immediately while type system validation
	        // with validateSchema() will produce more actionable results.
	        const type = getWrappedType(field.type);
	        inputFieldMap[field.name.value] = {
	          type,
	          description:
	            (_field$description2 = field.description) === null ||
	            _field$description2 === void 0
	              ? void 0
	              : _field$description2.value,
	          defaultValue: valueFromAST$1(field.defaultValue, type),
	          deprecationReason: getDeprecationReason(field),
	          astNode: field,
	        };
	      }
	    }

	    return inputFieldMap;
	  }

	  function buildEnumValueMap(nodes) {
	    const enumValueMap = Object.create(null);

	    for (const node of nodes) {
	      var _node$values;

	      // FIXME: https://github.com/graphql/graphql-js/issues/2203
	      const valuesNodes =
	        /* c8 ignore next */
	        (_node$values = node.values) !== null && _node$values !== void 0
	          ? _node$values
	          : [];

	      for (const value of valuesNodes) {
	        var _value$description;

	        enumValueMap[value.name.value] = {
	          description:
	            (_value$description = value.description) === null ||
	            _value$description === void 0
	              ? void 0
	              : _value$description.value,
	          deprecationReason: getDeprecationReason(value),
	          astNode: value,
	        };
	      }
	    }

	    return enumValueMap;
	  }

	  function buildInterfaces(nodes) {
	    // Note: While this could make assertions to get the correctly typed
	    // values below, that would throw immediately while type system
	    // validation with validateSchema() will produce more actionable results.
	    // @ts-expect-error
	    return nodes.flatMap(
	      // FIXME: https://github.com/graphql/graphql-js/issues/2203
	      (node) => {
	        var _node$interfaces$map, _node$interfaces;

	        return (
	          /* c8 ignore next */
	          (_node$interfaces$map =
	            (_node$interfaces = node.interfaces) === null ||
	            _node$interfaces === void 0
	              ? void 0
	              : _node$interfaces.map(getNamedType)) !== null &&
	            _node$interfaces$map !== void 0
	            ? _node$interfaces$map
	            : []
	        );
	      },
	    );
	  }

	  function buildUnionTypes(nodes) {
	    // Note: While this could make assertions to get the correctly typed
	    // values below, that would throw immediately while type system
	    // validation with validateSchema() will produce more actionable results.
	    // @ts-expect-error
	    return nodes.flatMap(
	      // FIXME: https://github.com/graphql/graphql-js/issues/2203
	      (node) => {
	        var _node$types$map, _node$types;

	        return (
	          /* c8 ignore next */
	          (_node$types$map =
	            (_node$types = node.types) === null || _node$types === void 0
	              ? void 0
	              : _node$types.map(getNamedType)) !== null &&
	            _node$types$map !== void 0
	            ? _node$types$map
	            : []
	        );
	      },
	    );
	  }

	  function buildType(astNode) {
	    var _typeExtensionsMap$na;

	    const name = astNode.name.value;
	    const extensionASTNodes =
	      (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null &&
	      _typeExtensionsMap$na !== void 0
	        ? _typeExtensionsMap$na
	        : [];

	    switch (astNode.kind) {
	      case Kind.OBJECT_TYPE_DEFINITION: {
	        var _astNode$description;

	        const allNodes = [astNode, ...extensionASTNodes];
	        return new GraphQLObjectType({
	          name,
	          description:
	            (_astNode$description = astNode.description) === null ||
	            _astNode$description === void 0
	              ? void 0
	              : _astNode$description.value,
	          interfaces: () => buildInterfaces(allNodes),
	          fields: () => buildFieldMap(allNodes),
	          astNode,
	          extensionASTNodes,
	        });
	      }

	      case Kind.INTERFACE_TYPE_DEFINITION: {
	        var _astNode$description2;

	        const allNodes = [astNode, ...extensionASTNodes];
	        return new GraphQLInterfaceType({
	          name,
	          description:
	            (_astNode$description2 = astNode.description) === null ||
	            _astNode$description2 === void 0
	              ? void 0
	              : _astNode$description2.value,
	          interfaces: () => buildInterfaces(allNodes),
	          fields: () => buildFieldMap(allNodes),
	          astNode,
	          extensionASTNodes,
	        });
	      }

	      case Kind.ENUM_TYPE_DEFINITION: {
	        var _astNode$description3;

	        const allNodes = [astNode, ...extensionASTNodes];
	        return new GraphQLEnumType({
	          name,
	          description:
	            (_astNode$description3 = astNode.description) === null ||
	            _astNode$description3 === void 0
	              ? void 0
	              : _astNode$description3.value,
	          values: buildEnumValueMap(allNodes),
	          astNode,
	          extensionASTNodes,
	        });
	      }

	      case Kind.UNION_TYPE_DEFINITION: {
	        var _astNode$description4;

	        const allNodes = [astNode, ...extensionASTNodes];
	        return new GraphQLUnionType({
	          name,
	          description:
	            (_astNode$description4 = astNode.description) === null ||
	            _astNode$description4 === void 0
	              ? void 0
	              : _astNode$description4.value,
	          types: () => buildUnionTypes(allNodes),
	          astNode,
	          extensionASTNodes,
	        });
	      }

	      case Kind.SCALAR_TYPE_DEFINITION: {
	        var _astNode$description5;

	        return new GraphQLScalarType({
	          name,
	          description:
	            (_astNode$description5 = astNode.description) === null ||
	            _astNode$description5 === void 0
	              ? void 0
	              : _astNode$description5.value,
	          specifiedByURL: getSpecifiedByURL(astNode),
	          astNode,
	          extensionASTNodes,
	        });
	      }

	      case Kind.INPUT_OBJECT_TYPE_DEFINITION: {
	        var _astNode$description6;

	        const allNodes = [astNode, ...extensionASTNodes];
	        return new GraphQLInputObjectType({
	          name,
	          description:
	            (_astNode$description6 = astNode.description) === null ||
	            _astNode$description6 === void 0
	              ? void 0
	              : _astNode$description6.value,
	          fields: () => buildInputFieldMap(allNodes),
	          astNode,
	          extensionASTNodes,
	        });
	      }
	    }
	  }
	}
	const stdTypeMap = keyMap(
	  [...specifiedScalarTypes, ...introspectionTypes],
	  (type) => type.name,
	);
	/**
	 * Given a field or enum value node, returns the string value for the
	 * deprecation reason.
	 */

	function getDeprecationReason(node) {
	  const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`

	  return deprecated === null || deprecated === void 0
	    ? void 0
	    : deprecated.reason;
	}
	/**
	 * Given a scalar node, returns the string value for the specifiedByURL.
	 */

	function getSpecifiedByURL(node) {
	  const specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`

	  return specifiedBy === null || specifiedBy === void 0
	    ? void 0
	    : specifiedBy.url;
	}

	/**
	 * This takes the ast of a schema document produced by the parse function in
	 * src/language/parser.js.
	 *
	 * If no schema definition is provided, then it will look for types named Query,
	 * Mutation and Subscription.
	 *
	 * Given that AST it constructs a GraphQLSchema. The resulting schema
	 * has no resolve methods, so execution will use default resolvers.
	 */
	function buildASTSchema(documentAST, options) {
	  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||
	    devAssert(false, 'Must provide valid Document AST.');

	  if (
	    (options === null || options === void 0 ? void 0 : options.assumeValid) !==
	      true &&
	    (options === null || options === void 0
	      ? void 0
	      : options.assumeValidSDL) !== true
	  ) {
	    assertValidSDL(documentAST);
	  }

	  const emptySchemaConfig = {
	    description: undefined,
	    types: [],
	    directives: [],
	    extensions: Object.create(null),
	    extensionASTNodes: [],
	    assumeValid: false,
	  };
	  const config = extendSchemaImpl(emptySchemaConfig, documentAST, options);

	  if (config.astNode == null) {
	    for (const type of config.types) {
	      switch (type.name) {
	        // Note: While this could make early assertions to get the correctly
	        // typed values below, that would throw immediately while type system
	        // validation with validateSchema() will produce more actionable results.
	        case 'Query':
	          // @ts-expect-error validated in `validateSchema`
	          config.query = type;
	          break;

	        case 'Mutation':
	          // @ts-expect-error validated in `validateSchema`
	          config.mutation = type;
	          break;

	        case 'Subscription':
	          // @ts-expect-error validated in `validateSchema`
	          config.subscription = type;
	          break;
	      }
	    }
	  }

	  const directives = [
	    ...config.directives, // If specified directives were not explicitly declared, add them.
	    ...specifiedDirectives.filter((stdDirective) =>
	      config.directives.every(
	        (directive) => directive.name !== stdDirective.name,
	      ),
	    ),
	  ];
	  return new GraphQLSchema({ ...config, directives });
	}
	/**
	 * A helper function to build a GraphQLSchema directly from a source
	 * document.
	 */

	function buildSchema$2(source, options) {
	  const document = parse(source, {
	    noLocation:
	      options === null || options === void 0 ? void 0 : options.noLocation,
	    allowLegacyFragmentVariables:
	      options === null || options === void 0
	        ? void 0
	        : options.allowLegacyFragmentVariables,
	  });
	  return buildASTSchema(document, {
	    assumeValidSDL:
	      options === null || options === void 0 ? void 0 : options.assumeValidSDL,
	    assumeValid:
	      options === null || options === void 0 ? void 0 : options.assumeValid,
	  });
	}

	/**
	 * Sort GraphQLSchema.
	 *
	 * This function returns a sorted copy of the given GraphQLSchema.
	 */

	function lexicographicSortSchema(schema) {
	  const schemaConfig = schema.toConfig();
	  const typeMap = keyValMap(
	    sortByName(schemaConfig.types),
	    (type) => type.name,
	    sortNamedType,
	  );
	  return new GraphQLSchema({
	    ...schemaConfig,
	    types: Object.values(typeMap),
	    directives: sortByName(schemaConfig.directives).map(sortDirective),
	    query: replaceMaybeType(schemaConfig.query),
	    mutation: replaceMaybeType(schemaConfig.mutation),
	    subscription: replaceMaybeType(schemaConfig.subscription),
	  });

	  function replaceType(type) {
	    if (isListType(type)) {
	      // @ts-expect-error
	      return new GraphQLList(replaceType(type.ofType));
	    } else if (isNonNullType(type)) {
	      // @ts-expect-error
	      return new GraphQLNonNull(replaceType(type.ofType));
	    } // @ts-expect-error FIXME: TS Conversion

	    return replaceNamedType(type);
	  }

	  function replaceNamedType(type) {
	    return typeMap[type.name];
	  }

	  function replaceMaybeType(maybeType) {
	    return maybeType && replaceNamedType(maybeType);
	  }

	  function sortDirective(directive) {
	    const config = directive.toConfig();
	    return new GraphQLDirective({
	      ...config,
	      locations: sortBy(config.locations, (x) => x),
	      args: sortArgs(config.args),
	    });
	  }

	  function sortArgs(args) {
	    return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));
	  }

	  function sortFields(fieldsMap) {
	    return sortObjMap(fieldsMap, (field) => ({
	      ...field,
	      type: replaceType(field.type),
	      args: field.args && sortArgs(field.args),
	    }));
	  }

	  function sortInputFields(fieldsMap) {
	    return sortObjMap(fieldsMap, (field) => ({
	      ...field,
	      type: replaceType(field.type),
	    }));
	  }

	  function sortTypes(array) {
	    return sortByName(array).map(replaceNamedType);
	  }

	  function sortNamedType(type) {
	    if (isScalarType(type) || isIntrospectionType(type)) {
	      return type;
	    }

	    if (isObjectType(type)) {
	      const config = type.toConfig();
	      return new GraphQLObjectType({
	        ...config,
	        interfaces: () => sortTypes(config.interfaces),
	        fields: () => sortFields(config.fields),
	      });
	    }

	    if (isInterfaceType(type)) {
	      const config = type.toConfig();
	      return new GraphQLInterfaceType({
	        ...config,
	        interfaces: () => sortTypes(config.interfaces),
	        fields: () => sortFields(config.fields),
	      });
	    }

	    if (isUnionType(type)) {
	      const config = type.toConfig();
	      return new GraphQLUnionType({
	        ...config,
	        types: () => sortTypes(config.types),
	      });
	    }

	    if (isEnumType(type)) {
	      const config = type.toConfig();
	      return new GraphQLEnumType({
	        ...config,
	        values: sortObjMap(config.values, (value) => value),
	      });
	    }

	    if (isInputObjectType(type)) {
	      const config = type.toConfig();
	      return new GraphQLInputObjectType({
	        ...config,
	        fields: () => sortInputFields(config.fields),
	      });
	    }
	    /* c8 ignore next 3 */
	    // Not reachable, all possible types have been considered.

	    invariant(false, 'Unexpected type: ' + inspect$2(type));
	  }
	}

	function sortObjMap(map, sortValueFn) {
	  const sortedMap = Object.create(null);

	  for (const key of Object.keys(map).sort(naturalCompare)) {
	    sortedMap[key] = sortValueFn(map[key]);
	  }

	  return sortedMap;
	}

	function sortByName(array) {
	  return sortBy(array, (obj) => obj.name);
	}

	function sortBy(array, mapToKey) {
	  return array.slice().sort((obj1, obj2) => {
	    const key1 = mapToKey(obj1);
	    const key2 = mapToKey(obj2);
	    return naturalCompare(key1, key2);
	  });
	}

	function printSchema(schema) {
	  return printFilteredSchema(
	    schema,
	    (n) => !isSpecifiedDirective(n),
	    isDefinedType,
	  );
	}
	function printIntrospectionSchema(schema) {
	  return printFilteredSchema(schema, isSpecifiedDirective, isIntrospectionType);
	}

	function isDefinedType(type) {
	  return !isSpecifiedScalarType(type) && !isIntrospectionType(type);
	}

	function printFilteredSchema(schema, directiveFilter, typeFilter) {
	  const directives = schema.getDirectives().filter(directiveFilter);
	  const types = Object.values(schema.getTypeMap()).filter(typeFilter);
	  return [
	    printSchemaDefinition(schema),
	    ...directives.map((directive) => printDirective(directive)),
	    ...types.map((type) => printType(type)),
	  ]
	    .filter(Boolean)
	    .join('\n\n');
	}

	function printSchemaDefinition(schema) {
	  if (schema.description == null && isSchemaOfCommonNames(schema)) {
	    return;
	  }

	  const operationTypes = [];
	  const queryType = schema.getQueryType();

	  if (queryType) {
	    operationTypes.push(`  query: ${queryType.name}`);
	  }

	  const mutationType = schema.getMutationType();

	  if (mutationType) {
	    operationTypes.push(`  mutation: ${mutationType.name}`);
	  }

	  const subscriptionType = schema.getSubscriptionType();

	  if (subscriptionType) {
	    operationTypes.push(`  subscription: ${subscriptionType.name}`);
	  }

	  return printDescription(schema) + `schema {\n${operationTypes.join('\n')}\n}`;
	}
	/**
	 * GraphQL schema define root types for each type of operation. These types are
	 * the same as any other type and can be named in any manner, however there is
	 * a common naming convention:
	 *
	 * ```graphql
	 *   schema {
	 *     query: Query
	 *     mutation: Mutation
	 *     subscription: Subscription
	 *   }
	 * ```
	 *
	 * When using this naming convention, the schema description can be omitted.
	 */

	function isSchemaOfCommonNames(schema) {
	  const queryType = schema.getQueryType();

	  if (queryType && queryType.name !== 'Query') {
	    return false;
	  }

	  const mutationType = schema.getMutationType();

	  if (mutationType && mutationType.name !== 'Mutation') {
	    return false;
	  }

	  const subscriptionType = schema.getSubscriptionType();

	  if (subscriptionType && subscriptionType.name !== 'Subscription') {
	    return false;
	  }

	  return true;
	}

	function printType(type) {
	  if (isScalarType(type)) {
	    return printScalar(type);
	  }

	  if (isObjectType(type)) {
	    return printObject(type);
	  }

	  if (isInterfaceType(type)) {
	    return printInterface(type);
	  }

	  if (isUnionType(type)) {
	    return printUnion(type);
	  }

	  if (isEnumType(type)) {
	    return printEnum(type);
	  }

	  if (isInputObjectType(type)) {
	    return printInputObject(type);
	  }
	  /* c8 ignore next 3 */
	  // Not reachable, all possible types have been considered.

	  invariant(false, 'Unexpected type: ' + inspect$2(type));
	}

	function printScalar(type) {
	  return (
	    printDescription(type) + `scalar ${type.name}` + printSpecifiedByURL(type)
	  );
	}

	function printImplementedInterfaces(type) {
	  const interfaces = type.getInterfaces();
	  return interfaces.length
	    ? ' implements ' + interfaces.map((i) => i.name).join(' & ')
	    : '';
	}

	function printObject(type) {
	  return (
	    printDescription(type) +
	    `type ${type.name}` +
	    printImplementedInterfaces(type) +
	    printFields(type)
	  );
	}

	function printInterface(type) {
	  return (
	    printDescription(type) +
	    `interface ${type.name}` +
	    printImplementedInterfaces(type) +
	    printFields(type)
	  );
	}

	function printUnion(type) {
	  const types = type.getTypes();
	  const possibleTypes = types.length ? ' = ' + types.join(' | ') : '';
	  return printDescription(type) + 'union ' + type.name + possibleTypes;
	}

	function printEnum(type) {
	  const values = type
	    .getValues()
	    .map(
	      (value, i) =>
	        printDescription(value, '  ', !i) +
	        '  ' +
	        value.name +
	        printDeprecated(value.deprecationReason),
	    );
	  return printDescription(type) + `enum ${type.name}` + printBlock(values);
	}

	function printInputObject(type) {
	  const fields = Object.values(type.getFields()).map(
	    (f, i) => printDescription(f, '  ', !i) + '  ' + printInputValue(f),
	  );
	  return printDescription(type) + `input ${type.name}` + printBlock(fields);
	}

	function printFields(type) {
	  const fields = Object.values(type.getFields()).map(
	    (f, i) =>
	      printDescription(f, '  ', !i) +
	      '  ' +
	      f.name +
	      printArgs(f.args, '  ') +
	      ': ' +
	      String(f.type) +
	      printDeprecated(f.deprecationReason),
	  );
	  return printBlock(fields);
	}

	function printBlock(items) {
	  return items.length !== 0 ? ' {\n' + items.join('\n') + '\n}' : '';
	}

	function printArgs(args, indentation = '') {
	  if (args.length === 0) {
	    return '';
	  } // If every arg does not have a description, print them on one line.

	  if (args.every((arg) => !arg.description)) {
	    return '(' + args.map(printInputValue).join(', ') + ')';
	  }

	  return (
	    '(\n' +
	    args
	      .map(
	        (arg, i) =>
	          printDescription(arg, '  ' + indentation, !i) +
	          '  ' +
	          indentation +
	          printInputValue(arg),
	      )
	      .join('\n') +
	    '\n' +
	    indentation +
	    ')'
	  );
	}

	function printInputValue(arg) {
	  const defaultAST = astFromValue(arg.defaultValue, arg.type);
	  let argDecl = arg.name + ': ' + String(arg.type);

	  if (defaultAST) {
	    argDecl += ` = ${print$1(defaultAST)}`;
	  }

	  return argDecl + printDeprecated(arg.deprecationReason);
	}

	function printDirective(directive) {
	  return (
	    printDescription(directive) +
	    'directive @' +
	    directive.name +
	    printArgs(directive.args) +
	    (directive.isRepeatable ? ' repeatable' : '') +
	    ' on ' +
	    directive.locations.join(' | ')
	  );
	}

	function printDeprecated(reason) {
	  if (reason == null) {
	    return '';
	  }

	  if (reason !== DEFAULT_DEPRECATION_REASON) {
	    const astValue = print$1({
	      kind: Kind.STRING,
	      value: reason,
	    });
	    return ` @deprecated(reason: ${astValue})`;
	  }

	  return ' @deprecated';
	}

	function printSpecifiedByURL(scalar) {
	  if (scalar.specifiedByURL == null) {
	    return '';
	  }

	  const astValue = print$1({
	    kind: Kind.STRING,
	    value: scalar.specifiedByURL,
	  });
	  return ` @specifiedBy(url: ${astValue})`;
	}

	function printDescription(def, indentation = '', firstInBlock = true) {
	  const { description } = def;

	  if (description == null) {
	    return '';
	  }

	  const blockString = print$1({
	    kind: Kind.STRING,
	    value: description,
	    block: isPrintableAsBlockString(description),
	  });
	  const prefix =
	    indentation && !firstInBlock ? '\n' + indentation : indentation;
	  return prefix + blockString.replace(/\n/g, '\n' + indentation) + '\n';
	}

	/**
	 * Provided a collection of ASTs, presumably each from different files,
	 * concatenate the ASTs together into batched AST, useful for validating many
	 * GraphQL source files which together represent one conceptual application.
	 */

	function concatAST(documents) {
	  const definitions = [];

	  for (const doc of documents) {
	    definitions.push(...doc.definitions);
	  }

	  return {
	    kind: Kind.DOCUMENT,
	    definitions,
	  };
	}

	/**
	 * separateOperations accepts a single AST document which may contain many
	 * operations and fragments and returns a collection of AST documents each of
	 * which contains a single operation as well the fragment definitions it
	 * refers to.
	 */

	function separateOperations(documentAST) {
	  const operations = [];
	  const depGraph = Object.create(null); // Populate metadata and build a dependency graph.

	  for (const definitionNode of documentAST.definitions) {
	    switch (definitionNode.kind) {
	      case Kind.OPERATION_DEFINITION:
	        operations.push(definitionNode);
	        break;

	      case Kind.FRAGMENT_DEFINITION:
	        depGraph[definitionNode.name.value] = collectDependencies(
	          definitionNode.selectionSet,
	        );
	        break;
	    }
	  } // For each operation, produce a new synthesized AST which includes only what
	  // is necessary for completing that operation.

	  const separatedDocumentASTs = Object.create(null);

	  for (const operation of operations) {
	    const dependencies = new Set();

	    for (const fragmentName of collectDependencies(operation.selectionSet)) {
	      collectTransitiveDependencies(dependencies, depGraph, fragmentName);
	    } // Provides the empty string for anonymous operations.

	    const operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted
	    // to retain the same order as the original document.

	    separatedDocumentASTs[operationName] = {
	      kind: Kind.DOCUMENT,
	      definitions: documentAST.definitions.filter(
	        (node) =>
	          node === operation ||
	          (node.kind === Kind.FRAGMENT_DEFINITION &&
	            dependencies.has(node.name.value)),
	      ),
	    };
	  }

	  return separatedDocumentASTs;
	}

	// From a dependency graph, collects a list of transitive dependencies by
	// recursing through a dependency graph.
	function collectTransitiveDependencies(collected, depGraph, fromName) {
	  if (!collected.has(fromName)) {
	    collected.add(fromName);
	    const immediateDeps = depGraph[fromName];

	    if (immediateDeps !== undefined) {
	      for (const toName of immediateDeps) {
	        collectTransitiveDependencies(collected, depGraph, toName);
	      }
	    }
	  }
	}

	function collectDependencies(selectionSet) {
	  const dependencies = [];
	  visit(selectionSet, {
	    FragmentSpread(node) {
	      dependencies.push(node.name.value);
	    },
	  });
	  return dependencies;
	}

	/**
	 * Strips characters that are not significant to the validity or execution
	 * of a GraphQL document:
	 *   - UnicodeBOM
	 *   - WhiteSpace
	 *   - LineTerminator
	 *   - Comment
	 *   - Comma
	 *   - BlockString indentation
	 *
	 * Note: It is required to have a delimiter character between neighboring
	 * non-punctuator tokens and this function always uses single space as delimiter.
	 *
	 * It is guaranteed that both input and output documents if parsed would result
	 * in the exact same AST except for nodes location.
	 *
	 * Warning: It is guaranteed that this function will always produce stable results.
	 * However, it's not guaranteed that it will stay the same between different
	 * releases due to bugfixes or changes in the GraphQL specification.
	 *
	 * Query example:
	 *
	 * ```graphql
	 * query SomeQuery($foo: String!, $bar: String) {
	 *   someField(foo: $foo, bar: $bar) {
	 *     a
	 *     b {
	 *       c
	 *       d
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * Becomes:
	 *
	 * ```graphql
	 * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}
	 * ```
	 *
	 * SDL example:
	 *
	 * ```graphql
	 * """
	 * Type description
	 * """
	 * type Foo {
	 *   """
	 *   Field description
	 *   """
	 *   bar: String
	 * }
	 * ```
	 *
	 * Becomes:
	 *
	 * ```graphql
	 * """Type description""" type Foo{"""Field description""" bar:String}
	 * ```
	 */

	function stripIgnoredCharacters(source) {
	  const sourceObj = isSource(source) ? source : new Source(source);
	  const body = sourceObj.body;
	  const lexer = new Lexer(sourceObj);
	  let strippedBody = '';
	  let wasLastAddedTokenNonPunctuator = false;

	  while (lexer.advance().kind !== TokenKind.EOF) {
	    const currentToken = lexer.token;
	    const tokenKind = currentToken.kind;
	    /**
	     * Every two non-punctuator tokens should have space between them.
	     * Also prevent case of non-punctuator token following by spread resulting
	     * in invalid token (e.g. `1...` is invalid Float token).
	     */

	    const isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);

	    if (wasLastAddedTokenNonPunctuator) {
	      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {
	        strippedBody += ' ';
	      }
	    }

	    const tokenBody = body.slice(currentToken.start, currentToken.end);

	    if (tokenKind === TokenKind.BLOCK_STRING) {
	      strippedBody += printBlockString(currentToken.value, {
	        minimize: true,
	      });
	    } else {
	      strippedBody += tokenBody;
	    }

	    wasLastAddedTokenNonPunctuator = isNonPunctuator;
	  }

	  return strippedBody;
	}

	/* c8 ignore start */

	/**
	 * Upholds the spec rules about naming.
	 * @deprecated Please use `assertName` instead. Will be removed in v17
	 */

	function assertValidName(name) {
	  const error = isValidNameError(name);

	  if (error) {
	    throw error;
	  }

	  return name;
	}
	/**
	 * Returns an Error if a name is invalid.
	 * @deprecated Please use `assertName` instead. Will be removed in v17
	 */

	function isValidNameError(name) {
	  typeof name === 'string' || devAssert(false, 'Expected name to be a string.');

	  if (name.startsWith('__')) {
	    return new GraphQLError(
	      `Name "${name}" must not begin with "__", which is reserved by GraphQL introspection.`,
	    );
	  }

	  try {
	    assertName(name);
	  } catch (error) {
	    return error;
	  }
	}
	/* c8 ignore stop */

	let BreakingChangeType;

	(function (BreakingChangeType) {
	  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';
	  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';
	  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';
	  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';
	  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] =
	    'REQUIRED_INPUT_FIELD_ADDED';
	  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] =
	    'IMPLEMENTED_INTERFACE_REMOVED';
	  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';
	  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';
	  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';
	  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';
	  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';
	  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';
	  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';
	  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] =
	    'REQUIRED_DIRECTIVE_ARG_ADDED';
	  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] =
	    'DIRECTIVE_REPEATABLE_REMOVED';
	  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] =
	    'DIRECTIVE_LOCATION_REMOVED';
	})(BreakingChangeType || (BreakingChangeType = {}));

	let DangerousChangeType;

	(function (DangerousChangeType) {
	  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';
	  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';
	  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] =
	    'OPTIONAL_INPUT_FIELD_ADDED';
	  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';
	  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] =
	    'IMPLEMENTED_INTERFACE_ADDED';
	  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';
	})(DangerousChangeType || (DangerousChangeType = {}));

	/**
	 * Given two schemas, returns an Array containing descriptions of all the types
	 * of breaking changes covered by the other functions down below.
	 */
	function findBreakingChanges(oldSchema, newSchema) {
	  // @ts-expect-error
	  return findSchemaChanges(oldSchema, newSchema).filter(
	    (change) => change.type in BreakingChangeType,
	  );
	}
	/**
	 * Given two schemas, returns an Array containing descriptions of all the types
	 * of potentially dangerous changes covered by the other functions down below.
	 */

	function findDangerousChanges(oldSchema, newSchema) {
	  // @ts-expect-error
	  return findSchemaChanges(oldSchema, newSchema).filter(
	    (change) => change.type in DangerousChangeType,
	  );
	}

	function findSchemaChanges(oldSchema, newSchema) {
	  return [
	    ...findTypeChanges(oldSchema, newSchema),
	    ...findDirectiveChanges(oldSchema, newSchema),
	  ];
	}

	function findDirectiveChanges(oldSchema, newSchema) {
	  const schemaChanges = [];
	  const directivesDiff = diff(
	    oldSchema.getDirectives(),
	    newSchema.getDirectives(),
	  );

	  for (const oldDirective of directivesDiff.removed) {
	    schemaChanges.push({
	      type: BreakingChangeType.DIRECTIVE_REMOVED,
	      description: `${oldDirective.name} was removed.`,
	    });
	  }

	  for (const [oldDirective, newDirective] of directivesDiff.persisted) {
	    const argsDiff = diff(oldDirective.args, newDirective.args);

	    for (const newArg of argsDiff.added) {
	      if (isRequiredArgument(newArg)) {
	        schemaChanges.push({
	          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,
	          description: `A required arg ${newArg.name} on directive ${oldDirective.name} was added.`,
	        });
	      }
	    }

	    for (const oldArg of argsDiff.removed) {
	      schemaChanges.push({
	        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
	        description: `${oldArg.name} was removed from ${oldDirective.name}.`,
	      });
	    }

	    if (oldDirective.isRepeatable && !newDirective.isRepeatable) {
	      schemaChanges.push({
	        type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,
	        description: `Repeatable flag was removed from ${oldDirective.name}.`,
	      });
	    }

	    for (const location of oldDirective.locations) {
	      if (!newDirective.locations.includes(location)) {
	        schemaChanges.push({
	          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
	          description: `${location} was removed from ${oldDirective.name}.`,
	        });
	      }
	    }
	  }

	  return schemaChanges;
	}

	function findTypeChanges(oldSchema, newSchema) {
	  const schemaChanges = [];
	  const typesDiff = diff(
	    Object.values(oldSchema.getTypeMap()),
	    Object.values(newSchema.getTypeMap()),
	  );

	  for (const oldType of typesDiff.removed) {
	    schemaChanges.push({
	      type: BreakingChangeType.TYPE_REMOVED,
	      description: isSpecifiedScalarType(oldType)
	        ? `Standard scalar ${oldType.name} was removed because it is not referenced anymore.`
	        : `${oldType.name} was removed.`,
	    });
	  }

	  for (const [oldType, newType] of typesDiff.persisted) {
	    if (isEnumType(oldType) && isEnumType(newType)) {
	      schemaChanges.push(...findEnumTypeChanges(oldType, newType));
	    } else if (isUnionType(oldType) && isUnionType(newType)) {
	      schemaChanges.push(...findUnionTypeChanges(oldType, newType));
	    } else if (isInputObjectType(oldType) && isInputObjectType(newType)) {
	      schemaChanges.push(...findInputObjectTypeChanges(oldType, newType));
	    } else if (isObjectType(oldType) && isObjectType(newType)) {
	      schemaChanges.push(
	        ...findFieldChanges(oldType, newType),
	        ...findImplementedInterfacesChanges(oldType, newType),
	      );
	    } else if (isInterfaceType(oldType) && isInterfaceType(newType)) {
	      schemaChanges.push(
	        ...findFieldChanges(oldType, newType),
	        ...findImplementedInterfacesChanges(oldType, newType),
	      );
	    } else if (oldType.constructor !== newType.constructor) {
	      schemaChanges.push({
	        type: BreakingChangeType.TYPE_CHANGED_KIND,
	        description:
	          `${oldType.name} changed from ` +
	          `${typeKindName(oldType)} to ${typeKindName(newType)}.`,
	      });
	    }
	  }

	  return schemaChanges;
	}

	function findInputObjectTypeChanges(oldType, newType) {
	  const schemaChanges = [];
	  const fieldsDiff = diff(
	    Object.values(oldType.getFields()),
	    Object.values(newType.getFields()),
	  );

	  for (const newField of fieldsDiff.added) {
	    if (isRequiredInputField(newField)) {
	      schemaChanges.push({
	        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
	        description: `A required field ${newField.name} on input type ${oldType.name} was added.`,
	      });
	    } else {
	      schemaChanges.push({
	        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,
	        description: `An optional field ${newField.name} on input type ${oldType.name} was added.`,
	      });
	    }
	  }

	  for (const oldField of fieldsDiff.removed) {
	    schemaChanges.push({
	      type: BreakingChangeType.FIELD_REMOVED,
	      description: `${oldType.name}.${oldField.name} was removed.`,
	    });
	  }

	  for (const [oldField, newField] of fieldsDiff.persisted) {
	    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(
	      oldField.type,
	      newField.type,
	    );

	    if (!isSafe) {
	      schemaChanges.push({
	        type: BreakingChangeType.FIELD_CHANGED_KIND,
	        description:
	          `${oldType.name}.${oldField.name} changed type from ` +
	          `${String(oldField.type)} to ${String(newField.type)}.`,
	      });
	    }
	  }

	  return schemaChanges;
	}

	function findUnionTypeChanges(oldType, newType) {
	  const schemaChanges = [];
	  const possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());

	  for (const newPossibleType of possibleTypesDiff.added) {
	    schemaChanges.push({
	      type: DangerousChangeType.TYPE_ADDED_TO_UNION,
	      description: `${newPossibleType.name} was added to union type ${oldType.name}.`,
	    });
	  }

	  for (const oldPossibleType of possibleTypesDiff.removed) {
	    schemaChanges.push({
	      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
	      description: `${oldPossibleType.name} was removed from union type ${oldType.name}.`,
	    });
	  }

	  return schemaChanges;
	}

	function findEnumTypeChanges(oldType, newType) {
	  const schemaChanges = [];
	  const valuesDiff = diff(oldType.getValues(), newType.getValues());

	  for (const newValue of valuesDiff.added) {
	    schemaChanges.push({
	      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
	      description: `${newValue.name} was added to enum type ${oldType.name}.`,
	    });
	  }

	  for (const oldValue of valuesDiff.removed) {
	    schemaChanges.push({
	      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
	      description: `${oldValue.name} was removed from enum type ${oldType.name}.`,
	    });
	  }

	  return schemaChanges;
	}

	function findImplementedInterfacesChanges(oldType, newType) {
	  const schemaChanges = [];
	  const interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());

	  for (const newInterface of interfacesDiff.added) {
	    schemaChanges.push({
	      type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,
	      description: `${newInterface.name} added to interfaces implemented by ${oldType.name}.`,
	    });
	  }

	  for (const oldInterface of interfacesDiff.removed) {
	    schemaChanges.push({
	      type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,
	      description: `${oldType.name} no longer implements interface ${oldInterface.name}.`,
	    });
	  }

	  return schemaChanges;
	}

	function findFieldChanges(oldType, newType) {
	  const schemaChanges = [];
	  const fieldsDiff = diff(
	    Object.values(oldType.getFields()),
	    Object.values(newType.getFields()),
	  );

	  for (const oldField of fieldsDiff.removed) {
	    schemaChanges.push({
	      type: BreakingChangeType.FIELD_REMOVED,
	      description: `${oldType.name}.${oldField.name} was removed.`,
	    });
	  }

	  for (const [oldField, newField] of fieldsDiff.persisted) {
	    schemaChanges.push(...findArgChanges(oldType, oldField, newField));
	    const isSafe = isChangeSafeForObjectOrInterfaceField(
	      oldField.type,
	      newField.type,
	    );

	    if (!isSafe) {
	      schemaChanges.push({
	        type: BreakingChangeType.FIELD_CHANGED_KIND,
	        description:
	          `${oldType.name}.${oldField.name} changed type from ` +
	          `${String(oldField.type)} to ${String(newField.type)}.`,
	      });
	    }
	  }

	  return schemaChanges;
	}

	function findArgChanges(oldType, oldField, newField) {
	  const schemaChanges = [];
	  const argsDiff = diff(oldField.args, newField.args);

	  for (const oldArg of argsDiff.removed) {
	    schemaChanges.push({
	      type: BreakingChangeType.ARG_REMOVED,
	      description: `${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`,
	    });
	  }

	  for (const [oldArg, newArg] of argsDiff.persisted) {
	    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(
	      oldArg.type,
	      newArg.type,
	    );

	    if (!isSafe) {
	      schemaChanges.push({
	        type: BreakingChangeType.ARG_CHANGED_KIND,
	        description:
	          `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ` +
	          `${String(oldArg.type)} to ${String(newArg.type)}.`,
	      });
	    } else if (oldArg.defaultValue !== undefined) {
	      if (newArg.defaultValue === undefined) {
	        schemaChanges.push({
	          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
	          description: `${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`,
	        });
	      } else {
	        // Since we looking only for client's observable changes we should
	        // compare default values in the same representation as they are
	        // represented inside introspection.
	        const oldValueStr = stringifyValue(oldArg.defaultValue, oldArg.type);
	        const newValueStr = stringifyValue(newArg.defaultValue, newArg.type);

	        if (oldValueStr !== newValueStr) {
	          schemaChanges.push({
	            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
	            description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`,
	          });
	        }
	      }
	    }
	  }

	  for (const newArg of argsDiff.added) {
	    if (isRequiredArgument(newArg)) {
	      schemaChanges.push({
	        type: BreakingChangeType.REQUIRED_ARG_ADDED,
	        description: `A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,
	      });
	    } else {
	      schemaChanges.push({
	        type: DangerousChangeType.OPTIONAL_ARG_ADDED,
	        description: `An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,
	      });
	    }
	  }

	  return schemaChanges;
	}

	function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
	  if (isListType(oldType)) {
	    return (
	      // if they're both lists, make sure the underlying types are compatible
	      (isListType(newType) &&
	        isChangeSafeForObjectOrInterfaceField(
	          oldType.ofType,
	          newType.ofType,
	        )) || // moving from nullable to non-null of the same underlying type is safe
	      (isNonNullType(newType) &&
	        isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))
	    );
	  }

	  if (isNonNullType(oldType)) {
	    // if they're both non-null, make sure the underlying types are compatible
	    return (
	      isNonNullType(newType) &&
	      isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType)
	    );
	  }

	  return (
	    // if they're both named types, see if their names are equivalent
	    (isNamedType(newType) && oldType.name === newType.name) || // moving from nullable to non-null of the same underlying type is safe
	    (isNonNullType(newType) &&
	      isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))
	  );
	}

	function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
	  if (isListType(oldType)) {
	    // if they're both lists, make sure the underlying types are compatible
	    return (
	      isListType(newType) &&
	      isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType)
	    );
	  }

	  if (isNonNullType(oldType)) {
	    return (
	      // if they're both non-null, make sure the underlying types are
	      // compatible
	      (isNonNullType(newType) &&
	        isChangeSafeForInputObjectFieldOrFieldArg(
	          oldType.ofType,
	          newType.ofType,
	        )) || // moving from non-null to nullable of the same underlying type is safe
	      (!isNonNullType(newType) &&
	        isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType))
	    );
	  } // if they're both named types, see if their names are equivalent

	  return isNamedType(newType) && oldType.name === newType.name;
	}

	function typeKindName(type) {
	  if (isScalarType(type)) {
	    return 'a Scalar type';
	  }

	  if (isObjectType(type)) {
	    return 'an Object type';
	  }

	  if (isInterfaceType(type)) {
	    return 'an Interface type';
	  }

	  if (isUnionType(type)) {
	    return 'a Union type';
	  }

	  if (isEnumType(type)) {
	    return 'an Enum type';
	  }

	  if (isInputObjectType(type)) {
	    return 'an Input type';
	  }
	  /* c8 ignore next 3 */
	  // Not reachable, all possible types have been considered.

	  invariant(false, 'Unexpected type: ' + inspect$2(type));
	}

	function stringifyValue(value, type) {
	  const ast = astFromValue(value, type);
	  ast != null || invariant(false);
	  return print$1(sortValueNode(ast));
	}

	function diff(oldArray, newArray) {
	  const added = [];
	  const removed = [];
	  const persisted = [];
	  const oldMap = keyMap(oldArray, ({ name }) => name);
	  const newMap = keyMap(newArray, ({ name }) => name);

	  for (const oldItem of oldArray) {
	    const newItem = newMap[oldItem.name];

	    if (newItem === undefined) {
	      removed.push(oldItem);
	    } else {
	      persisted.push([oldItem, newItem]);
	    }
	  }

	  for (const newItem of newArray) {
	    if (oldMap[newItem.name] === undefined) {
	      added.push(newItem);
	    }
	  }

	  return {
	    added,
	    persisted,
	    removed,
	  };
	}

	/**
	 * GraphQL.js provides a reference implementation for the GraphQL specification
	 * but is also a useful utility for operating on GraphQL files and building
	 * sophisticated tools.
	 *
	 * This primary module exports a general purpose function for fulfilling all
	 * steps of the GraphQL specification in a single operation, but also includes
	 * utilities for every part of the GraphQL specification:
	 *
	 *   - Parsing the GraphQL language.
	 *   - Building a GraphQL type schema.
	 *   - Validating a GraphQL request against a type schema.
	 *   - Executing a GraphQL request against a type schema.
	 *
	 * This also includes utility functions for operating on GraphQL types and
	 * GraphQL documents to facilitate building tools.
	 *
	 * You may also import from each sub-directory directly. For example, the
	 * following two import statements are equivalent:
	 *
	 * ```ts
	 * import { parse } from 'graphql';
	 * import { parse } from 'graphql/language';
	 * ```
	 *
	 * @packageDocumentation
	 */

	var graphql = /*#__PURE__*/Object.freeze({
		__proto__: null,
		version: version$2,
		versionInfo: versionInfo,
		graphql: graphql$1,
		graphqlSync: graphqlSync,
		resolveObjMapThunk: resolveObjMapThunk,
		resolveReadonlyArrayThunk: resolveReadonlyArrayThunk,
		GraphQLSchema: GraphQLSchema,
		GraphQLDirective: GraphQLDirective,
		GraphQLScalarType: GraphQLScalarType,
		GraphQLObjectType: GraphQLObjectType,
		GraphQLInterfaceType: GraphQLInterfaceType,
		GraphQLUnionType: GraphQLUnionType,
		GraphQLEnumType: GraphQLEnumType,
		GraphQLInputObjectType: GraphQLInputObjectType,
		GraphQLList: GraphQLList,
		GraphQLNonNull: GraphQLNonNull,
		specifiedScalarTypes: specifiedScalarTypes,
		GraphQLInt: GraphQLInt,
		GraphQLFloat: GraphQLFloat,
		GraphQLString: GraphQLString,
		GraphQLBoolean: GraphQLBoolean,
		GraphQLID: GraphQLID,
		GRAPHQL_MAX_INT: GRAPHQL_MAX_INT,
		GRAPHQL_MIN_INT: GRAPHQL_MIN_INT,
		specifiedDirectives: specifiedDirectives,
		GraphQLIncludeDirective: GraphQLIncludeDirective,
		GraphQLSkipDirective: GraphQLSkipDirective,
		GraphQLDeprecatedDirective: GraphQLDeprecatedDirective,
		GraphQLSpecifiedByDirective: GraphQLSpecifiedByDirective,
		get TypeKind () { return TypeKind; },
		DEFAULT_DEPRECATION_REASON: DEFAULT_DEPRECATION_REASON,
		introspectionTypes: introspectionTypes,
		__Schema: __Schema,
		__Directive: __Directive,
		__DirectiveLocation: __DirectiveLocation,
		__Type: __Type,
		__Field: __Field,
		__InputValue: __InputValue,
		__EnumValue: __EnumValue,
		__TypeKind: __TypeKind,
		SchemaMetaFieldDef: SchemaMetaFieldDef,
		TypeMetaFieldDef: TypeMetaFieldDef,
		TypeNameMetaFieldDef: TypeNameMetaFieldDef,
		isSchema: isSchema,
		isDirective: isDirective,
		isType: isType,
		isScalarType: isScalarType,
		isObjectType: isObjectType,
		isInterfaceType: isInterfaceType,
		isUnionType: isUnionType,
		isEnumType: isEnumType,
		isInputObjectType: isInputObjectType,
		isListType: isListType,
		isNonNullType: isNonNullType,
		isInputType: isInputType,
		isOutputType: isOutputType,
		isLeafType: isLeafType,
		isCompositeType: isCompositeType,
		isAbstractType: isAbstractType,
		isWrappingType: isWrappingType,
		isNullableType: isNullableType,
		isNamedType: isNamedType,
		isRequiredArgument: isRequiredArgument,
		isRequiredInputField: isRequiredInputField,
		isSpecifiedScalarType: isSpecifiedScalarType,
		isIntrospectionType: isIntrospectionType,
		isSpecifiedDirective: isSpecifiedDirective,
		assertSchema: assertSchema,
		assertDirective: assertDirective,
		assertType: assertType,
		assertScalarType: assertScalarType,
		assertObjectType: assertObjectType,
		assertInterfaceType: assertInterfaceType,
		assertUnionType: assertUnionType,
		assertEnumType: assertEnumType,
		assertInputObjectType: assertInputObjectType,
		assertListType: assertListType,
		assertNonNullType: assertNonNullType,
		assertInputType: assertInputType,
		assertOutputType: assertOutputType,
		assertLeafType: assertLeafType,
		assertCompositeType: assertCompositeType,
		assertAbstractType: assertAbstractType,
		assertWrappingType: assertWrappingType,
		assertNullableType: assertNullableType,
		assertNamedType: assertNamedType,
		getNullableType: getNullableType,
		getNamedType: getNamedType,
		validateSchema: validateSchema$1,
		assertValidSchema: assertValidSchema,
		assertName: assertName,
		assertEnumValueName: assertEnumValueName,
		Token: Token,
		Source: Source,
		Location: Location,
		get OperationTypeNode () { return OperationTypeNode; },
		getLocation: getLocation,
		printLocation: printLocation,
		printSourceLocation: printSourceLocation,
		Lexer: Lexer,
		get TokenKind () { return TokenKind; },
		parse: parse,
		parseValue: parseValue,
		parseConstValue: parseConstValue,
		parseType: parseType,
		print: print$1,
		visit: visit,
		visitInParallel: visitInParallel,
		getVisitFn: getVisitFn,
		getEnterLeaveForKind: getEnterLeaveForKind,
		BREAK: BREAK,
		get Kind () { return Kind; },
		get DirectiveLocation () { return DirectiveLocation; },
		isDefinitionNode: isDefinitionNode,
		isExecutableDefinitionNode: isExecutableDefinitionNode,
		isSelectionNode: isSelectionNode,
		isValueNode: isValueNode,
		isConstValueNode: isConstValueNode,
		isTypeNode: isTypeNode,
		isTypeSystemDefinitionNode: isTypeSystemDefinitionNode,
		isTypeDefinitionNode: isTypeDefinitionNode,
		isTypeSystemExtensionNode: isTypeSystemExtensionNode,
		isTypeExtensionNode: isTypeExtensionNode,
		execute: execute,
		executeSync: executeSync,
		defaultFieldResolver: defaultFieldResolver,
		defaultTypeResolver: defaultTypeResolver,
		responsePathAsArray: pathToArray,
		getVariableValues: getVariableValues,
		getDirectiveValues: getDirectiveValues,
		subscribe: subscribe,
		createSourceEventStream: createSourceEventStream,
		validate: validate$3,
		ValidationContext: ValidationContext,
		specifiedRules: specifiedRules,
		ExecutableDefinitionsRule: ExecutableDefinitionsRule,
		FieldsOnCorrectTypeRule: FieldsOnCorrectTypeRule,
		FragmentsOnCompositeTypesRule: FragmentsOnCompositeTypesRule,
		KnownArgumentNamesRule: KnownArgumentNamesRule,
		KnownDirectivesRule: KnownDirectivesRule,
		KnownFragmentNamesRule: KnownFragmentNamesRule,
		KnownTypeNamesRule: KnownTypeNamesRule,
		LoneAnonymousOperationRule: LoneAnonymousOperationRule,
		NoFragmentCyclesRule: NoFragmentCyclesRule,
		NoUndefinedVariablesRule: NoUndefinedVariablesRule,
		NoUnusedFragmentsRule: NoUnusedFragmentsRule,
		NoUnusedVariablesRule: NoUnusedVariablesRule,
		OverlappingFieldsCanBeMergedRule: OverlappingFieldsCanBeMergedRule,
		PossibleFragmentSpreadsRule: PossibleFragmentSpreadsRule,
		ProvidedRequiredArgumentsRule: ProvidedRequiredArgumentsRule,
		ScalarLeafsRule: ScalarLeafsRule,
		SingleFieldSubscriptionsRule: SingleFieldSubscriptionsRule,
		UniqueArgumentNamesRule: UniqueArgumentNamesRule,
		UniqueDirectivesPerLocationRule: UniqueDirectivesPerLocationRule,
		UniqueFragmentNamesRule: UniqueFragmentNamesRule,
		UniqueInputFieldNamesRule: UniqueInputFieldNamesRule,
		UniqueOperationNamesRule: UniqueOperationNamesRule,
		UniqueVariableNamesRule: UniqueVariableNamesRule,
		ValuesOfCorrectTypeRule: ValuesOfCorrectTypeRule,
		VariablesAreInputTypesRule: VariablesAreInputTypesRule,
		VariablesInAllowedPositionRule: VariablesInAllowedPositionRule,
		LoneSchemaDefinitionRule: LoneSchemaDefinitionRule,
		UniqueOperationTypesRule: UniqueOperationTypesRule,
		UniqueTypeNamesRule: UniqueTypeNamesRule,
		UniqueEnumValueNamesRule: UniqueEnumValueNamesRule,
		UniqueFieldDefinitionNamesRule: UniqueFieldDefinitionNamesRule,
		UniqueArgumentDefinitionNamesRule: UniqueArgumentDefinitionNamesRule,
		UniqueDirectiveNamesRule: UniqueDirectiveNamesRule,
		PossibleTypeExtensionsRule: PossibleTypeExtensionsRule,
		NoDeprecatedCustomRule: NoDeprecatedCustomRule,
		NoSchemaIntrospectionCustomRule: NoSchemaIntrospectionCustomRule,
		GraphQLError: GraphQLError,
		syntaxError: syntaxError,
		locatedError: locatedError,
		printError: printError,
		formatError: formatError$1,
		getIntrospectionQuery: getIntrospectionQuery,
		getOperationAST: getOperationAST,
		getOperationRootType: getOperationRootType,
		introspectionFromSchema: introspectionFromSchema,
		buildClientSchema: buildClientSchema,
		buildASTSchema: buildASTSchema,
		buildSchema: buildSchema$2,
		extendSchema: extendSchema,
		lexicographicSortSchema: lexicographicSortSchema,
		printSchema: printSchema,
		printType: printType,
		printIntrospectionSchema: printIntrospectionSchema,
		typeFromAST: typeFromAST,
		valueFromAST: valueFromAST$1,
		valueFromASTUntyped: valueFromASTUntyped$1,
		astFromValue: astFromValue,
		TypeInfo: TypeInfo,
		visitWithTypeInfo: visitWithTypeInfo,
		coerceInputValue: coerceInputValue,
		concatAST: concatAST,
		separateOperations: separateOperations,
		stripIgnoredCharacters: stripIgnoredCharacters,
		isEqualType: isEqualType,
		isTypeSubTypeOf: isTypeSubTypeOf,
		doTypesOverlap: doTypesOverlap,
		assertValidName: assertValidName,
		isValidNameError: isValidNameError,
		get BreakingChangeType () { return BreakingChangeType; },
		get DangerousChangeType () { return DangerousChangeType; },
		findBreakingChanges: findBreakingChanges,
		findDangerousChanges: findDangerousChanges
	});

	var require$$2$2 = /*@__PURE__*/getAugmentedNamespace(graphql);

	var coreSpec$1 = {};

	var types = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isStrictSubtype = exports.isSubtype = exports.isDirectSubtype = exports.sameType = exports.DEFAULT_SUBTYPING_RULES = exports.ALL_SUBTYPING_RULES = void 0;
	const definitions_1 = definitions;
	exports.ALL_SUBTYPING_RULES = [
	    'direct',
	    'nonNullable_downgrade',
	    'list_upgrade',
	    'list_propagation',
	    'nonNullable_propagation'
	];
	exports.DEFAULT_SUBTYPING_RULES = exports.ALL_SUBTYPING_RULES.filter(r => r !== "list_upgrade");
	function sameType(t1, t2) {
	    if (t1.kind !== t2.kind) {
	        return false;
	    }
	    switch (t1.kind) {
	        case 'ListType':
	            return sameType(t1.ofType, t2.ofType);
	        case 'NonNullType':
	            return sameType(t1.ofType, t2.ofType);
	        default:
	            return t1.name === t2.name;
	    }
	}
	exports.sameType = sameType;
	function isDirectSubtype(type, maybeSubType, unionMembershipTester = (u, m) => u.hasTypeMember(m), implementsInterfaceTester = (m, i) => m.implementsInterface(i)) {
	    if ((0, definitions_1.isUnionType)(type)) {
	        return (0, definitions_1.isObjectType)(maybeSubType) && unionMembershipTester(type, maybeSubType);
	    }
	    return implementsInterfaceTester(maybeSubType, type);
	}
	exports.isDirectSubtype = isDirectSubtype;
	function isSubtype(type, maybeSubType, allowedRules = exports.DEFAULT_SUBTYPING_RULES, unionMembershipTester = (u, m) => u.hasTypeMember(m), implementsInterfaceTester = (m, i) => m.implementsInterface(i)) {
	    return sameType(type, maybeSubType) || isStrictSubtype(type, maybeSubType, allowedRules, unionMembershipTester, implementsInterfaceTester);
	}
	exports.isSubtype = isSubtype;
	function isStrictSubtype(type, maybeSubType, allowedRules = exports.DEFAULT_SUBTYPING_RULES, unionMembershipTester = (u, m) => u.hasTypeMember(m), implementsInterfaceTester = (m, i) => m.implementsInterface(i)) {
	    switch (maybeSubType.kind) {
	        case 'ListType':
	            return allowedRules.includes('list_propagation')
	                && (0, definitions_1.isListType)(type)
	                && isSubtype(type.ofType, maybeSubType.ofType, allowedRules, unionMembershipTester, implementsInterfaceTester);
	        case 'NonNullType':
	            if ((0, definitions_1.isNonNullType)(type)) {
	                return allowedRules.includes('nonNullable_propagation')
	                    && isSubtype(type.ofType, maybeSubType.ofType, allowedRules, unionMembershipTester, implementsInterfaceTester);
	            }
	            return allowedRules.includes('nonNullable_downgrade')
	                && isSubtype(type, maybeSubType.ofType, allowedRules, unionMembershipTester, implementsInterfaceTester);
	        case 'ObjectType':
	        case 'InterfaceType':
	            if ((0, definitions_1.isListType)(type)) {
	                return allowedRules.includes('list_upgrade')
	                    && isSubtype(type.ofType, maybeSubType, allowedRules, unionMembershipTester, implementsInterfaceTester);
	            }
	            return allowedRules.includes('direct')
	                && ((0, definitions_1.isInterfaceType)(type) || (0, definitions_1.isUnionType)(type))
	                && isDirectSubtype(type, maybeSubType, unionMembershipTester, implementsInterfaceTester);
	        default:
	            return (0, definitions_1.isListType)(type)
	                && allowedRules.includes('list_upgrade')
	                && isSubtype(type.ofType, maybeSubType, allowedRules, unionMembershipTester, implementsInterfaceTester);
	    }
	}
	exports.isStrictSubtype = isStrictSubtype;

	}(types));

	var dist$1 = {};

	var schema = {};

	var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(values$1);

	var core = {};

	var error$1 = {};

	Object.defineProperty(error$1, "__esModule", { value: true });
	error$1.err = error$1.GraphQLErrorExt = void 0;
	const graphql_1$a = require$$2$2;
	class GraphQLErrorExt extends graphql_1$a.GraphQLError {
	    constructor(code, message, props) {
	        super(message, props === null || props === void 0 ? void 0 : props.nodes, props === null || props === void 0 ? void 0 : props.source, props === null || props === void 0 ? void 0 : props.positions, props === null || props === void 0 ? void 0 : props.path, props === null || props === void 0 ? void 0 : props.originalError, props === null || props === void 0 ? void 0 : props.extensions);
	        this.code = code;
	        if (props)
	            for (const prop in props) {
	                if (!GraphQLErrorExt.BASE_PROPS.has(prop)) {
	                    this[prop] = props[prop];
	                }
	            }
	        this.name = code;
	    }
	    throw() { throw this; }
	    toString() {
	        let output = `[${this.code}] ${(0, graphql_1$a.printError)(this)}`;
	        const causes = this.causes;
	        if (causes && causes.length) {
	            output += '\ncaused by:';
	            for (const cause of this.causes || []) {
	                if (!cause)
	                    continue;
	                output += '\n\n  - ';
	                output += cause.toString().split('\n').join('\n    ');
	            }
	        }
	        return output;
	    }
	}
	error$1.GraphQLErrorExt = GraphQLErrorExt;
	GraphQLErrorExt.BASE_PROPS = new Set('nodes source positions path originalError extensions'.split(' '));
	function err(code, props) {
	    const message = typeof props === 'string' ? props : props.message;
	    const error = new GraphQLErrorExt(code, message, typeof props === 'string' ? undefined : props);
	    return error;
	}
	error$1.err = err;
	error$1.default = err;

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Cell = exports.ROLLBACK = exports.Core = exports.ErrCheckFailed = exports.ErrEvalStackEmpty = exports.ErrNoData = void 0;
	const error_1 = error$1;
	const ErrNoData = (causes) => (0, error_1.err)('NoData', {
	    message: 'no data',
	    causes
	});
	exports.ErrNoData = ErrNoData;
	const ErrEvalStackEmpty = () => (0, error_1.err)('EvalStackEmpty', {
	    code: 'EvalStackEmpty',
	    message: 'this method must only be called from an evaluator, during evaluation. no evaluation is ongoing.'
	});
	exports.ErrEvalStackEmpty = ErrEvalStackEmpty;
	const ErrCheckFailed = (causes) => (0, error_1.err)('CheckFailed', {
	    message: 'one or more checks failed',
	    causes
	});
	exports.ErrCheckFailed = ErrCheckFailed;
	class Core {
	    constructor(data) {
	        this._cells = new WeakMap;
	        this._stack = [];
	        this._traceStack = [];
	        this._data = data;
	    }
	    get data() { return this._data; }
	    get(fn) {
	        var _a;
	        const cell = this.getCell(fn);
	        this.evaluate(cell, fn);
	        if (!cell.result) {
	            throw (0, exports.ErrNoData)();
	        }
	        if (cell.result.data === undefined) {
	            if (((_a = cell.result.errors) === null || _a === void 0 ? void 0 : _a.length) === 1)
	                throw cell.result.errors[0];
	            throw (0, exports.ErrNoData)(cell.result.errors);
	        }
	        return cell.result.data;
	    }
	    try(fn) {
	        var _a;
	        const cell = this.getCell(fn);
	        this.evaluate(cell, fn);
	        return (_a = cell.result) === null || _a === void 0 ? void 0 : _a.data;
	    }
	    getResult(fn) {
	        const cell = this.getCell(fn);
	        let result = { errors: [] };
	        this.trace(() => {
	            var _a;
	            this.evaluate(cell, fn);
	            result.data = (_a = cell.result) === null || _a === void 0 ? void 0 : _a.data;
	        }, (event, _fn, cellResult) => {
	            if (event === 'end' && cellResult && cellResult.errors)
	                result.errors = result.errors.concat(cellResult.errors);
	        });
	        return result;
	    }
	    check(...fns) {
	        let errors = [];
	        this.trace(() => {
	            for (const fn of fns)
	                this.try(fn);
	        }, (event, _fn, cellResult) => {
	            if (event === 'end' && cellResult && cellResult.errors)
	                errors = errors.concat(cellResult.errors);
	        });
	        if (!errors.length)
	            return this;
	        throw (0, exports.ErrCheckFailed)(errors);
	    }
	    update(update) {
	        this._data = update(this.data);
	    }
	    pure(...passIfChanged) {
	        const { currentCell } = this;
	        currentCell.pure(...passIfChanged);
	    }
	    report(...errors) {
	        const { currentCell } = this;
	        for (const error of errors)
	            currentCell.report(error);
	    }
	    get currentCell() {
	        const top = this._stack[this._stack.length - 1];
	        if (!top)
	            throw (0, exports.ErrEvalStackEmpty)();
	        return top;
	    }
	    get currentTracer() {
	        return this._traceStack[this._traceStack.length - 1];
	    }
	    trace(block, onEvent) {
	        this._traceStack.push(onEvent);
	        try {
	            block();
	        }
	        finally {
	            this._traceStack.pop();
	        }
	    }
	    evaluate(cell, fn) {
	        const tracer = this.currentTracer;
	        this._stack.push(cell);
	        try {
	            try {
	                if (tracer)
	                    tracer('begin', fn, cell.result);
	                cell.evaluate(this, fn);
	            }
	            finally {
	                if (tracer)
	                    tracer('end', fn, cell.result);
	            }
	        }
	        finally {
	            this._stack.pop();
	        }
	    }
	    getCell(fn) {
	        const existing = this._cells.get(fn);
	        if (existing)
	            return existing;
	        const created = new Cell;
	        this._cells.set(fn, created);
	        return created;
	    }
	}
	exports.Core = Core;
	exports.default = Core;
	exports.ROLLBACK = Object.freeze({ ROLLBACK: true });
	class Cell {
	    constructor() {
	        this.status = 'empty';
	        this.result = undefined;
	        this._pendingResult = undefined;
	        this._guards = [];
	        this._nextGuard = 0;
	    }
	    pure(...changed) {
	        const index = this._nextGuard++;
	        const existing = this._guards[index];
	        try {
	            if (!existing)
	                return;
	            if (existing.length !== changed.length)
	                return;
	            let i = existing.length;
	            while (i-- > 0) {
	                if (existing[i] !== changed[i])
	                    return;
	            }
	            throw exports.ROLLBACK;
	        }
	        finally {
	            this._guards[index] = changed;
	        }
	    }
	    report(error) {
	        var _a;
	        const pending = this._pendingResult;
	        if (!pending)
	            throw new Error('cell is not being evaluated');
	        pending.errors = (_a = pending.errors) !== null && _a !== void 0 ? _a : [];
	        pending.errors.push(error);
	    }
	    evaluate(core, fn) {
	        const pending = {};
	        this._pendingResult = pending;
	        const lastStatus = this.status;
	        this.status = 'run';
	        this._nextGuard = 0;
	        let rollback = false;
	        try {
	            pending.data = fn.call(core, core);
	        }
	        catch (err) {
	            if (err === exports.ROLLBACK) {
	                rollback = true;
	            }
	            else {
	                this.report(err);
	            }
	        }
	        finally {
	            this._nextGuard = 0;
	            if (!rollback) {
	                this.result = pending;
	                this.status = 'ready';
	            }
	            else {
	                this.status = lastStatus;
	            }
	            this._pendingResult = undefined;
	        }
	    }
	}
	exports.Cell = Cell;

	}(core));

	var featureUrl = {};

	var version$1 = {};

	(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Version = exports.ErrVersionParse = void 0;
	const error_1 = __importDefault(error$1);
	const ErrVersionParse = (input) => (0, error_1.default)('VersionParse', {
	    message: `expected a version specifier like "v9.8", got "${input}"`,
	    input,
	});
	exports.ErrVersionParse = ErrVersionParse;
	class Version {
	    constructor(major, minor) {
	        this.major = major;
	        this.minor = minor;
	    }
	    static parse(input) {
	        const match = input.match(this.VERSION_RE);
	        if (!match)
	            throw (0, exports.ErrVersionParse)(input);
	        return new this(+match[1], +match[2]);
	    }
	    satisfies(required) {
	        const { major, minor } = this;
	        const { major: rMajor, minor: rMinor } = required;
	        return rMajor == major && (major == 0
	            ? rMinor == minor
	            : rMinor <= minor);
	    }
	    get series() {
	        const { major } = this;
	        return major > 0 ? `${major}.x` : String(this);
	    }
	    toString() {
	        return `v${this.major}.${this.minor}`;
	    }
	    equals(other) {
	        return this.major === other.major && this.minor === other.minor;
	    }
	}
	exports.Version = Version;
	Version.VERSION_RE = /^v(\d+)\.(\d+)$/;
	exports.default = Version;

	}(version$1));

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ErrNoVersion = exports.ErrNoName = exports.ErrNoPath = void 0;
	const url_1 = require$$0__default["default"];
	const version_1 = version$1;
	const error_1 = error$1;
	const ErrNoPath = (url, node) => (0, error_1.err)('NoPath', {
	    message: `feature url does not have a path: ${url}`,
	    url,
	    nodes: node ? [node] : undefined
	});
	exports.ErrNoPath = ErrNoPath;
	const ErrNoName = (url, node) => (0, error_1.err)('NoName', {
	    message: `feature url does not specify a name: ${url}`,
	    url,
	    nodes: node ? [node] : undefined
	});
	exports.ErrNoName = ErrNoName;
	const ErrNoVersion = (url, node) => (0, error_1.err)('NoVersion', {
	    message: `feature url does not specify a version: ${url}`,
	    url,
	    nodes: node ? [node] : undefined
	});
	exports.ErrNoVersion = ErrNoVersion;
	class FeatureUrl {
	    constructor(identity, name, version, element) {
	        this.identity = identity;
	        this.name = name;
	        this.version = version;
	        this.element = element;
	    }
	    static parse(input, node) {
	        const url = new url_1.URL(input);
	        if (!url.pathname || url.pathname === '/')
	            throw (0, exports.ErrNoPath)(url, node);
	        const path = url.pathname.split('/');
	        const verStr = path.pop();
	        if (!verStr)
	            throw (0, exports.ErrNoVersion)(url, node);
	        const version = version_1.Version.parse(verStr);
	        const name = path[path.length - 1];
	        if (!name)
	            throw (0, exports.ErrNoName)(url, node);
	        const element = url.hash ? url.hash.slice(1) : undefined;
	        url.hash = '';
	        url.search = '';
	        url.password = '';
	        url.username = '';
	        url.pathname = path.join('/');
	        return new FeatureUrl(url.toString(), name, version, element);
	    }
	    static decode(node) {
	        return this.parse(node.value, node);
	    }
	    satisfies(requested) {
	        return requested.identity === this.identity &&
	            this.version.satisfies(requested.version);
	    }
	    equals(other) {
	        return this.identity === other.identity &&
	            this.version.equals(other.version);
	    }
	    get url() {
	        return this.element ?
	            `${this.identity}/${this.version}#${this.element}`
	            : `${this.identity}/${this.version}`;
	    }
	    get isDirective() {
	        var _a;
	        return (_a = this.element) === null || _a === void 0 ? void 0 : _a.startsWith('@');
	    }
	    get elementName() {
	        var _a;
	        return this.isDirective ? (_a = this.element) === null || _a === void 0 ? void 0 : _a.slice(1) : this.element;
	    }
	    get base() {
	        if (!this.element)
	            return this;
	        return new FeatureUrl(this.identity, this.name, this.version);
	    }
	    toString() {
	        return this.url;
	    }
	}
	exports.default = FeatureUrl;

	}(featureUrl));

	var features = {};

	var names = {};

	Object.defineProperty(names, "__esModule", { value: true });
	names.getPrefix = void 0;
	function getPrefix(name, sep = '__') {
	    const idx = name.indexOf(sep);
	    if (idx === -1)
	        return [null, name];
	    return [name.substr(0, idx), name.substr(idx + sep.length)];
	}
	names.getPrefix = getPrefix;

	var __importDefault$4 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(features, "__esModule", { value: true });
	features.Features = features.Feature = void 0;
	const error_1 = error$1;
	const feature_url_1 = __importDefault$4(featureUrl);
	const names_1 = names;
	const ErrTooManyFeatureVersions = (features) => (0, error_1.err)('TooManyFeatureVersions', {
	    message: `too many versions of ${features[0].url.identity} at v${features[0].url.version.series}`,
	    features,
	    major: features[0].url.version.major,
	    nodes: features.map(f => f.directive),
	});
	class Feature {
	    constructor(url, name, directive, purpose) {
	        this.url = url;
	        this.name = name;
	        this.directive = directive;
	        this.purpose = purpose;
	    }
	    canonicalName(docName) {
	        const [prefix, base] = (0, names_1.getPrefix)(docName);
	        if (prefix) {
	            if (prefix !== this.name)
	                return null;
	            return `${this.url.name}__${base}`;
	        }
	        if (base !== this.name)
	            return null;
	        return this.url.name;
	    }
	}
	features.Feature = Feature;
	class Features {
	    constructor() {
	        this.features = new Map;
	    }
	    add(feature) {
	        const majors = this.findOrCreateIdentity(feature.url.identity);
	        const { series } = feature.url.version;
	        const existing = majors.get(series);
	        if (existing != null) {
	            existing.push(feature);
	            return;
	        }
	        majors.set(series, [feature]);
	    }
	    find(feature, exact = false) {
	        var _a, _b;
	        feature = typeof feature === 'string' ? feature_url_1.default.parse(feature) : feature;
	        const documentFeature = (_b = (_a = this.features.get(feature.identity)) === null || _a === void 0 ? void 0 : _a.get(feature.version.series)) === null || _b === void 0 ? void 0 : _b[0];
	        if ((exact && (documentFeature === null || documentFeature === void 0 ? void 0 : documentFeature.url.equals(feature))) ||
	            (!exact && (documentFeature === null || documentFeature === void 0 ? void 0 : documentFeature.url.satisfies(feature))))
	            return documentFeature;
	        return null;
	    }
	    documentName(feature, exact = false) {
	        var _a;
	        feature = typeof feature === 'string' ? feature_url_1.default.parse(feature) : feature;
	        const found = this.find(feature, exact);
	        if (!found)
	            return null;
	        const element = feature.isDirective ? (_a = feature.element) === null || _a === void 0 ? void 0 : _a.slice(1) : feature.element;
	        if (!element || feature.isDirective && (element === found.url.name))
	            return found.name;
	        return found.name + '__' + element;
	    }
	    *[Symbol.iterator]() {
	        for (const majors of this.features.values()) {
	            for (const features of majors.values()) {
	                yield* features;
	            }
	        }
	    }
	    validate() {
	        const errors = [];
	        for (const [_, majors] of this.features) {
	            for (const [_, features] of majors) {
	                if (features.length <= 1)
	                    continue;
	                errors.push(ErrTooManyFeatureVersions(features));
	            }
	        }
	        return errors;
	    }
	    findOrCreateIdentity(identity) {
	        const existing = this.features.get(identity);
	        if (existing)
	            return existing;
	        const created = new Map();
	        this.features.set(identity, created);
	        return created;
	    }
	}
	features.Features = Features;
	features.default = Features;

	var is$1 = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.hasDirectives = exports.hasName = exports.isAst = exports.isEmpty = exports.isNonEmpty = exports.asString = exports.isAsString = exports.isTemplate = void 0;
	const knownTemplates = new WeakSet;
	const isTemplate = (args) => knownTemplates.has(args) || !!(Array.isArray(args[0]) &&
	    args[0].every(x => typeof x === 'string') &&
	    args[0].length === args.length &&
	    knownTemplates.add(args[0]));
	exports.isTemplate = isTemplate;
	const isAsString = (args) => (0, exports.isTemplate)(args) || (args.length === 1 && typeof args[0] === 'string');
	exports.isAsString = isAsString;
	function asString(input) {
	    return (!(0, exports.isAsString)(input)
	        ? undefined
	        :
	            (0, exports.isTemplate)(input)
	                ? String.raw(...input)
	                : input[0]);
	}
	exports.asString = asString;
	function isNonEmpty(input) {
	    return !isEmpty(input);
	}
	exports.isNonEmpty = isNonEmpty;
	function isEmpty(input) {
	    return !input.length;
	}
	exports.isEmpty = isEmpty;
	const graphql_1 = require$$2$2;
	function isAst(obj, ...kinds) {
	    return kinds.indexOf(obj === null || obj === void 0 ? void 0 : obj.kind) !== -1;
	}
	exports.isAst = isAst;
	const hasName = (node) => isAst(node === null || node === void 0 ? void 0 : node.name, graphql_1.Kind.NAME);
	exports.hasName = hasName;
	const hasDirectives = (node) => Array.isArray(node === null || node === void 0 ? void 0 : node.directives);
	exports.hasDirectives = hasDirectives;

	}(is$1));

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.names = exports.features = exports.schema = exports.CoreSchema = exports.ErrOverlappingNames = exports.ErrBadFeature = exports.ErrNoCore = exports.ErrNoSchema = exports.ErrExtraSchema = void 0;
	const graphql_1 = require$$2$2;
	const values_1 = require$$1$1;
	const core_1 = __importDefault(core);
	const error_1 = error$1;
	const feature_url_1 = __importDefault(featureUrl);
	const features_1 = __importStar(features);
	const is_1 = is$1;
	const names_1 = names;
	const ErrExtraSchema = (def) => (0, error_1.err)('ExtraSchema', {
	    message: 'extra schema definition ignored',
	    schemaDefinition: def,
	    nodes: [def]
	});
	exports.ErrExtraSchema = ErrExtraSchema;
	const ErrNoSchema = () => (0, error_1.err)('NoSchema', 'no schema definitions found');
	exports.ErrNoSchema = ErrNoSchema;
	const ErrNoCore = (causes) => (0, error_1.err)('NoCore', {
	    message: 'no core feature found',
	    causes
	});
	exports.ErrNoCore = ErrNoCore;
	const ErrBadFeature = (node, ...causes) => (0, error_1.err)('BadFeature', {
	    message: 'bad core feature request',
	    directive: node,
	    nodes: [node],
	    causes
	});
	exports.ErrBadFeature = ErrBadFeature;
	const ErrOverlappingNames = (name, features) => (0, error_1.err)('OverlappingNames', {
	    message: `the name "${name}" is defined by multiple features`,
	    name,
	    features,
	    nodes: features.map(f => f.directive)
	});
	exports.ErrOverlappingNames = ErrOverlappingNames;
	class CoreSchema extends core_1.default {
	    static graphql(parts, ...replacements) {
	        return CoreSchema.fromSource(new graphql_1.Source(String.raw.call(null, parts, ...replacements), '(inline graphql)'));
	    }
	    static fromSource(source) {
	        return new CoreSchema((0, graphql_1.parse)(source));
	    }
	    check(...fns) {
	        if (!fns.length)
	            fns = [features$1, names$1];
	        return super.check(...fns);
	    }
	    get document() { return this.data; }
	    get schema() { return this.get(schema); }
	    get features() { return this.get(features$1); }
	    get names() { return this.get(names$1); }
	    *read(directive, node) {
	        var _a;
	        const url = directive instanceof feature_url_1.default ? directive
	            : typeof directive === 'string' ? feature_url_1.default.parse(directive)
	                : feature_url_1.default.parse((_a = directive.extensions) === null || _a === void 0 ? void 0 : _a.specifiedBy);
	        const name = this.features.documentName(url);
	        const feature = this.features.find(url);
	        const match = url.isDirective
	            ? (dir) => dir.name.value === name
	            : (dir) => this.featureFor(dir) === feature;
	        if (!(0, is_1.hasDirectives)(node))
	            return;
	        if (!feature)
	            return;
	        for (const d of node.directives) {
	            if (match(d)) {
	                const data = directive instanceof graphql_1.GraphQLDirective
	                    ? (0, values_1.getArgumentValues)(directive, d)
	                    : undefined;
	                const item = {
	                    node,
	                    directive: d,
	                    feature,
	                    canonicalName: '@' + (feature === null || feature === void 0 ? void 0 : feature.canonicalName(d.name.value)),
	                };
	                if (data != null)
	                    item.data = data;
	                yield item;
	            }
	        }
	    }
	    featureFor(node) {
	        if (!(0, is_1.hasName)(node))
	            return;
	        const [prefix] = (0, names_1.getPrefix)(node.name.value);
	        if (prefix || (0, is_1.isAst)(node, graphql_1.Kind.DIRECTIVE, graphql_1.Kind.DIRECTIVE_DEFINITION)) {
	            return this.names.get(prefix !== null && prefix !== void 0 ? prefix : node.name.value);
	        }
	        return;
	    }
	}
	exports.CoreSchema = CoreSchema;
	exports.default = CoreSchema;
	function schema() {
	    let schema = null;
	    for (const def of this.document.definitions) {
	        if (def.kind === 'SchemaDefinition') {
	            if (!schema)
	                schema = def;
	            else
	                this.report((0, exports.ErrExtraSchema)(def));
	        }
	    }
	    if (!schema) {
	        throw (0, exports.ErrNoSchema)();
	    }
	    return schema;
	}
	exports.schema = schema;
	function isCoreArgs(maybeCoreArgs) {
	    return (typeof maybeCoreArgs === "object" &&
	        maybeCoreArgs != null &&
	        "feature" in maybeCoreArgs);
	}
	function features$1() {
	    var _a, _b, _c, _d;
	    const schema = this.schema;
	    this.pure(...(_a = schema.directives) !== null && _a !== void 0 ? _a : []);
	    const noCoreErrors = [];
	    let coreFeature = null;
	    const features = new features_1.default;
	    for (const d of schema.directives || []) {
	        if (!coreFeature) {
	            try {
	                const coreArgs = (0, values_1.getArgumentValues)($core, d);
	                if (isCoreArgs(coreArgs)) {
	                    if (CORE_VERSIONS.has(coreArgs.feature) &&
	                        d.name.value === ((_b = coreArgs.as) !== null && _b !== void 0 ? _b : "core")) {
	                        const url = feature_url_1.default.parse(coreArgs.feature);
	                        coreFeature = new features_1.Feature(url, (_c = coreArgs.as) !== null && _c !== void 0 ? _c : url.name, d);
	                    }
	                }
	                else {
	                    throw new Error("Invalid arguments provided to core feature.");
	                }
	            }
	            catch (err) {
	                noCoreErrors.push(err);
	            }
	        }
	        if (coreFeature && d.name.value === coreFeature.name) {
	            try {
	                const coreArgs = (0, values_1.getArgumentValues)($core, d);
	                if (isCoreArgs(coreArgs)) {
	                    const url = feature_url_1.default.parse(coreArgs.feature);
	                    features.add(new features_1.Feature(url, (_d = coreArgs.as) !== null && _d !== void 0 ? _d : url.name, d, coreArgs.for));
	                }
	                else {
	                    throw new Error("Invalid arguments provided to core feature.");
	                }
	            }
	            catch (err) {
	                this.report((0, exports.ErrBadFeature)(d, err));
	            }
	        }
	    }
	    if (!coreFeature)
	        throw (0, exports.ErrNoCore)(noCoreErrors);
	    this.report(...features.validate());
	    return features;
	}
	exports.features = features$1;
	function names$1() {
	    var _a;
	    const { features } = this;
	    this.pure(features);
	    const names = new Map;
	    for (const feature of features) {
	        if (!names.has(feature.name))
	            names.set(feature.name, []);
	        (_a = names.get(feature.name)) === null || _a === void 0 ? void 0 : _a.push(feature);
	    }
	    const output = new Map;
	    for (const [name, features] of names) {
	        if (features.length > 1) {
	            this.report((0, exports.ErrOverlappingNames)(name, features));
	            continue;
	        }
	        output.set(name, features[0]);
	    }
	    return output;
	}
	exports.names = names$1;
	const CORE_VERSIONS = new Set([
	    'https://specs.apollo.dev/core/v0.1',
	    'https://specs.apollo.dev/core/v0.2',
	]);
	const Purpose = new graphql_1.GraphQLEnumType({
	    name: 'core__Purpose',
	    values: {
	        SECURITY: {},
	        EXECUTION: {},
	    },
	});
	const $core = new graphql_1.GraphQLDirective({
	    name: "core",
	    args: {
	        feature: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) },
	        as: { type: graphql_1.GraphQLString },
	        for: { type: Purpose },
	    },
	    locations: [graphql_1.DirectiveLocation.SCHEMA],
	    isRepeatable: true,
	});

	}(schema));

	var errors = {};

	Object.defineProperty(errors, "__esModule", { value: true });
	errors.isAnyError = void 0;
	const ERROR_CODES = new Set([
	    "NoData",
	    "EvalStackEmpty",
	    "CheckFailed",
	    "NoPath",
	    "NoName",
	    "NoVersion",
	    "ExtraSchema",
	    "NoSchema",
	    "NoCore",
	    "BadFeature",
	    "OverlappingNames",
	    "VersionParse",
	]);
	function isAnyError(o) {
	    return ERROR_CODES.has(o === null || o === void 0 ? void 0 : o.code);
	}
	errors.isAnyError = isAnyError;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.err = exports.Core = exports.Features = exports.Feature = exports.Version = void 0;
	__exportStar(schema, exports);
	var version_1 = version$1;
	Object.defineProperty(exports, "Version", { enumerable: true, get: function () { return version_1.Version; } });
	var features_1 = features;
	Object.defineProperty(exports, "Feature", { enumerable: true, get: function () { return features_1.Feature; } });
	Object.defineProperty(exports, "Features", { enumerable: true, get: function () { return features_1.Features; } });
	var core_1 = core;
	Object.defineProperty(exports, "Core", { enumerable: true, get: function () { return core_1.Core; } });
	var error_1 = error$1;
	Object.defineProperty(exports, "err", { enumerable: true, get: function () { return error_1.err; } });
	__exportStar(errors, exports);

	}(dist$1));

	var utils = {};

	Object.defineProperty(utils, "__esModule", { value: true });
	utils.joinStrings = utils.validateStringContainsBoolean = utils.copyWitNewLength = utils.MapWithCachedArrays = utils.setValues = utils.mapEntries = utils.mapKeys = utils.mapValues = utils.firstOf = utils.arrayEquals = utils.OrderedMap = utils.MultiMap = utils.assertUnreachable = utils.assert = void 0;
	function assert(condition, message) {
	    if (!condition) {
	        throw new Error(typeof message === 'string' ? message : message());
	    }
	}
	utils.assert = assert;
	function assertUnreachable(_) {
	    throw new Error("Didn't expect to get here");
	}
	utils.assertUnreachable = assertUnreachable;
	class MultiMap extends Map {
	    add(key, value) {
	        const values = this.get(key);
	        if (values) {
	            values.push(value);
	        }
	        else {
	            this.set(key, [value]);
	        }
	        return this;
	    }
	}
	utils.MultiMap = MultiMap;
	class OrderedMap {
	    constructor(compareFn = OrderedMap.defaultCompareFn) {
	        this._keys = [];
	        this._values = new Map();
	        this._compareFn = compareFn;
	    }
	    static defaultCompareFn(a, b) {
	        if (a < b) {
	            return -1;
	        }
	        else if (b < a) {
	            return 1;
	        }
	        return 0;
	    }
	    add(key, value) {
	        if (!this._values.has(key)) {
	            this.insertKeyInOrder(key);
	        }
	        this._values.set(key, value);
	    }
	    get(key) {
	        return this._values.get(key);
	    }
	    has(key) {
	        return this._values.has(key);
	    }
	    get size() {
	        return this._keys.length;
	    }
	    keys() {
	        return this._keys;
	    }
	    values() {
	        return this._keys.map(key => {
	            const v = this._values.get(key);
	            assert(v, 'value for known key not found in OrderedMap');
	            return v;
	        });
	    }
	    insertKeyInOrder(key) {
	        let lower = 0;
	        let upper = this._keys.length - 1;
	        while (lower <= upper) {
	            const middle = Math.floor((upper + lower) / 2);
	            if (this._compareFn(this._keys[middle], key) < 0) {
	                lower = middle + 1;
	            }
	            else {
	                upper = middle - 1;
	            }
	        }
	        this._keys = this._keys.slice(0, lower).concat(key).concat(this._keys.slice(lower));
	    }
	    *[Symbol.iterator]() {
	        for (let i = 0; i < this._keys.length; i += 1) {
	            const v = this._values.get(this._keys[i]);
	            assert(v, 'value for known key not found in OrderedMap');
	            yield v;
	        }
	    }
	}
	utils.OrderedMap = OrderedMap;
	function arrayEquals(a, b, equalFct) {
	    if (a === b) {
	        return true;
	    }
	    if (a.length !== b.length) {
	        return false;
	    }
	    for (let i = 0; i < a.length; ++i) {
	        const eltEqual = equalFct ? equalFct(a[i], b[i]) : a[i] === b[i];
	        if (!eltEqual) {
	            return false;
	        }
	    }
	    return true;
	}
	utils.arrayEquals = arrayEquals;
	function firstOf(iterable) {
	    const res = iterable[Symbol.iterator]().next();
	    return res.done ? undefined : res.value;
	}
	utils.firstOf = firstOf;
	function mapValues(map) {
	    const array = new Array(map.size);
	    let i = 0;
	    for (const v of map.values()) {
	        array[i++] = v;
	    }
	    return array;
	}
	utils.mapValues = mapValues;
	function mapKeys(map) {
	    const array = new Array(map.size);
	    let i = 0;
	    for (const k of map.keys()) {
	        array[i++] = k;
	    }
	    return array;
	}
	utils.mapKeys = mapKeys;
	function mapEntries(map) {
	    const array = new Array(map.size);
	    let i = 0;
	    for (const entry of map.entries()) {
	        array[i++] = entry;
	    }
	    return array;
	}
	utils.mapEntries = mapEntries;
	function setValues(set) {
	    const array = new Array(set.size);
	    let i = 0;
	    for (const v of set.values()) {
	        array[i++] = v;
	    }
	    return array;
	}
	utils.setValues = setValues;
	class MapWithCachedArrays {
	    constructor() {
	        this.map = new Map();
	    }
	    clearCaches() {
	        this.cachedKeys = undefined;
	        this.cachedValues = undefined;
	    }
	    get size() {
	        return this.map.size;
	    }
	    has(key) {
	        return this.map.has(key);
	    }
	    get(key) {
	        return this.map.get(key);
	    }
	    set(key, value) {
	        this.map.set(key, value);
	        this.clearCaches();
	        return this;
	    }
	    delete(key) {
	        const deleted = this.map.delete(key);
	        if (deleted) {
	            this.clearCaches();
	        }
	        return deleted;
	    }
	    clear() {
	        this.map.clear();
	        this.clearCaches();
	    }
	    keys() {
	        if (!this.cachedKeys) {
	            this.cachedKeys = mapKeys(this.map);
	        }
	        return this.cachedKeys;
	    }
	    values() {
	        if (!this.cachedValues) {
	            this.cachedValues = mapValues(this.map);
	        }
	        return this.cachedValues;
	    }
	}
	utils.MapWithCachedArrays = MapWithCachedArrays;
	function copyWitNewLength(arr, newLength) {
	    assert(newLength >= arr.length, () => `${newLength} < ${arr.length}`);
	    const copy = new Array(newLength);
	    for (let i = 0; i < arr.length; i++) {
	        copy[i] = arr[i];
	    }
	    return copy;
	}
	utils.copyWitNewLength = copyWitNewLength;
	function validateStringContainsBoolean(str) {
	    if (!str) {
	        return false;
	    }
	    switch (str.toLocaleLowerCase()) {
	        case "true":
	        case "yes":
	        case "1":
	            return true;
	        case "false":
	        case "no":
	        case "0":
	            return false;
	        default:
	            return undefined;
	    }
	}
	utils.validateStringContainsBoolean = validateStringContainsBoolean;
	function joinStrings(toJoin, sep = ', ', firstSep, lastSep = ' and ') {
	    if (toJoin.length == 0) {
	        return '';
	    }
	    const first = toJoin[0];
	    if (toJoin.length == 1) {
	        return first;
	    }
	    const last = toJoin[toJoin.length - 1];
	    if (toJoin.length == 2) {
	        return first + (firstSep ? firstSep : lastSep) + last;
	    }
	    return first + (firstSep ? firstSep : sep) + toJoin.slice(1, toJoin.length - 1) + lastSep + last;
	}
	utils.joinStrings = joinStrings;

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.removeFeatureElements = exports.CORE_VERSIONS = exports.FeatureUrl = exports.FeatureVersion = exports.FeatureDefinitions = exports.CoreSpecDefinition = exports.isCoreSpecDirectiveApplication = exports.FeatureDefinition = exports.corePurposes = exports.ErrCoreCheckFailed = exports.coreIdentity = void 0;
	const graphql_1 = require$$2$2;
	const url_1 = require$$0__default["default"];
	const definitions_1 = definitions;
	const types_1 = types;
	const core_schema_1 = dist$1;
	const utils_1 = utils;
	exports.coreIdentity = 'https://specs.apollo.dev/core';
	const ErrCoreCheckFailed = (causes) => (0, core_schema_1.err)('CheckFailed', {
	    message: 'one or more checks failed',
	    causes
	});
	exports.ErrCoreCheckFailed = ErrCoreCheckFailed;
	function buildError(message) {
	    return new Error(message);
	}
	exports.corePurposes = [
	    'SECURITY',
	    'EXECUTION',
	];
	function purposesDescription(purpose) {
	    switch (purpose) {
	        case 'SECURITY': return "`SECURITY` features provide metadata necessary to securely resolve fields.";
	        case 'EXECUTION': return "`EXECUTION` features provide metadata necessary for operation execution.";
	    }
	}
	class FeatureDefinition {
	    constructor(url) {
	        this.url = typeof url === 'string' ? FeatureUrl.parse(url) : url;
	    }
	    get identity() {
	        return this.url.identity;
	    }
	    get version() {
	        return this.url.version;
	    }
	    isSpecType(type) {
	        const nameInSchema = this.nameInSchema(type.schema());
	        return nameInSchema !== undefined && type.name.startsWith(`${nameInSchema}__`);
	    }
	    isSpecDirective(directive) {
	        const nameInSchema = this.nameInSchema(directive.schema());
	        return nameInSchema != undefined && (directive.name === nameInSchema || directive.name.startsWith(`${nameInSchema}__`));
	    }
	    nameInSchema(schema) {
	        const feature = this.featureInSchema(schema);
	        return feature === null || feature === void 0 ? void 0 : feature.nameInSchema;
	    }
	    elementNameInSchema(schema, elementName) {
	        const nameInSchema = this.nameInSchema(schema);
	        return nameInSchema
	            ? (elementName === nameInSchema ? nameInSchema : `${nameInSchema}__${elementName}`)
	            : undefined;
	    }
	    rootDirective(schema) {
	        const name = this.nameInSchema(schema);
	        return name ? schema.directive(name) : undefined;
	    }
	    directive(schema, elementName) {
	        const name = this.elementNameInSchema(schema, elementName);
	        return name ? schema.directive(name) : undefined;
	    }
	    type(schema, elementName) {
	        const name = this.elementNameInSchema(schema, elementName);
	        return name ? schema.type(name) : undefined;
	    }
	    addRootDirective(schema) {
	        return schema.addDirectiveDefinition(this.nameInSchema(schema));
	    }
	    addDirective(schema, name) {
	        return schema.addDirectiveDefinition(this.elementNameInSchema(schema, name));
	    }
	    addScalarType(schema, name) {
	        return schema.addType(new definitions_1.ScalarType(this.elementNameInSchema(schema, name)));
	    }
	    addEnumType(schema, name) {
	        return schema.addType(new definitions_1.EnumType(this.elementNameInSchema(schema, name)));
	    }
	    featureInSchema(schema) {
	        const features = schema.coreFeatures;
	        if (!features) {
	            throw buildError(`Schema is not a core schema (add @core first)`);
	        }
	        return features.getByIdentity(this.identity);
	    }
	    toString() {
	        return `${this.identity}/${this.version}`;
	    }
	}
	exports.FeatureDefinition = FeatureDefinition;
	function isCoreSpecDirectiveApplication(directive) {
	    var _a;
	    const definition = directive.definition;
	    if (!definition) {
	        return false;
	    }
	    const featureArg = definition.argument('feature');
	    if (!featureArg || !(0, types_1.sameType)(featureArg.type, new definitions_1.NonNullType(directive.schema().stringType()))) {
	        return false;
	    }
	    const asArg = definition.argument('as');
	    if (asArg && !(0, types_1.sameType)(asArg.type, directive.schema().stringType())) {
	        return false;
	    }
	    if (!definition.repeatable || definition.locations.length !== 1 || definition.locations[0] !== graphql_1.DirectiveLocation.SCHEMA) {
	        return false;
	    }
	    const args = directive.arguments();
	    try {
	        const url = FeatureUrl.parse(args.feature);
	        return url.identity === exports.coreIdentity && directive.name === ((_a = args.as) !== null && _a !== void 0 ? _a : 'core');
	    }
	    catch (err) {
	        return false;
	    }
	}
	exports.isCoreSpecDirectiveApplication = isCoreSpecDirectiveApplication;
	class CoreSpecDefinition extends FeatureDefinition {
	    constructor(version) {
	        super(new FeatureUrl(exports.coreIdentity, 'core', version));
	    }
	    addElementsToSchema(_) {
	    }
	    addToSchema(schema, as) {
	        const existing = schema.coreFeatures;
	        if (existing) {
	            if (existing.coreItself.url.identity === this.identity) {
	                return;
	            }
	            else {
	                throw buildError(`Cannot add feature ${this} to the schema, it already uses ${existing.coreItself.url}`);
	            }
	        }
	        const nameInSchema = as !== null && as !== void 0 ? as : this.url.name;
	        const core = schema.addDirectiveDefinition(nameInSchema).addLocations(graphql_1.DirectiveLocation.SCHEMA);
	        core.repeatable = true;
	        core.addArgument('feature', new definitions_1.NonNullType(schema.stringType()));
	        core.addArgument('as', schema.stringType());
	        if (this.supportPurposes()) {
	            const purposeEnum = schema.addType(new definitions_1.EnumType(`${nameInSchema}__Purpose`));
	            for (const purpose of exports.corePurposes) {
	                purposeEnum.addValue(purpose).description = purposesDescription(purpose);
	            }
	            core.addArgument('for', purposeEnum);
	        }
	        const args = { feature: this.toString() };
	        if (as) {
	            args.as = as;
	        }
	        schema.schemaDefinition.applyDirective(nameInSchema, args);
	    }
	    supportPurposes() {
	        return this.version.strictlyGreaterThan(new FeatureVersion(0, 1));
	    }
	    extractFeature(schema) {
	        const features = schema.coreFeatures;
	        if (!features) {
	            throw buildError(`Schema is not a core schema (add @core first)`);
	        }
	        if (!features.coreItself.url.version.equals(this.version)) {
	            throw buildError(`Cannot use this version of @core (${this.version}), the schema uses version ${features.coreItself.url.version}`);
	        }
	        return features.coreItself;
	    }
	    coreDirective(schema) {
	        const feature = this.extractFeature(schema);
	        const directive = schema.directive(feature.nameInSchema);
	        return directive;
	    }
	    coreVersion(schema) {
	        const feature = this.extractFeature(schema);
	        return feature.url.version;
	    }
	    applyFeatureToSchema(schema, feature, as, purpose) {
	        const coreDirective = this.coreDirective(schema);
	        const args = {
	            feature: feature.toString(),
	            as,
	        };
	        if (this.supportPurposes() && purpose) {
	            args.for = purpose;
	        }
	        schema.schemaDefinition.applyDirective(coreDirective, args);
	        feature.addElementsToSchema(schema);
	    }
	}
	exports.CoreSpecDefinition = CoreSpecDefinition;
	class FeatureDefinitions {
	    constructor(identity) {
	        this.identity = identity;
	        this._definitions = [];
	    }
	    add(definition) {
	        if (definition.identity !== this.identity) {
	            throw buildError(`Cannot add definition for ${definition} to the versions of definitions for ${this.identity}`);
	        }
	        if (this._definitions.find(def => definition.version.equals(def.version))) {
	            return this;
	        }
	        this._definitions.push(definition);
	        this._definitions.sort((def1, def2) => -def1.version.compareTo(def2.version));
	        return this;
	    }
	    find(requested) {
	        return this._definitions.find(def => def.version.satisfies(requested));
	    }
	    versions() {
	        return this._definitions.map(def => def.version);
	    }
	    latest() {
	        (0, utils_1.assert)(this._definitions.length > 0, 'Trying to get latest when no definitions exist');
	        return this._definitions[0];
	    }
	}
	exports.FeatureDefinitions = FeatureDefinitions;
	class FeatureVersion {
	    constructor(major, minor) {
	        this.major = major;
	        this.minor = minor;
	    }
	    static parse(input) {
	        const match = input.match(this.VERSION_RE);
	        if (!match) {
	            throw new graphql_1.GraphQLError(`Expected a version string (of the form v1.2), got ${input}`);
	        }
	        return new this(+match[1], +match[2]);
	    }
	    satisfies(required) {
	        const { major, minor } = this;
	        const { major: rMajor, minor: rMinor } = required;
	        return rMajor == major && (major == 0
	            ? rMinor == minor
	            : rMinor <= minor);
	    }
	    get series() {
	        const { major } = this;
	        return major > 0 ? `${major}.x` : String(this);
	    }
	    compareTo(other) {
	        if (this.major > other.major) {
	            return 1;
	        }
	        if (this.major < other.major) {
	            return -1;
	        }
	        if (this.minor > other.minor) {
	            return 1;
	        }
	        if (this.minor < other.minor) {
	            return -1;
	        }
	        return 0;
	    }
	    strictlyGreaterThan(version) {
	        return this.compareTo(version) > 0;
	    }
	    toString() {
	        return `v${this.major}.${this.minor}`;
	    }
	    equals(other) {
	        return this.major === other.major && this.minor === other.minor;
	    }
	}
	exports.FeatureVersion = FeatureVersion;
	FeatureVersion.VERSION_RE = /^v(\d+)\.(\d+)$/;
	class FeatureUrl {
	    constructor(identity, name, version, element) {
	        this.identity = identity;
	        this.name = name;
	        this.version = version;
	        this.element = element;
	    }
	    static parse(input, node) {
	        const url = new url_1.URL(input);
	        if (!url.pathname || url.pathname === '/') {
	            throw new graphql_1.GraphQLError(`Missing path in feature url '${url}'`, node);
	        }
	        const path = url.pathname.split('/');
	        const verStr = path.pop();
	        if (!verStr) {
	            throw new graphql_1.GraphQLError(`Missing version component in feature url '${url}'`, node);
	        }
	        const version = FeatureVersion.parse(verStr);
	        const name = path[path.length - 1];
	        if (!name) {
	            throw new graphql_1.GraphQLError(`Missing feature name component in feature url '${url}'`, node);
	        }
	        const element = url.hash ? url.hash.slice(1) : undefined;
	        url.hash = '';
	        url.search = '';
	        url.password = '';
	        url.username = '';
	        url.pathname = path.join('/');
	        return new FeatureUrl(url.toString(), name, version, element);
	    }
	    static decode(node) {
	        return this.parse(node.value, node);
	    }
	    satisfies(requested) {
	        return requested.identity === this.identity &&
	            this.version.satisfies(requested.version);
	    }
	    equals(other) {
	        return this.identity === other.identity &&
	            this.version.equals(other.version);
	    }
	    get url() {
	        return this.element ?
	            `${this.identity}/${this.version}#${this.element}`
	            : `${this.identity}/${this.version}`;
	    }
	    get isDirective() {
	        var _a;
	        return (_a = this.element) === null || _a === void 0 ? void 0 : _a.startsWith('@');
	    }
	    get elementName() {
	        var _a;
	        return this.isDirective ? (_a = this.element) === null || _a === void 0 ? void 0 : _a.slice(1) : this.element;
	    }
	    get base() {
	        if (!this.element)
	            return this;
	        return new FeatureUrl(this.identity, this.name, this.version);
	    }
	    toString() {
	        return this.url;
	    }
	}
	exports.FeatureUrl = FeatureUrl;
	exports.CORE_VERSIONS = new FeatureDefinitions(exports.coreIdentity)
	    .add(new CoreSpecDefinition(new FeatureVersion(0, 1)))
	    .add(new CoreSpecDefinition(new FeatureVersion(0, 2)));
	function removeFeatureElements(schema, feature) {
	    const featureDirectives = schema.directives().filter(d => feature.isFeatureDefinition(d));
	    featureDirectives.forEach(d => d.remove().forEach(application => application.remove()));
	    const featureTypes = schema.types().filter(t => feature.isFeatureDefinition(t));
	    featureTypes.forEach(type => {
	        const references = type.remove();
	        if (references.length > 0) {
	            throw new graphql_1.GraphQLError(`Cannot remove elements of feature ${feature} as feature type ${type} is referenced by elements: ${references.join(', ')}`, references.map(r => r.sourceAST).filter(n => n !== undefined));
	        }
	    });
	}
	exports.removeFeatureElements = removeFeatureElements;

	}(coreSpec$1));

	var values = {};

	var suggestions = {};

	var jsLevenshtein = (function()
	{
	  function _min(d0, d1, d2, bx, ay)
	  {
	    return d0 < d1 || d2 < d1
	        ? d0 > d2
	            ? d2 + 1
	            : d0 + 1
	        : bx === ay
	            ? d1
	            : d1 + 1;
	  }

	  return function(a, b)
	  {
	    if (a === b) {
	      return 0;
	    }

	    if (a.length > b.length) {
	      var tmp = a;
	      a = b;
	      b = tmp;
	    }

	    var la = a.length;
	    var lb = b.length;

	    while (la > 0 && (a.charCodeAt(la - 1) === b.charCodeAt(lb - 1))) {
	      la--;
	      lb--;
	    }

	    var offset = 0;

	    while (offset < la && (a.charCodeAt(offset) === b.charCodeAt(offset))) {
	      offset++;
	    }

	    la -= offset;
	    lb -= offset;

	    if (la === 0 || lb < 3) {
	      return lb;
	    }

	    var x = 0;
	    var y;
	    var d0;
	    var d1;
	    var d2;
	    var d3;
	    var dd;
	    var dy;
	    var ay;
	    var bx0;
	    var bx1;
	    var bx2;
	    var bx3;

	    var vector = [];

	    for (y = 0; y < la; y++) {
	      vector.push(y + 1);
	      vector.push(a.charCodeAt(offset + y));
	    }

	    var len = vector.length - 1;

	    for (; x < lb - 3;) {
	      bx0 = b.charCodeAt(offset + (d0 = x));
	      bx1 = b.charCodeAt(offset + (d1 = x + 1));
	      bx2 = b.charCodeAt(offset + (d2 = x + 2));
	      bx3 = b.charCodeAt(offset + (d3 = x + 3));
	      dd = (x += 4);
	      for (y = 0; y < len; y += 2) {
	        dy = vector[y];
	        ay = vector[y + 1];
	        d0 = _min(dy, d0, d1, bx0, ay);
	        d1 = _min(d0, d1, d2, bx1, ay);
	        d2 = _min(d1, d2, d3, bx2, ay);
	        dd = _min(d2, d3, dd, bx3, ay);
	        vector[y] = dd;
	        d3 = d2;
	        d2 = d1;
	        d1 = d0;
	        d0 = dy;
	      }
	    }

	    for (; x < lb;) {
	      bx0 = b.charCodeAt(offset + (d0 = x));
	      dd = ++x;
	      for (y = 0; y < len; y += 2) {
	        dy = vector[y];
	        vector[y] = dd = _min(dy, d0, dd, bx0, vector[y + 1]);
	        d0 = dy;
	      }
	    }

	    return dd;
	  };
	})();

	var __importDefault$3 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(suggestions, "__esModule", { value: true });
	suggestions.didYouMean = suggestions.suggestionList = void 0;
	const js_levenshtein_1 = __importDefault$3(jsLevenshtein);
	const utils_1$4 = utils;
	function suggestionList(input, options) {
	    const optionsByDistance = new Map();
	    const threshold = Math.floor(input.length * 0.4) + 1;
	    const inputLowerCase = input.toLowerCase();
	    for (const option of options) {
	        const distance = inputLowerCase === option.toLowerCase()
	            ? 1
	            : (0, js_levenshtein_1.default)(input, option);
	        if (distance <= threshold) {
	            optionsByDistance.set(option, distance);
	        }
	    }
	    return (0, utils_1$4.mapKeys)(optionsByDistance).sort((a, b) => {
	        const distanceDiff = optionsByDistance.get(a) - optionsByDistance.get(b);
	        return distanceDiff !== 0 ? distanceDiff : a.localeCompare(b);
	    });
	}
	suggestions.suggestionList = suggestionList;
	const MAX_SUGGESTIONS = 5;
	function didYouMean(suggestions) {
	    const message = ' Did you mean ';
	    const quotedSuggestions = suggestions.map((x) => `"${x}"`);
	    switch (suggestions.length) {
	        case 0:
	            return '';
	        case 1:
	            return message + quotedSuggestions[0] + '?';
	        case 2:
	            return message + quotedSuggestions[0] + ' or ' + quotedSuggestions[1] + '?';
	    }
	    const selected = quotedSuggestions.slice(0, MAX_SUGGESTIONS);
	    const lastItem = selected.pop();
	    return message + selected.join(', ') + ', or ' + lastItem + '?';
	}
	suggestions.didYouMean = didYouMean;

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof global.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof global.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title = 'browser';
	var platform$1 = 'browser';
	var browser = true;
	var env$1 = {};
	var argv = [];
	var version = ''; // empty string to avoid regexp issues
	var versions = {};
	var release$1 = {};
	var config = {};

	function noop$1() {}

	var on = noop$1;
	var addListener = noop$1;
	var once = noop$1;
	var off = noop$1;
	var removeListener = noop$1;
	var removeAllListeners = noop$1;
	var emit = noop$1;

	function binding(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd () { return '/' }
	function chdir (dir) {
	    throw new Error('process.chdir is not supported');
	}function umask() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance = global.performance || {};
	var performanceNow =
	  performance.now        ||
	  performance.mozNow     ||
	  performance.msNow      ||
	  performance.oNow       ||
	  performance.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime = new Date();
	function uptime$1() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}

	var browser$1 = {
	  nextTick: nextTick,
	  title: title,
	  browser: browser,
	  env: env$1,
	  argv: argv,
	  version: version,
	  versions: versions,
	  on: on,
	  addListener: addListener,
	  once: once,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform$1,
	  release: release$1,
	  config: config,
	  uptime: uptime$1
	};

	var process$1 = browser$1;

	var inherits;
	if (typeof Object.create === 'function'){
	  inherits = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	var inherits$1 = inherits;

	// Copyright Joyent, Inc. and other Node contributors.
	var formatRegExp = /%[sdj%]/g;
	function format(f) {
	  if (!isString$3(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect$1(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect$1(x);
	    }
	  }
	  return str;
	}

	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	function deprecate(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process$1.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process$1.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process$1.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	var debugs = {};
	var debugEnviron;
	function debuglog(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process$1.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = 0;
	      debugs[set] = function() {
	        var msg = format.apply(null, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	}

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect$1(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean$2(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    _extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}

	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect$1.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect$1.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect$1.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect$1.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect$1.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction$1(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== inspect$1 &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString$3(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError$1(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction$1(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp$1(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate$2(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError$1(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray$3(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction$1(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp$1(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate$2(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError$1(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp$1(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString$3(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber$2(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean$2(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray$3(ar) {
	  return Array.isArray(ar);
	}

	function isBoolean$2(arg) {
	  return typeof arg === 'boolean';
	}

	function isNull(arg) {
	  return arg === null;
	}

	function isNullOrUndefined(arg) {
	  return arg == null;
	}

	function isNumber$2(arg) {
	  return typeof arg === 'number';
	}

	function isString$3(arg) {
	  return typeof arg === 'string';
	}

	function isSymbol$3(arg) {
	  return typeof arg === 'symbol';
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}

	function isRegExp$1(re) {
	  return isObject(re) && objectToString$1(re) === '[object RegExp]';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isDate$2(d) {
	  return isObject(d) && objectToString$1(d) === '[object Date]';
	}

	function isError$1(e) {
	  return isObject(e) &&
	      (objectToString$1(e) === '[object Error]' || e instanceof Error);
	}

	function isFunction$1(arg) {
	  return typeof arg === 'function';
	}

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}

	function isBuffer$1(maybeBuf) {
	  return Buffer.isBuffer(maybeBuf);
	}

	function objectToString$1(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	function log() {
	  console.log('%s - %s', timestamp(), format.apply(null, arguments));
	}

	function _extend(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	}
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var util$1 = {
	  inherits: inherits$1,
	  _extend: _extend,
	  log: log,
	  isBuffer: isBuffer$1,
	  isPrimitive: isPrimitive,
	  isFunction: isFunction$1,
	  isError: isError$1,
	  isDate: isDate$2,
	  isObject: isObject,
	  isRegExp: isRegExp$1,
	  isUndefined: isUndefined,
	  isSymbol: isSymbol$3,
	  isString: isString$3,
	  isNumber: isNumber$2,
	  isNullOrUndefined: isNullOrUndefined,
	  isNull: isNull,
	  isBoolean: isBoolean$2,
	  isArray: isArray$3,
	  inspect: inspect$1,
	  deprecate: deprecate,
	  format: format,
	  debuglog: debuglog
	};

	var util$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		format: format,
		deprecate: deprecate,
		debuglog: debuglog,
		inspect: inspect$1,
		isArray: isArray$3,
		isBoolean: isBoolean$2,
		isNull: isNull,
		isNullOrUndefined: isNullOrUndefined,
		isNumber: isNumber$2,
		isString: isString$3,
		isSymbol: isSymbol$3,
		isUndefined: isUndefined,
		isRegExp: isRegExp$1,
		isObject: isObject,
		isDate: isDate$2,
		isError: isError$1,
		isFunction: isFunction$1,
		isPrimitive: isPrimitive,
		isBuffer: isBuffer$1,
		log: log,
		inherits: inherits$1,
		_extend: _extend,
		'default': util$1
	});

	var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(util$2);

	Object.defineProperty(values, "__esModule", { value: true });
	values.variablesInValue = values.argumentsFromAST = values.valueFromAST = values.isValidValue = values.valueToAST = values.valueNodeToConstValueNode = values.withDefaultValues = values.argumentsEquals = values.valueEquals = values.valueToString = void 0;
	const definitions_1$6 = definitions;
	const graphql_1$9 = require$$2$2;
	const suggestions_1$1 = suggestions;
	const util_1$1 = require$$0$1;
	const types_1$2 = types;
	const utils_1$3 = utils;
	const MAX_INT = 2147483647;
	const MIN_INT = -2147483648;
	function valueToString(v, expectedType) {
	    if (v === undefined || v === null) {
	        if (expectedType && (0, definitions_1$6.isNonNullType)(expectedType)) {
	            throw buildError(`Invalid undefined/null value for non-null type ${expectedType}`);
	        }
	        return "null";
	    }
	    if (expectedType && (0, definitions_1$6.isNonNullType)(expectedType)) {
	        expectedType = expectedType.ofType;
	    }
	    if (expectedType && (0, definitions_1$6.isCustomScalarType)(expectedType)) {
	        expectedType = undefined;
	    }
	    if ((0, definitions_1$6.isVariable)(v)) {
	        return v.toString();
	    }
	    if (Array.isArray(v)) {
	        let elementsType = undefined;
	        if (expectedType) {
	            if (!(0, definitions_1$6.isListType)(expectedType)) {
	                throw buildError(`Invalid list value for non-list type ${expectedType}`);
	            }
	            elementsType = expectedType.ofType;
	        }
	        return '[' + v.map(e => valueToString(e, elementsType)).join(', ') + ']';
	    }
	    if (typeof v === 'object') {
	        if (expectedType && !(0, definitions_1$6.isInputObjectType)(expectedType)) {
	            throw buildError(`Invalid object value for non-input-object type ${expectedType} (isCustomScalar? ${(0, definitions_1$6.isCustomScalarType)(expectedType)})`);
	        }
	        return '{' + Object.keys(v).map(k => {
	            var _a;
	            const valueType = expectedType ? (_a = expectedType.field(k)) === null || _a === void 0 ? void 0 : _a.type : undefined;
	            return `${k}: ${valueToString(v[k], valueType)}`;
	        }).join(', ') + '}';
	    }
	    if (typeof v === 'string') {
	        if (expectedType) {
	            if ((0, definitions_1$6.isEnumType)(expectedType)) {
	                return v;
	            }
	            if (expectedType === expectedType.schema().idType() && integerStringRegExp.test(v)) {
	                return v;
	            }
	        }
	        return JSON.stringify(v);
	    }
	    return String(v);
	}
	values.valueToString = valueToString;
	function valueEquals(a, b) {
	    if (a === b) {
	        return true;
	    }
	    if (Array.isArray(a)) {
	        return Array.isArray(b) && arrayValueEquals(a, b);
	    }
	    if (typeof a === 'object') {
	        return typeof b === 'object' && objectEquals(a, b);
	    }
	    return a === b;
	}
	values.valueEquals = valueEquals;
	function arrayValueEquals(a, b) {
	    if (a.length !== b.length) {
	        return false;
	    }
	    for (let i = 0; i < a.length; ++i) {
	        if (!valueEquals(a[i], b[i])) {
	            return false;
	        }
	    }
	    return true;
	}
	function objectEquals(a, b) {
	    const keys1 = Object.keys(a);
	    const keys2 = Object.keys(b);
	    if (keys1.length != keys2.length) {
	        return false;
	    }
	    for (const key of keys1) {
	        const v1 = a[key];
	        const v2 = b[key];
	        if (v2 === undefined) {
	            return v1 === undefined && b.hasOwnProperty(key);
	        }
	        if (!valueEquals(v1, v2)) {
	            return false;
	        }
	    }
	    return true;
	}
	function argumentsEquals(args1, args2) {
	    if (args1 === args2) {
	        return true;
	    }
	    return objectEquals(args1, args2);
	}
	values.argumentsEquals = argumentsEquals;
	function buildError(message) {
	    return new Error(message);
	}
	function applyDefaultValues(value, type) {
	    if ((0, definitions_1$6.isVariable)(value)) {
	        return value;
	    }
	    if (value === null) {
	        if ((0, definitions_1$6.isNonNullType)(type)) {
	            throw new graphql_1$9.GraphQLError(`Invalid null value for non-null type ${type} while computing default values`);
	        }
	        return null;
	    }
	    if ((0, definitions_1$6.isNonNullType)(type)) {
	        return applyDefaultValues(value, type.ofType);
	    }
	    if ((0, definitions_1$6.isListType)(type)) {
	        if (Array.isArray(value)) {
	            return value.map(v => applyDefaultValues(v, type.ofType));
	        }
	        else {
	            return applyDefaultValues(value, type.ofType);
	        }
	    }
	    if ((0, definitions_1$6.isInputObjectType)(type)) {
	        if (typeof value !== 'object') {
	            throw new graphql_1$9.GraphQLError(`Expected value for type ${type} to be an object, but is ${typeof value}.`);
	        }
	        const updated = Object.create(null);
	        for (const field of type.fields()) {
	            if (!field.type) {
	                throw buildError(`Cannot compute default value for field ${field.name} of ${type} as the field type is undefined`);
	            }
	            const fieldValue = value[field.name];
	            if (fieldValue === undefined) {
	                if (field.defaultValue !== undefined) {
	                    updated[field.name] = applyDefaultValues(field.defaultValue, field.type);
	                }
	                else if ((0, definitions_1$6.isNonNullType)(field.type)) {
	                    throw new graphql_1$9.GraphQLError(`Field "${field.name}" of required type ${type} was not provided.`);
	                }
	            }
	            else {
	                updated[field.name] = applyDefaultValues(fieldValue, field.type);
	            }
	        }
	        for (const fieldName of Object.keys(value)) {
	            if (!type.field(fieldName)) {
	                const suggestions = (0, suggestions_1$1.suggestionList)(fieldName, type.fields().map(f => f.name));
	                throw new graphql_1$9.GraphQLError(`Field "${fieldName}" is not defined by type "${type}".` + (0, suggestions_1$1.didYouMean)(suggestions));
	            }
	        }
	        return updated;
	    }
	    return value;
	}
	function withDefaultValues(value, argument) {
	    if (!argument.type) {
	        throw buildError(`Cannot compute default value for argument ${argument} as the type is undefined`);
	    }
	    if (value === undefined) {
	        if (argument.defaultValue) {
	            return applyDefaultValues(argument.defaultValue, argument.type);
	        }
	    }
	    return applyDefaultValues(value, argument.type);
	}
	values.withDefaultValues = withDefaultValues;
	const integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;
	function objectFieldNodeToConst(field) {
	    return { ...field, value: valueNodeToConstValueNode(field.value) };
	}
	function valueNodeToConstValueNode(value) {
	    if (value.kind === graphql_1$9.Kind.NULL
	        || value.kind === graphql_1$9.Kind.INT
	        || value.kind === graphql_1$9.Kind.FLOAT
	        || value.kind === graphql_1$9.Kind.STRING
	        || value.kind === graphql_1$9.Kind.BOOLEAN
	        || value.kind === graphql_1$9.Kind.ENUM) {
	        return value;
	    }
	    if (value.kind === graphql_1$9.Kind.LIST) {
	        const constValues = value.values.map(v => valueNodeToConstValueNode(v));
	        return { ...value, values: constValues };
	    }
	    if (value.kind === graphql_1$9.Kind.OBJECT) {
	        const constFields = value.fields.map(f => objectFieldNodeToConst(f));
	        return { ...value, fields: constFields };
	    }
	    if (value.kind === graphql_1$9.Kind.VARIABLE) {
	        throw new Error('Unexpected VariableNode in const AST');
	    }
	    (0, utils_1$3.assertUnreachable)(value);
	}
	values.valueNodeToConstValueNode = valueNodeToConstValueNode;
	function valueToAST(value, type) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if ((0, definitions_1$6.isNonNullType)(type)) {
	        const astValue = valueToAST(value, type.ofType);
	        if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === graphql_1$9.Kind.NULL) {
	            throw buildError(`Invalid null value ${valueToString(value)} for non-null type ${type}`);
	        }
	        return astValue;
	    }
	    if (value === null) {
	        return { kind: graphql_1$9.Kind.NULL };
	    }
	    if ((0, definitions_1$6.isVariable)(value)) {
	        return { kind: graphql_1$9.Kind.VARIABLE, name: { kind: graphql_1$9.Kind.NAME, value: value.name } };
	    }
	    if ((0, definitions_1$6.isCustomScalarType)(type)) {
	        return valueToASTUntyped(value);
	    }
	    if ((0, definitions_1$6.isListType)(type)) {
	        const itemType = type.ofType;
	        const items = Array.from(value);
	        if (items != null) {
	            const valuesNodes = [];
	            for (const item of items) {
	                const itemNode = valueToAST(item, itemType);
	                if (itemNode != null) {
	                    valuesNodes.push(itemNode);
	                }
	            }
	            return { kind: graphql_1$9.Kind.LIST, values: valuesNodes };
	        }
	        return valueToAST(value, itemType);
	    }
	    if ((0, definitions_1$6.isInputObjectType)(type)) {
	        if (typeof value !== 'object') {
	            throw buildError(`Invalid non-objet value for input type ${type}, cannot be converted to AST: ${(0, util_1$1.inspect)(value, true, 10, true)}`);
	        }
	        const fieldNodes = [];
	        for (const field of type.fields()) {
	            if (!field.type) {
	                throw buildError(`Cannot convert value ${valueToString(value)} as field ${field} has no type set`);
	            }
	            const fieldValue = valueToAST(value[field.name], field.type);
	            if (fieldValue) {
	                fieldNodes.push({
	                    kind: graphql_1$9.Kind.OBJECT_FIELD,
	                    name: { kind: graphql_1$9.Kind.NAME, value: field.name },
	                    value: fieldValue,
	                });
	            }
	        }
	        return { kind: graphql_1$9.Kind.OBJECT, fields: fieldNodes };
	    }
	    if (typeof value === 'boolean') {
	        return { kind: graphql_1$9.Kind.BOOLEAN, value: value };
	    }
	    if (typeof value === 'number' && isFinite(value)) {
	        const stringNum = String(value);
	        return integerStringRegExp.test(stringNum)
	            ? { kind: graphql_1$9.Kind.INT, value: stringNum }
	            : { kind: graphql_1$9.Kind.FLOAT, value: stringNum };
	    }
	    if (typeof value === 'string') {
	        if ((0, definitions_1$6.isEnumType)(type)) {
	            return { kind: graphql_1$9.Kind.ENUM, value: value };
	        }
	        if (type === type.schema().idType() && integerStringRegExp.test(value)) {
	            return { kind: graphql_1$9.Kind.INT, value: value };
	        }
	        return {
	            kind: graphql_1$9.Kind.STRING,
	            value: value,
	        };
	    }
	    throw buildError(`Invalid value for type ${type}, cannot be converted to AST: ${(0, util_1$1.inspect)(value)}`);
	}
	values.valueToAST = valueToAST;
	function valueToASTUntyped(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return { kind: graphql_1$9.Kind.NULL };
	    }
	    if ((0, definitions_1$6.isVariable)(value)) {
	        return { kind: graphql_1$9.Kind.VARIABLE, name: { kind: graphql_1$9.Kind.NAME, value: value.name } };
	    }
	    if (Array.isArray(value)) {
	        const valuesNodes = [];
	        for (const item of value) {
	            const itemNode = valueToASTUntyped(item);
	            if (itemNode !== undefined) {
	                valuesNodes.push(itemNode);
	            }
	        }
	        return { kind: graphql_1$9.Kind.LIST, values: valuesNodes };
	    }
	    if (typeof value === 'object') {
	        const fieldNodes = [];
	        for (const key of Object.keys(value)) {
	            const fieldValue = valueToASTUntyped(value[key]);
	            if (fieldValue) {
	                fieldNodes.push({
	                    kind: graphql_1$9.Kind.OBJECT_FIELD,
	                    name: { kind: graphql_1$9.Kind.NAME, value: key },
	                    value: fieldValue,
	                });
	            }
	        }
	        return { kind: graphql_1$9.Kind.OBJECT, fields: fieldNodes };
	    }
	    if (typeof value === 'boolean') {
	        return { kind: graphql_1$9.Kind.BOOLEAN, value: value };
	    }
	    if (typeof value === 'number' && isFinite(value)) {
	        const stringNum = String(value);
	        return integerStringRegExp.test(stringNum)
	            ? { kind: graphql_1$9.Kind.INT, value: stringNum }
	            : { kind: graphql_1$9.Kind.FLOAT, value: stringNum };
	    }
	    if (typeof value === 'string') {
	        return { kind: graphql_1$9.Kind.STRING, value: value };
	    }
	    throw buildError(`Invalid value, cannot be converted to AST: ${(0, util_1$1.inspect)(value, true, 10, true)}`);
	}
	function isValidVariable(variable, locationType, locationDefault) {
	    const variableType = variable.type;
	    if ((0, definitions_1$6.isNonNullType)(locationType) && !(0, definitions_1$6.isNonNullType)(variableType)) {
	        const hasVariableDefault = variable.defaultValue !== undefined && variable.defaultValue !== null;
	        const hasLocationDefault = locationDefault !== undefined;
	        if (!hasVariableDefault && !hasLocationDefault) {
	            return false;
	        }
	        return areTypesCompatible(variableType, locationType.ofType);
	    }
	    return areTypesCompatible(variableType, locationType);
	}
	function areTypesCompatible(variableType, locationType) {
	    if ((0, definitions_1$6.isNonNullType)(locationType)) {
	        if (!(0, definitions_1$6.isNonNullType)(variableType)) {
	            return false;
	        }
	        return areTypesCompatible(variableType.ofType, locationType.ofType);
	    }
	    if ((0, definitions_1$6.isNonNullType)(variableType)) {
	        return areTypesCompatible(variableType.ofType, locationType);
	    }
	    if ((0, definitions_1$6.isListType)(locationType)) {
	        if (!(0, definitions_1$6.isListType)(variableType)) {
	            return false;
	        }
	        return areTypesCompatible(variableType.ofType, locationType.ofType);
	    }
	    return !(0, definitions_1$6.isListType)(variableType) && (0, types_1$2.sameType)(variableType, locationType);
	}
	function isValidValue(value, argument, variableDefinitions) {
	    return isValidValueApplication(value, argument.type, argument.defaultValue, variableDefinitions);
	}
	values.isValidValue = isValidValue;
	function isValidValueApplication(value, locationType, locationDefault, variableDefinitions) {
	    if ((0, definitions_1$6.isVariable)(value)) {
	        const definition = variableDefinitions.definition(value);
	        return !!definition && isValidVariable(definition, locationType, locationDefault);
	    }
	    if ((0, definitions_1$6.isNonNullType)(locationType)) {
	        return value !== null && isValidValueApplication(value, locationType.ofType, undefined, variableDefinitions);
	    }
	    if (value === null || value === undefined) {
	        return true;
	    }
	    if ((0, definitions_1$6.isCustomScalarType)(locationType)) {
	        return true;
	    }
	    if ((0, definitions_1$6.isListType)(locationType)) {
	        const itemType = locationType.ofType;
	        if (Array.isArray(value)) {
	            return value.every(item => isValidValueApplication(item, itemType, undefined, variableDefinitions));
	        }
	        return isValidValueApplication(value, itemType, locationDefault, variableDefinitions);
	    }
	    if ((0, definitions_1$6.isInputObjectType)(locationType)) {
	        if (typeof value !== 'object') {
	            return false;
	        }
	        const isValid = locationType.fields().every(field => isValidValueApplication(value[field.name], field.type, undefined, variableDefinitions));
	        return isValid;
	    }
	    const schema = locationType.schema();
	    if (typeof value === 'boolean') {
	        return locationType === schema.booleanType();
	    }
	    if (typeof value === 'number' && isFinite(value)) {
	        const stringNum = String(value);
	        if (locationType === schema.intType() || locationType === schema.idType()) {
	            return integerStringRegExp.test(stringNum);
	        }
	        return locationType === schema.floatType();
	    }
	    if (typeof value === 'string') {
	        if ((0, definitions_1$6.isEnumType)(locationType)) {
	            return locationType.value(value) !== undefined;
	        }
	        return (0, definitions_1$6.isScalarType)(locationType)
	            && locationType !== schema.booleanType()
	            && locationType !== schema.intType()
	            && locationType !== schema.floatType();
	    }
	    return false;
	}
	function valueFromAST(node, expectedType) {
	    if (node.kind === graphql_1$9.Kind.NULL) {
	        if ((0, definitions_1$6.isNonNullType)(expectedType)) {
	            throw new graphql_1$9.GraphQLError(`Invalid null value for non-null type "${expectedType}"`);
	        }
	        return null;
	    }
	    if (node.kind === graphql_1$9.Kind.VARIABLE) {
	        return new definitions_1$6.Variable(node.name.value);
	    }
	    if ((0, definitions_1$6.isNonNullType)(expectedType)) {
	        expectedType = expectedType.ofType;
	    }
	    if ((0, definitions_1$6.isListType)(expectedType)) {
	        const baseType = expectedType.ofType;
	        if (node.kind === graphql_1$9.Kind.LIST) {
	            return node.values.map(v => valueFromAST(v, baseType));
	        }
	        return [valueFromAST(node, baseType)];
	    }
	    if ((0, definitions_1$6.isIntType)(expectedType)) {
	        if (node.kind !== graphql_1$9.Kind.INT) {
	            throw new graphql_1$9.GraphQLError(`Int cannot represent non-integer value ${(0, graphql_1$9.print)(node)}.`);
	        }
	        const i = parseInt(node.value, 10);
	        if (i > MAX_INT || i < MIN_INT) {
	            throw new graphql_1$9.GraphQLError(`Int cannot represent non 32-bit signed integer value ${i}.`);
	        }
	        return i;
	    }
	    if ((0, definitions_1$6.isFloatType)(expectedType)) {
	        let parsed;
	        if (node.kind === graphql_1$9.Kind.INT) {
	            parsed = parseInt(node.value, 10);
	        }
	        else if (node.kind === graphql_1$9.Kind.FLOAT) {
	            parsed = parseFloat(node.value);
	        }
	        else {
	            throw new graphql_1$9.GraphQLError(`Float can only represent integer or float value, but got a ${node.kind}.`);
	        }
	        if (!isFinite(parsed)) {
	            throw new graphql_1$9.GraphQLError(`Float cannot represent non numeric value ${parsed}.`);
	        }
	        return parsed;
	    }
	    if ((0, definitions_1$6.isBooleanType)(expectedType)) {
	        if (node.kind !== graphql_1$9.Kind.BOOLEAN) {
	            throw new graphql_1$9.GraphQLError(`Boolean cannot represent a non boolean value ${(0, graphql_1$9.print)(node)}.`);
	        }
	        return node.value;
	    }
	    if ((0, definitions_1$6.isStringType)(expectedType)) {
	        if (node.kind !== graphql_1$9.Kind.STRING) {
	            throw new graphql_1$9.GraphQLError(`String cannot represent non string value ${(0, graphql_1$9.print)(node)}.`);
	        }
	        return node.value;
	    }
	    if ((0, definitions_1$6.isIDType)(expectedType)) {
	        if (node.kind !== graphql_1$9.Kind.STRING && node.kind !== graphql_1$9.Kind.INT) {
	            throw new graphql_1$9.GraphQLError(`ID cannot represent value ${(0, graphql_1$9.print)(node)}.`);
	        }
	        return node.value;
	    }
	    if ((0, definitions_1$6.isScalarType)(expectedType)) {
	        return valueFromASTUntyped(node);
	    }
	    if ((0, definitions_1$6.isInputObjectType)(expectedType)) {
	        if (node.kind !== graphql_1$9.Kind.OBJECT) {
	            throw new graphql_1$9.GraphQLError(`Input Object Type ${expectedType} cannot represent non-object value ${(0, graphql_1$9.print)(node)}.`);
	        }
	        const obj = Object.create(null);
	        for (const f of node.fields) {
	            const name = f.name.value;
	            const field = expectedType.field(name);
	            if (!field) {
	                throw new graphql_1$9.GraphQLError(`Unknown field "${name}" found in value for Input Object Type "${expectedType}".`);
	            }
	            obj[name] = valueFromAST(f.value, field.type);
	        }
	        return obj;
	    }
	    if ((0, definitions_1$6.isEnumType)(expectedType)) {
	        if (node.kind !== graphql_1$9.Kind.STRING && node.kind !== graphql_1$9.Kind.ENUM) {
	            throw new graphql_1$9.GraphQLError(`Enum Type ${expectedType} cannot represent value ${(0, graphql_1$9.print)(node)}.`);
	        }
	        if (!expectedType.value(node.value)) {
	            throw new graphql_1$9.GraphQLError(`Enum Type ${expectedType} has no value ${node.value}.`);
	        }
	        return node.value;
	    }
	    (0, utils_1$3.assert)(false, () => `Unexpected input type ${expectedType} of kind ${expectedType.kind}.`);
	}
	values.valueFromAST = valueFromAST;
	function valueFromASTUntyped(node) {
	    switch (node.kind) {
	        case graphql_1$9.Kind.NULL:
	            return null;
	        case graphql_1$9.Kind.INT:
	            return parseInt(node.value, 10);
	        case graphql_1$9.Kind.FLOAT:
	            return parseFloat(node.value);
	        case graphql_1$9.Kind.STRING:
	        case graphql_1$9.Kind.ENUM:
	        case graphql_1$9.Kind.BOOLEAN:
	            return node.value;
	        case graphql_1$9.Kind.LIST:
	            return node.values.map(valueFromASTUntyped);
	        case graphql_1$9.Kind.OBJECT:
	            const obj = Object.create(null);
	            node.fields.forEach(f => obj[f.name.value] = valueFromASTUntyped(f.value));
	            return obj;
	        case graphql_1$9.Kind.VARIABLE:
	            return new definitions_1$6.Variable(node.name.value);
	    }
	}
	function argumentsFromAST(context, args, argsDefiner) {
	    var _a;
	    const values = Object.create(null);
	    if (args) {
	        for (const argNode of args) {
	            const name = argNode.name.value;
	            const expectedType = (_a = argsDefiner.argument(name)) === null || _a === void 0 ? void 0 : _a.type;
	            if (!expectedType) {
	                throw new graphql_1$9.GraphQLError(`Unknown argument "${name}" found in value: ${context} has no argument named "${name}"`);
	            }
	            try {
	                values[name] = valueFromAST(argNode.value, expectedType);
	            }
	            catch (e) {
	                if (e instanceof graphql_1$9.GraphQLError) {
	                    throw new graphql_1$9.GraphQLError(`Invalid value for argument ${name}: ${e.message}`);
	                }
	                throw e;
	            }
	        }
	    }
	    return values;
	}
	values.argumentsFromAST = argumentsFromAST;
	function variablesInValue(value) {
	    const variables = [];
	    collectVariables(value, variables);
	    return variables;
	}
	values.variablesInValue = variablesInValue;
	function collectVariables(value, variables) {
	    if ((0, definitions_1$6.isVariable)(value)) {
	        if (!variables.some(v => v.name === value.name)) {
	            variables.push(value);
	        }
	        return;
	    }
	    if (!value) {
	        return;
	    }
	    if (Array.isArray(value)) {
	        value.forEach(v => collectVariables(v, variables));
	    }
	    if (typeof value === 'object') {
	        Object.keys(value).forEach(k => collectVariables(value[k], variables));
	    }
	}

	var inaccessibleSpec = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.removeInaccessibleElements = exports.INACCESSIBLE_VERSIONS = exports.InaccessibleSpecDefinition = exports.inaccessibleIdentity = void 0;
	const coreSpec_1 = coreSpec$1;
	const definitions_1 = definitions;
	const graphql_1 = require$$2$2;
	exports.inaccessibleIdentity = 'https://specs.apollo.dev/inaccessible';
	class InaccessibleSpecDefinition extends coreSpec_1.FeatureDefinition {
	    constructor(version) {
	        super(new coreSpec_1.FeatureUrl(exports.inaccessibleIdentity, 'inaccessible', version));
	    }
	    addElementsToSchema(schema) {
	        this.addDirective(schema, 'inaccessible').addLocations(graphql_1.DirectiveLocation.FIELD_DEFINITION, graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE, graphql_1.DirectiveLocation.UNION);
	    }
	    inaccessibleDirective(schema) {
	        return this.directive(schema, 'inaccessible');
	    }
	}
	exports.InaccessibleSpecDefinition = InaccessibleSpecDefinition;
	exports.INACCESSIBLE_VERSIONS = new coreSpec_1.FeatureDefinitions(exports.inaccessibleIdentity)
	    .add(new InaccessibleSpecDefinition(new coreSpec_1.FeatureVersion(0, 1)));
	function removeInaccessibleElements(schema) {
	    const coreFeatures = schema.coreFeatures;
	    if (!coreFeatures) {
	        return;
	    }
	    const inaccessibleFeature = coreFeatures.getByIdentity(exports.inaccessibleIdentity);
	    if (!inaccessibleFeature) {
	        return;
	    }
	    const inaccessibleSpec = exports.INACCESSIBLE_VERSIONS.find(inaccessibleFeature.url.version);
	    if (!inaccessibleSpec) {
	        throw new graphql_1.GraphQLError(`Cannot remove inaccessible elements: the schema uses unsupported inaccessible spec version ${inaccessibleFeature.url.version} (supported versions: ${exports.INACCESSIBLE_VERSIONS.versions().join(', ')})`);
	    }
	    const inaccessibleDirective = inaccessibleSpec.inaccessibleDirective(schema);
	    if (!inaccessibleDirective) {
	        throw new graphql_1.GraphQLError(`Invalid schema: declares ${inaccessibleSpec.url} spec but does not define a @inaccessible directive`);
	    }
	    for (const type of schema.types()) {
	        if (!(0, definitions_1.isCompositeType)(type)) {
	            continue;
	        }
	        if (type.hasAppliedDirective(inaccessibleDirective)) {
	            const references = type.remove();
	            for (const reference of references) {
	                if (reference.kind === 'FieldDefinition') {
	                    if (!reference.hasAppliedDirective(inaccessibleDirective)) {
	                        throw new graphql_1.GraphQLError(`Field ${reference.coordinate} returns an @inaccessible type without being marked @inaccessible itself.`, reference.sourceAST);
	                    }
	                }
	            }
	        }
	        else if ((0, definitions_1.isObjectType)(type) || (0, definitions_1.isInterfaceType)(type)) {
	            const toRemove = type.fields().filter(f => f.hasAppliedDirective(inaccessibleDirective));
	            toRemove.forEach(f => f.remove());
	        }
	    }
	}
	exports.removeInaccessibleElements = removeInaccessibleElements;

	}(inaccessibleSpec));

	var print = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.printDirectiveDefinition = exports.printTypeDefinitionAndExtensions = exports.printType = exports.printSchema = exports.orderPrintedDefinitions = exports.defaultPrintOptions = void 0;
	const utils_1 = utils;
	const values_1 = values;
	exports.defaultPrintOptions = {
	    indentString: "  ",
	    definitionsOrder: ['schema', 'directives', 'types'],
	    rootTypesOrder: ['query', 'mutation', 'subscription'],
	    mergeTypesAndExtensions: false,
	    showAllBuiltIns: false,
	    showNonGraphQLBuiltIns: false,
	    noDescriptions: false,
	};
	function orderPrintedDefinitions(options) {
	    return {
	        ...options,
	        typeCompareFn: (t1, t2) => t1.name.localeCompare(t2.name),
	        directiveCompareFn: (t1, t2) => t1.name.localeCompare(t2.name),
	    };
	}
	exports.orderPrintedDefinitions = orderPrintedDefinitions;
	function isDefinitionOrderValid(options) {
	    return options.definitionsOrder.length === 3
	        && options.definitionsOrder.indexOf('schema') >= 0
	        && options.definitionsOrder.indexOf('types') >= 0
	        && options.definitionsOrder.indexOf('directives') >= 0;
	}
	function validateOptions(options) {
	    if (!isDefinitionOrderValid(options)) {
	        throw new Error(`'definitionsOrder' should be a 3-element array containing 'schema', 'types' and 'directives' in the desired order (got: [${options.definitionsOrder.join(', ')}])`);
	    }
	}
	function printSchema(schema, options = exports.defaultPrintOptions) {
	    validateOptions(options);
	    let directives = options.showAllBuiltIns ? schema.allDirectives() : schema.directives(options.showNonGraphQLBuiltIns);
	    if (options.directiveCompareFn) {
	        directives = directives.concat().sort(options.directiveCompareFn);
	    }
	    let types = options.showAllBuiltIns ? schema.allTypes() : schema.types(undefined, options.showNonGraphQLBuiltIns);
	    if (options.typeCompareFn) {
	        types = types.concat().sort(options.typeCompareFn);
	    }
	    const definitions = new Array(3);
	    definitions[options.definitionsOrder.indexOf('schema')] = printSchemaDefinitionAndExtensions(schema.schemaDefinition, options);
	    definitions[options.definitionsOrder.indexOf('directives')] = directives.map(directive => printDirectiveDefinition(directive, options));
	    definitions[options.definitionsOrder.indexOf('types')] = types.flatMap(type => printTypeDefinitionAndExtensions(type, options));
	    return definitions.flat().join('\n\n');
	}
	exports.printSchema = printSchema;
	function definitionAndExtensions(element, options) {
	    return options.mergeTypesAndExtensions ? [undefined] : [null, ...element.extensions()];
	}
	function printSchemaDefinitionAndExtensions(schemaDefinition, options) {
	    if (isSchemaOfCommonNames(schemaDefinition)) {
	        return [];
	    }
	    return printDefinitionAndExtensions(schemaDefinition, options, printSchemaDefinitionOrExtension);
	}
	function printDefinitionAndExtensions(t, options, printer) {
	    return definitionAndExtensions(t, options)
	        .map(ext => printer(t, options, ext))
	        .filter(v => v !== undefined);
	}
	function printIsExtension(extension) {
	    return extension ? 'extend ' : '';
	}
	function forExtension(ts, extension) {
	    if (extension === undefined) {
	        return ts;
	    }
	    return ts.filter(r => { var _a; return ((_a = r.ofExtension()) !== null && _a !== void 0 ? _a : null) === extension; });
	}
	function orderRoots(roots, options) {
	    return roots.concat().sort((r1, r2) => options.rootTypesOrder.indexOf(r1.rootKind) - options.rootTypesOrder.indexOf(r2.rootKind));
	}
	function printSchemaDefinitionOrExtension(schemaDefinition, options, extension) {
	    const roots = forExtension(schemaDefinition.roots(), extension);
	    const directives = forExtension(schemaDefinition.appliedDirectives, extension);
	    if (!roots.length && !directives.length) {
	        return undefined;
	    }
	    const rootEntries = orderRoots(roots, options).map((rootType) => `${options.indentString}${rootType.rootKind}: ${rootType.type}`);
	    return printDescription(schemaDefinition, options)
	        + printIsExtension(extension)
	        + 'schema'
	        + printAppliedDirectives(directives, options, true)
	        + (directives.length === 0 ? ' ' : '')
	        + '{\n' + rootEntries.join('\n') + '\n}';
	}
	function isSchemaOfCommonNames(schema) {
	    return schema.appliedDirectives.length === 0 && !schema.description && schema.roots().every(r => r.isDefaultRootName());
	}
	function printType(type, options = exports.defaultPrintOptions) {
	    const definitionAndExtensions = printTypeDefinitionAndExtensions(type, options);
	    (0, utils_1.assert)(definitionAndExtensions.length == 1, `Type ${type} is built from more than 1 definition or extension`);
	    return definitionAndExtensions[0];
	}
	exports.printType = printType;
	function printTypeDefinitionAndExtensions(type, options = exports.defaultPrintOptions) {
	    switch (type.kind) {
	        case 'ScalarType': return printDefinitionAndExtensions(type, options, printScalarDefinitionOrExtension);
	        case 'ObjectType': return printDefinitionAndExtensions(type, options, (t, options, ext) => printFieldBasedTypeDefinitionOrExtension('type', t, options, ext));
	        case 'InterfaceType': return printDefinitionAndExtensions(type, options, (t, options, ext) => printFieldBasedTypeDefinitionOrExtension('interface', t, options, ext));
	        case 'UnionType': return printDefinitionAndExtensions(type, options, printUnionDefinitionOrExtension);
	        case 'EnumType': return printDefinitionAndExtensions(type, options, printEnumDefinitionOrExtension);
	        case 'InputObjectType': return printDefinitionAndExtensions(type, options, printInputDefinitionOrExtension);
	    }
	}
	exports.printTypeDefinitionAndExtensions = printTypeDefinitionAndExtensions;
	function printDirectiveDefinition(directive, options) {
	    const locations = directive.locations.join(' | ');
	    return `${printDescription(directive, options)}directive ${directive}${printArgs(directive.arguments(), options)}${directive.repeatable ? ' repeatable' : ''} on ${locations}`;
	}
	exports.printDirectiveDefinition = printDirectiveDefinition;
	function printAppliedDirectives(appliedDirectives, options, onNewLines = false, endWithNewLine = onNewLines) {
	    if (appliedDirectives.length == 0) {
	        return "";
	    }
	    const joinStr = onNewLines ? '\n' + options.indentString : ' ';
	    const directives = appliedDirectives.map(d => d.toString()).join(joinStr);
	    return onNewLines ? '\n' + options.indentString + directives + (endWithNewLine ? '\n' : '') : ' ' + directives;
	}
	function printDescription(element, options, indentation = '', firstInBlock = true) {
	    if (element.description === undefined || options.noDescriptions) {
	        return '';
	    }
	    const preferMultipleLines = element.description.length > 70;
	    const blockString = printBlockString(element.description, '', preferMultipleLines);
	    const prefix = indentation && !firstInBlock ? '\n' + indentation : indentation;
	    return prefix + blockString.replace(/\n/g, '\n' + indentation) + '\n';
	}
	function printScalarDefinitionOrExtension(type, options, extension) {
	    const directives = forExtension(type.appliedDirectives, extension);
	    if (extension && !directives.length) {
	        return undefined;
	    }
	    return `${printDescription(type, options)}${printIsExtension(extension)}scalar ${type.name}${printAppliedDirectives(directives, options, true, false)}`;
	}
	function printImplementedInterfaces(implementations) {
	    return implementations.length
	        ? ' implements ' + implementations.map(i => i.interface.name).join(' & ')
	        : '';
	}
	function printFieldBasedTypeDefinitionOrExtension(kind, type, options, extension) {
	    const directives = forExtension(type.appliedDirectives, extension);
	    const interfaces = forExtension(type.interfaceImplementations(), extension);
	    const fields = forExtension(type.fields(options.showNonGraphQLBuiltIns), extension);
	    if (!directives.length && !interfaces.length && !fields.length) {
	        return undefined;
	    }
	    return printDescription(type, options)
	        + printIsExtension(extension)
	        + kind + ' ' + type
	        + printImplementedInterfaces(interfaces)
	        + printAppliedDirectives(directives, options, true, fields.length > 0)
	        + (directives.length === 0 ? ' ' : '')
	        + printFields(fields, options);
	}
	function printUnionDefinitionOrExtension(type, options, extension) {
	    const directives = forExtension(type.appliedDirectives, extension);
	    const members = forExtension(type.members(), extension);
	    if (!directives.length && !members.length) {
	        return undefined;
	    }
	    const possibleTypes = members.length ? ' = ' + members.map(m => m.type).join(' | ') : '';
	    return printDescription(type, options)
	        + printIsExtension(extension)
	        + 'union ' + type
	        + printAppliedDirectives(directives, options, true, members.length > 0)
	        + possibleTypes;
	}
	function printEnumDefinitionOrExtension(type, options, extension) {
	    const directives = forExtension(type.appliedDirectives, extension);
	    const values = forExtension(type.values, extension);
	    if (!directives.length && !values.length) {
	        return undefined;
	    }
	    const vals = values.map((v, i) => printDescription(v, options, options.indentString, !i)
	        + options.indentString
	        + v
	        + printAppliedDirectives(v.appliedDirectives, options));
	    return printDescription(type, options)
	        + printIsExtension(extension)
	        + 'enum ' + type
	        + printAppliedDirectives(directives, options, true, vals.length > 0)
	        + (directives.length === 0 ? ' ' : '')
	        + printBlock(vals);
	}
	function printInputDefinitionOrExtension(type, options, extension) {
	    const directives = forExtension(type.appliedDirectives, extension);
	    const fields = forExtension(type.fields(), extension);
	    if (!directives.length && !fields.length) {
	        return undefined;
	    }
	    return printDescription(type, options)
	        + printIsExtension(extension)
	        + 'input ' + type
	        + printAppliedDirectives(directives, options, true, fields.length > 0)
	        + (directives.length === 0 ? ' ' : '')
	        + printFields(fields, options);
	}
	function printFields(fields, options) {
	    return printBlock(fields.map((f, i) => printDescription(f, options, options.indentString, !i)
	        + options.indentString
	        + printField(f, options)
	        + printAppliedDirectives(f.appliedDirectives, options)));
	}
	function printField(field, options) {
	    const args = field.kind == 'FieldDefinition' ? printArgs(field.arguments(), options, options.indentString) : '';
	    const defaultValue = field.kind === 'InputFieldDefinition' && field.defaultValue !== undefined
	        ? ' = ' + (0, values_1.valueToString)(field.defaultValue, field.type)
	        : '';
	    return `${field.name}${args}: ${field.type}${defaultValue}`;
	}
	function printArgs(args, options, indentation = '') {
	    if (args.length === 0) {
	        return '';
	    }
	    if (args.every(arg => !arg.description)) {
	        return '(' + args.map(arg => printArg(arg, options)).join(', ') + ')';
	    }
	    const formattedArgs = args
	        .map((arg, i) => printDescription(arg, options, '  ' + indentation, !i) + '  ' + indentation + printArg(arg, options))
	        .join('\n');
	    return `(\n${formattedArgs}\n${indentation})`;
	}
	function printArg(arg, options) {
	    return `${arg}${printAppliedDirectives(arg.appliedDirectives, options)}`;
	}
	function printBlock(items) {
	    return items.length !== 0 ? '{\n' + items.join('\n') + '\n}' : '';
	}
	function printBlockString(value, indentation = '', preferMultipleLines = false) {
	    const isSingleLine = value.indexOf('\n') === -1;
	    const hasLeadingSpace = value[0] === ' ' || value[0] === '\t';
	    const hasTrailingQuote = value[value.length - 1] === '"';
	    const hasTrailingSlash = value[value.length - 1] === '\\';
	    const printAsMultipleLines = !isSingleLine ||
	        hasTrailingQuote ||
	        hasTrailingSlash ||
	        preferMultipleLines;
	    let result = '';
	    if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
	        result += '\n' + indentation;
	    }
	    result += indentation ? value.replace(/\n/g, '\n' + indentation) : value;
	    if (printAsMultipleLines) {
	        result += '\n';
	    }
	    return '"""' + result.replace(/"""/g, '\\"""') + '"""';
	}

	}(print));

	var introspection = {};

	Object.defineProperty(introspection, "__esModule", { value: true });
	introspection.addIntrospectionFields = introspection.isIntrospectionName = introspection.introspectionFieldNames = void 0;
	const graphql_1$8 = require$$2$2;
	const definitions_1$5 = definitions;
	introspection.introspectionFieldNames = ['__schema', '__type'];
	function isIntrospectionName(name) {
	    return name.startsWith('__');
	}
	introspection.isIntrospectionName = isIntrospectionName;
	function addIntrospectionFields(schema) {
	    if (schema.type('__Schema')) {
	        return;
	    }
	    const typeKindEnum = schema.addType(new definitions_1$5.EnumType('__TypeKind', true));
	    typeKindEnum.addValue('SCALAR');
	    typeKindEnum.addValue('OBJECT');
	    typeKindEnum.addValue('INTERFACE');
	    typeKindEnum.addValue('UNION');
	    typeKindEnum.addValue('ENUM');
	    typeKindEnum.addValue('INPUT_OBJECT');
	    typeKindEnum.addValue('LIST');
	    typeKindEnum.addValue('NON_NULL');
	    const inputValueType = schema.addType(new definitions_1$5.ObjectType('__InputValue', true));
	    const fieldType = schema.addType(new definitions_1$5.ObjectType('__Field', true));
	    const typeType = schema.addType(new definitions_1$5.ObjectType('__Type', true));
	    const enumValueType = schema.addType(new definitions_1$5.ObjectType('__EnumValue', true));
	    typeType.addField('kind', new definitions_1$5.NonNullType(typeKindEnum));
	    typeType.addField('name', schema.stringType());
	    typeType.addField('description', schema.stringType());
	    typeType.addField('fields', new definitions_1$5.ListType(new definitions_1$5.NonNullType(fieldType)))
	        .addArgument('includeDeprecated', schema.booleanType(), false);
	    typeType.addField('interfaces', new definitions_1$5.ListType(new definitions_1$5.NonNullType(typeType)));
	    typeType.addField('possibleTypes', new definitions_1$5.ListType(new definitions_1$5.NonNullType(typeType)));
	    typeType.addField('enumValues', new definitions_1$5.ListType(new definitions_1$5.NonNullType(enumValueType)))
	        .addArgument('includeDeprecated', schema.booleanType(), false);
	    typeType.addField('inputFields', new definitions_1$5.ListType(new definitions_1$5.NonNullType(inputValueType)));
	    typeType.addField('ofType', typeType);
	    typeType.addField('specifiedByURL', schema.stringType());
	    fieldType.addField('name', new definitions_1$5.NonNullType(schema.stringType()));
	    fieldType.addField('description', schema.stringType());
	    fieldType.addField('args', new definitions_1$5.NonNullType(new definitions_1$5.ListType(new definitions_1$5.NonNullType(inputValueType))));
	    fieldType.addField('type', new definitions_1$5.NonNullType(typeType));
	    fieldType.addField('isDeprecated', new definitions_1$5.NonNullType(schema.booleanType()));
	    fieldType.addField('deprecationReason', schema.stringType());
	    inputValueType.addField('name', new definitions_1$5.NonNullType(schema.stringType()));
	    inputValueType.addField('description', schema.stringType());
	    inputValueType.addField('type', new definitions_1$5.NonNullType(typeType));
	    inputValueType.addField('defaultValue', schema.stringType());
	    enumValueType.addField('name', new definitions_1$5.NonNullType(schema.stringType()));
	    enumValueType.addField('description', schema.stringType());
	    enumValueType.addField('isDeprecated', new definitions_1$5.NonNullType(schema.booleanType()));
	    enumValueType.addField('deprecationReason', schema.stringType());
	    const directiveLocationEnum = schema.addType(new definitions_1$5.EnumType('__DirectiveLocation', true));
	    for (const location of Object.values(graphql_1$8.DirectiveLocation)) {
	        directiveLocationEnum.addValue(location);
	    }
	    const directiveType = schema.addType(new definitions_1$5.ObjectType('__Directive', true));
	    directiveType.addField('name', new definitions_1$5.NonNullType(schema.stringType()));
	    directiveType.addField('description', schema.stringType());
	    directiveType.addField('locations', new definitions_1$5.NonNullType(new definitions_1$5.ListType(new definitions_1$5.NonNullType(directiveLocationEnum))));
	    directiveType.addField('args', new definitions_1$5.NonNullType(new definitions_1$5.ListType(new definitions_1$5.NonNullType(inputValueType))));
	    directiveType.addField('isRepeatable', new definitions_1$5.NonNullType(schema.booleanType()));
	    const schemaType = schema.addType(new definitions_1$5.ObjectType('__Schema', true));
	    schemaType.addField('description', schema.stringType());
	    schemaType.addField('types', new definitions_1$5.NonNullType(new definitions_1$5.ListType(new definitions_1$5.NonNullType(typeType))));
	    schemaType.addField('queryType', new definitions_1$5.NonNullType(typeType));
	    schemaType.addField('mutationType', new definitions_1$5.NonNullType(typeType));
	    schemaType.addField('subscriptionType', new definitions_1$5.NonNullType(typeType));
	    schemaType.addField('directives', new definitions_1$5.NonNullType(new definitions_1$5.ListType(new definitions_1$5.NonNullType(directiveType))));
	    let queryRoot = schema.schemaDefinition.rootType('query');
	    if (!queryRoot) {
	        queryRoot = schema.addType(new definitions_1$5.ObjectType('Query'));
	        schema.schemaDefinition.setRoot('query', queryRoot);
	    }
	    queryRoot.addField(new definitions_1$5.FieldDefinition('__schema', true), new definitions_1$5.NonNullType(schemaType));
	    queryRoot.addField(new definitions_1$5.FieldDefinition('__type', true), typeType)
	        .addArgument('name', new definitions_1$5.NonNullType(schema.stringType()));
	}
	introspection.addIntrospectionFields = addIntrospectionFields;

	var require$$10$1 = /*@__PURE__*/getAugmentedNamespace(validate$4);

	var require$$2$1 = /*@__PURE__*/getAugmentedNamespace(specifiedRules$1);

	var validate$2 = {};

	Object.defineProperty(validate$2, "__esModule", { value: true });
	validate$2.validateSchema = void 0;
	const definitions_1$4 = definitions;
	const graphql_1$7 = require$$2$2;
	const values_1$1 = values;
	const introspection_1 = introspection;
	const types_1$1 = types;
	function validateSchema(schema) {
	    return new Validator(schema).validate();
	}
	validate$2.validateSchema = validateSchema;
	class InputObjectCircularRefsValidator {
	    constructor(onError) {
	        this.onError = onError;
	        this.visitedTypes = new Set();
	        this.fieldPath = [];
	        this.fieldPathIndexByTypeName = new Map();
	    }
	    detectCycles(type) {
	        if (this.visitedTypes.has(type.name)) {
	            return;
	        }
	        this.visitedTypes.add(type.name);
	        this.fieldPathIndexByTypeName.set(type.name, this.fieldPath.length);
	        for (const field of type.fields()) {
	            if ((0, definitions_1$4.isNonNullType)(field.type) && (0, definitions_1$4.isInputObjectType)(field.type.ofType)) {
	                const fieldType = field.type.ofType;
	                const cycleIndex = this.fieldPathIndexByTypeName.get(fieldType.name);
	                this.fieldPath.push(field);
	                if (cycleIndex === undefined) {
	                    this.detectCycles(fieldType);
	                }
	                else {
	                    const cyclePath = this.fieldPath.slice(cycleIndex);
	                    const pathStr = cyclePath.map((fieldObj) => fieldObj.name).join('.');
	                    this.onError(new graphql_1$7.GraphQLError(`Cannot reference Input Object "${fieldType.name}" within itself through a series of non-null fields: "${pathStr}".`, (0, definitions_1$4.sourceASTs)(...cyclePath)));
	                }
	                this.fieldPath.pop();
	            }
	        }
	        this.fieldPathIndexByTypeName.delete(type.name);
	    }
	}
	class Validator {
	    constructor(schema) {
	        this.schema = schema;
	        this.emptyVariables = new definitions_1$4.VariableDefinitions();
	        this.hasMissingTypes = false;
	        this.errors = [];
	    }
	    validate() {
	        for (const type of this.schema.types()) {
	            this.validateName(type);
	            switch (type.kind) {
	                case 'ObjectType':
	                case 'InterfaceType':
	                    this.validateObjectOrInterfaceType(type);
	                    break;
	                case 'InputObjectType':
	                    this.validateInputObjectType(type);
	                    break;
	                case 'UnionType':
	                    this.validateUnionType(type);
	                    break;
	                case 'EnumType':
	                    this.validateEnumType(type);
	                    break;
	            }
	        }
	        for (const directive of this.schema.allDirectives()) {
	            this.validateName(directive);
	            for (const arg of directive.arguments()) {
	                this.validateArg(arg);
	            }
	            for (const application of directive.applications()) {
	                this.validateDirectiveApplication(directive, application);
	            }
	        }
	        if (!this.hasMissingTypes) {
	            const refsValidator = new InputObjectCircularRefsValidator(e => this.errors.push(e));
	            for (const type of this.schema.types()) {
	                switch (type.kind) {
	                    case 'ObjectType':
	                    case 'InterfaceType':
	                        this.validateImplementedInterfaces(type);
	                        break;
	                    case 'InputObjectType':
	                        refsValidator.detectCycles(type);
	                        break;
	                }
	            }
	        }
	        return this.errors;
	    }
	    validateHasType(elt) {
	        if (!elt.type) {
	            this.errors.push(new graphql_1$7.GraphQLError(`Element ${elt.coordinate} does not have a type set`, elt.sourceAST));
	            this.hasMissingTypes = false;
	        }
	    }
	    validateName(elt) {
	        if ((0, introspection_1.isIntrospectionName)(elt.name)) {
	            return;
	        }
	        const error = (0, graphql_1$7.isValidNameError)(elt.name);
	        if (error) {
	            this.errors.push(elt.sourceAST ? new graphql_1$7.GraphQLError(error.message, elt.sourceAST) : error);
	        }
	    }
	    validateObjectOrInterfaceType(type) {
	        if (!type.hasFields(true)) {
	            this.errors.push(new graphql_1$7.GraphQLError(`Type ${type.name} must define one or more fields.`, type.sourceAST));
	        }
	        for (const field of type.fields()) {
	            this.validateName(field);
	            this.validateHasType(field);
	            for (const arg of field.arguments()) {
	                this.validateArg(arg);
	            }
	        }
	    }
	    validateImplementedInterfaces(type) {
	        if (type.implementsInterface(type.name)) {
	            this.errors.push(new graphql_1$7.GraphQLError(`Type ${type} cannot implement itself because it would create a circular reference.`, (0, definitions_1$4.sourceASTs)(type, type.interfaceImplementation(type.name))));
	        }
	        for (const itf of type.interfaces()) {
	            for (const itfField of itf.fields()) {
	                const field = type.field(itfField.name);
	                if (!field) {
	                    this.errors.push(new graphql_1$7.GraphQLError(`Interface field ${itfField.coordinate} expected but ${type} does not provide it.`, (0, definitions_1$4.sourceASTs)(itfField, type)));
	                    continue;
	                }
	                this.validateHasType(itfField);
	                if (!(0, types_1$1.isSubtype)(itfField.type, field.type)) {
	                    this.errors.push(new graphql_1$7.GraphQLError(`Interface field ${itfField.coordinate} expects type ${itfField.type} but ${field.coordinate} of type ${field.type} is not a proper subtype.`, (0, definitions_1$4.sourceASTs)(itfField, field)));
	                }
	                for (const itfArg of itfField.arguments()) {
	                    const arg = field.argument(itfArg.name);
	                    if (!arg) {
	                        this.errors.push(new graphql_1$7.GraphQLError(`Interface field argument ${itfArg.coordinate} expected but ${field.coordinate} does not provide it.`, (0, definitions_1$4.sourceASTs)(itfArg, field)));
	                        continue;
	                    }
	                    this.validateHasType(itfArg);
	                    if (!(0, types_1$1.sameType)(itfArg.type, arg.type)) {
	                        this.errors.push(new graphql_1$7.GraphQLError(`Interface field argument ${itfArg.coordinate} expects type ${itfArg.type} but ${arg.coordinate} is type ${arg.type}.`, (0, definitions_1$4.sourceASTs)(itfArg, arg)));
	                    }
	                }
	                for (const arg of field.arguments()) {
	                    if (itfField.argument(arg.name)) {
	                        continue;
	                    }
	                    if (arg.isRequired()) {
	                        this.errors.push(new graphql_1$7.GraphQLError(`Field ${field.coordinate} includes required argument ${arg.name} that is missing from the Interface field ${itfField.coordinate}.`, (0, definitions_1$4.sourceASTs)(arg, itfField)));
	                    }
	                }
	            }
	            for (const itfOfItf of itf.interfaces()) {
	                if (!type.implementsInterface(itfOfItf)) {
	                    if (itfOfItf === type) {
	                        this.errors.push(new graphql_1$7.GraphQLError(`Type ${type} cannot implement ${itf} because it would create a circular reference.`, (0, definitions_1$4.sourceASTs)(type, itf)));
	                    }
	                    else {
	                        this.errors.push(new graphql_1$7.GraphQLError(`Type ${type} must implement ${itfOfItf} because it is implemented by ${itf}.`, (0, definitions_1$4.sourceASTs)(type, itf, itfOfItf)));
	                    }
	                }
	            }
	        }
	    }
	    validateInputObjectType(type) {
	        if (!type.hasFields()) {
	            this.errors.push(new graphql_1$7.GraphQLError(`Input Object type ${type.name} must define one or more fields.`, type.sourceAST));
	        }
	        for (const field of type.fields()) {
	            this.validateName(field);
	            this.validateHasType(field);
	            if (field.isRequired() && field.isDeprecated()) {
	                this.errors.push(new graphql_1$7.GraphQLError(`Required input field ${field.coordinate} cannot be deprecated.`, (0, definitions_1$4.sourceASTs)(field.appliedDirectivesOf('deprecated')[0], field)));
	            }
	        }
	    }
	    validateArg(arg) {
	        this.validateName(arg);
	        this.validateHasType(arg);
	        if (arg.isRequired() && arg.isDeprecated()) {
	            this.errors.push(new graphql_1$7.GraphQLError(`Required argument ${arg.coordinate} cannot be deprecated.`, (0, definitions_1$4.sourceASTs)(arg.appliedDirectivesOf('deprecated')[0], arg)));
	        }
	    }
	    validateUnionType(type) {
	        if (type.membersCount() === 0) {
	            this.errors.push(new graphql_1$7.GraphQLError(`Union type ${type.coordinate} must define one or more member types.`, type.sourceAST));
	        }
	    }
	    validateEnumType(type) {
	        if (type.values.length === 0) {
	            this.errors.push(new graphql_1$7.GraphQLError(`Enum type ${type.coordinate} must define one or more values.`, type.sourceAST));
	        }
	        for (const value of type.values) {
	            this.validateName(value);
	            if (value.name === 'true' || value.name === 'false' || value.name === 'null') {
	                this.errors.push(new graphql_1$7.GraphQLError(`Enum type ${type.coordinate} cannot include value: ${value}.`, value.sourceAST));
	            }
	        }
	    }
	    validateDirectiveApplication(definition, application) {
	        for (const argument of definition.arguments()) {
	            const value = application.arguments()[argument.name];
	            if (!value) {
	                continue;
	            }
	            if (!(0, values_1$1.isValidValue)(value, argument, this.emptyVariables)) {
	                const parent = application.parent;
	                const parentDesc = parent instanceof definitions_1$4.NamedSchemaElement
	                    ? parent.coordinate
	                    : 'schema';
	                this.errors.push(new graphql_1$7.GraphQLError(`Invalid value for "${argument.coordinate}" of type "${argument.type}" in application of "${definition.coordinate}" to "${parentDesc}".`, (0, definitions_1$4.sourceASTs)(application, argument)));
	            }
	        }
	    }
	}

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ObjectType = exports.InterfaceImplementation = exports.ScalarType = exports.SchemaDefinition = exports.RootType = exports.Schema = exports.CoreFeatures = exports.CoreFeature = exports.BuiltIns = exports.NamedSchemaElementWithType = exports.NamedSchemaElement = exports.SchemaElement = exports.Extension = exports.sourceASTs = exports.DirectiveTargetElement = exports.isLeafType = exports.typeFromAST = exports.typeToAST = exports.executableDirectiveLocations = exports.runtimeTypesIntersects = exports.possibleRuntimeTypes = exports.isCompositeType = exports.isAbstractType = exports.isNullableType = exports.baseType = exports.isInputType = exports.isOutputType = exports.isInputObjectType = exports.isUnionType = exports.isEnumType = exports.isInterfaceType = exports.isObjectType = exports.isIDType = exports.isBooleanType = exports.isFloatType = exports.isStringType = exports.isIntType = exports.isCustomScalarType = exports.isScalarType = exports.isNonNullType = exports.isListType = exports.isWrapperType = exports.isNamedType = exports.defaultRootName = exports.allSchemaRootKinds = exports.typenameFieldName = exports.printErrors = exports.printGraphQLErrorsOrRethrow = exports.errorCauses = exports.ErrGraphQLValidationFailed = void 0;
	exports.newNamedType = exports.graphQLBuiltIns = exports.variableDefinitionFromAST = exports.variableDefinitionsFromAST = exports.VariableDefinitions = exports.VariableDefinition = exports.variablesInArguments = exports.isVariable = exports.containsVariable = exports.mergeVariables = exports.Variable = exports.Directive = exports.DirectiveDefinition = exports.EnumValue = exports.ArgumentDefinition = exports.InputFieldDefinition = exports.FieldDefinition = exports.NonNullType = exports.ListType = exports.InputObjectType = exports.EnumType = exports.UnionType = exports.UnionMember = exports.InterfaceType = void 0;
	const graphql_1 = require$$2$2;
	const coreSpec_1 = coreSpec$1;
	const utils_1 = utils;
	const values_1 = values;
	const inaccessibleSpec_1 = inaccessibleSpec;
	const print_1 = print;
	const types_1 = types;
	const introspection_1 = introspection;
	const core_schema_1 = dist$1;
	const error_1 = error$1;
	const validate_1 = require$$10$1;
	const specifiedRules_1 = require$$2$1;
	const validate_2 = validate$2;
	const validationErrorCode = 'GraphQLValidationFailed';
	const ErrGraphQLValidationFailed = (causes) => (0, core_schema_1.err)(validationErrorCode, {
	    message: 'The schema is not a valid GraphQL schema',
	    causes
	});
	exports.ErrGraphQLValidationFailed = ErrGraphQLValidationFailed;
	function errorCauses(e) {
	    if (e instanceof error_1.GraphQLErrorExt) {
	        if (e.code === validationErrorCode) {
	            return (e.causes);
	        }
	        return [e];
	    }
	    if (e instanceof graphql_1.GraphQLError) {
	        return [e];
	    }
	    return undefined;
	}
	exports.errorCauses = errorCauses;
	function printGraphQLErrorsOrRethrow(e) {
	    const causes = errorCauses(e);
	    if (!causes) {
	        throw e;
	    }
	    return causes.map(e => (0, graphql_1.printError)(e)).join('\n\n');
	}
	exports.printGraphQLErrorsOrRethrow = printGraphQLErrorsOrRethrow;
	function printErrors(errors) {
	    return errors.map(e => (0, graphql_1.printError)(e)).join('\n\n');
	}
	exports.printErrors = printErrors;
	exports.typenameFieldName = '__typename';
	exports.allSchemaRootKinds = ['query', 'mutation', 'subscription'];
	function defaultRootName(rootKind) {
	    return rootKind.charAt(0).toUpperCase() + rootKind.slice(1);
	}
	exports.defaultRootName = defaultRootName;
	function checkDefaultSchemaRoot(type) {
	    if (type.kind !== 'ObjectType') {
	        return undefined;
	    }
	    switch (type.name) {
	        case 'Query': return 'query';
	        case 'Mutation': return 'mutation';
	        case 'Subscription': return 'subscription';
	        default: return undefined;
	    }
	}
	function isNamedType(type) {
	    return type instanceof BaseNamedType;
	}
	exports.isNamedType = isNamedType;
	function isWrapperType(type) {
	    return isListType(type) || isNonNullType(type);
	}
	exports.isWrapperType = isWrapperType;
	function isListType(type) {
	    return type.kind == 'ListType';
	}
	exports.isListType = isListType;
	function isNonNullType(type) {
	    return type.kind == 'NonNullType';
	}
	exports.isNonNullType = isNonNullType;
	function isScalarType(type) {
	    return type.kind == 'ScalarType';
	}
	exports.isScalarType = isScalarType;
	function isCustomScalarType(type) {
	    return isScalarType(type) && !exports.graphQLBuiltIns.defaultGraphQLBuiltInTypes.includes(type.name);
	}
	exports.isCustomScalarType = isCustomScalarType;
	function isIntType(type) {
	    return type === type.schema().intType();
	}
	exports.isIntType = isIntType;
	function isStringType(type) {
	    return type === type.schema().stringType();
	}
	exports.isStringType = isStringType;
	function isFloatType(type) {
	    return type === type.schema().floatType();
	}
	exports.isFloatType = isFloatType;
	function isBooleanType(type) {
	    return type === type.schema().booleanType();
	}
	exports.isBooleanType = isBooleanType;
	function isIDType(type) {
	    return type === type.schema().idType();
	}
	exports.isIDType = isIDType;
	function isObjectType(type) {
	    return type.kind == 'ObjectType';
	}
	exports.isObjectType = isObjectType;
	function isInterfaceType(type) {
	    return type.kind == 'InterfaceType';
	}
	exports.isInterfaceType = isInterfaceType;
	function isEnumType(type) {
	    return type.kind == 'EnumType';
	}
	exports.isEnumType = isEnumType;
	function isUnionType(type) {
	    return type.kind == 'UnionType';
	}
	exports.isUnionType = isUnionType;
	function isInputObjectType(type) {
	    return type.kind == 'InputObjectType';
	}
	exports.isInputObjectType = isInputObjectType;
	function isOutputType(type) {
	    switch (baseType(type).kind) {
	        case 'ScalarType':
	        case 'ObjectType':
	        case 'UnionType':
	        case 'EnumType':
	        case 'InterfaceType':
	            return true;
	        default:
	            return false;
	    }
	}
	exports.isOutputType = isOutputType;
	function isInputType(type) {
	    switch (baseType(type).kind) {
	        case 'ScalarType':
	        case 'EnumType':
	        case 'InputObjectType':
	            return true;
	        default:
	            return false;
	    }
	}
	exports.isInputType = isInputType;
	function baseType(type) {
	    return isWrapperType(type) ? type.baseType() : type;
	}
	exports.baseType = baseType;
	function isNullableType(type) {
	    return !isNonNullType(type);
	}
	exports.isNullableType = isNullableType;
	function isAbstractType(type) {
	    return isInterfaceType(type) || isUnionType(type);
	}
	exports.isAbstractType = isAbstractType;
	function isCompositeType(type) {
	    return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
	}
	exports.isCompositeType = isCompositeType;
	function possibleRuntimeTypes(type) {
	    switch (type.kind) {
	        case 'InterfaceType': return type.possibleRuntimeTypes();
	        case 'UnionType': return type.types();
	        case 'ObjectType': return [type];
	    }
	}
	exports.possibleRuntimeTypes = possibleRuntimeTypes;
	function runtimeTypesIntersects(t1, t2) {
	    const rt1 = possibleRuntimeTypes(t1);
	    const rt2 = possibleRuntimeTypes(t2);
	    for (const obj1 of rt1) {
	        if (rt2.some(obj2 => obj1.name === obj2.name)) {
	            return true;
	        }
	    }
	    return false;
	}
	exports.runtimeTypesIntersects = runtimeTypesIntersects;
	exports.executableDirectiveLocations = [
	    graphql_1.DirectiveLocation.QUERY,
	    graphql_1.DirectiveLocation.MUTATION,
	    graphql_1.DirectiveLocation.SUBSCRIPTION,
	    graphql_1.DirectiveLocation.FIELD,
	    graphql_1.DirectiveLocation.FRAGMENT_DEFINITION,
	    graphql_1.DirectiveLocation.FRAGMENT_SPREAD,
	    graphql_1.DirectiveLocation.INLINE_FRAGMENT,
	    graphql_1.DirectiveLocation.VARIABLE_DEFINITION,
	];
	function typeToAST(type) {
	    switch (type.kind) {
	        case 'ListType':
	            return {
	                kind: graphql_1.Kind.LIST_TYPE,
	                type: typeToAST(type.ofType)
	            };
	        case 'NonNullType':
	            return {
	                kind: graphql_1.Kind.NON_NULL_TYPE,
	                type: typeToAST(type.ofType)
	            };
	        default:
	            return {
	                kind: graphql_1.Kind.NAMED_TYPE,
	                name: { kind: graphql_1.Kind.NAME, value: type.name }
	            };
	    }
	}
	exports.typeToAST = typeToAST;
	function typeFromAST(schema, node) {
	    switch (node.kind) {
	        case graphql_1.Kind.LIST_TYPE:
	            return new ListType(typeFromAST(schema, node.type));
	        case graphql_1.Kind.NON_NULL_TYPE:
	            return new NonNullType(typeFromAST(schema, node.type));
	        default:
	            const type = schema.type(node.name.value);
	            if (!type) {
	                throw new graphql_1.GraphQLError(`Unknown type "${node.name.value}"`, node);
	            }
	            return type;
	    }
	}
	exports.typeFromAST = typeFromAST;
	function isLeafType(type) {
	    return isScalarType(type) || isEnumType(type);
	}
	exports.isLeafType = isLeafType;
	class DirectiveTargetElement {
	    constructor(_schema) {
	        this._schema = _schema;
	        this.appliedDirectives = [];
	    }
	    schema() {
	        return this._schema;
	    }
	    appliedDirectivesOf(nameOrDefinition) {
	        const directiveName = typeof nameOrDefinition === 'string' ? nameOrDefinition : nameOrDefinition.name;
	        return this.appliedDirectives.filter(d => d.name == directiveName);
	    }
	    hasAppliedDirective(nameOrDefinition) {
	        const directiveName = typeof nameOrDefinition === 'string' ? nameOrDefinition : nameOrDefinition.name;
	        return this.appliedDirectives.some(d => d.name == directiveName);
	    }
	    applyDirective(defOrDirective, args) {
	        let toAdd;
	        if (defOrDirective instanceof Directive) {
	            if (defOrDirective.schema() != this.schema()) {
	                throw new Error(`Cannot add directive ${defOrDirective} to ${this} as it is attached to another schema`);
	            }
	            toAdd = defOrDirective;
	            if (args) {
	                toAdd.setArguments(args);
	            }
	        }
	        else {
	            toAdd = new Directive(defOrDirective.name, args !== null && args !== void 0 ? args : Object.create(null));
	        }
	        Element.prototype['setParent'].call(toAdd, this);
	        this.appliedDirectives.push(toAdd);
	        return toAdd;
	    }
	    appliedDirectivesToDirectiveNodes() {
	        if (this.appliedDirectives.length == 0) {
	            return undefined;
	        }
	        return this.appliedDirectives.map(directive => {
	            return {
	                kind: graphql_1.Kind.DIRECTIVE,
	                name: {
	                    kind: graphql_1.Kind.NAME,
	                    value: directive.name,
	                },
	                arguments: directive.argumentsToAST()
	            };
	        });
	    }
	    appliedDirectivesToString() {
	        return this.appliedDirectives.length == 0
	            ? ''
	            : ' ' + this.appliedDirectives.join(' ');
	    }
	    variablesInAppliedDirectives() {
	        return this.appliedDirectives.reduce((acc, d) => mergeVariables(acc, variablesInArguments(d.arguments())), []);
	    }
	}
	exports.DirectiveTargetElement = DirectiveTargetElement;
	function sourceASTs(...elts) {
	    return elts.map(elt => elt === null || elt === void 0 ? void 0 : elt.sourceAST).filter(elt => elt !== undefined);
	}
	exports.sourceASTs = sourceASTs;
	class Element {
	    schema() {
	        const schema = this.schemaInternal();
	        (0, utils_1.assert)(schema, 'requested schema does not exist. Probably because the element is unattached');
	        return schema;
	    }
	    schemaInternal() {
	        if (!this._parent) {
	            return undefined;
	        }
	        else if (this._parent instanceof Schema) {
	            return this._parent;
	        }
	        else if (this._parent instanceof SchemaElement) {
	            return this._parent.schemaInternal();
	        }
	        else if (this._parent instanceof DirectiveTargetElement) {
	            return this._parent.schema();
	        }
	        (0, utils_1.assert)(false, 'unreachable code. parent is of unknown type');
	    }
	    get parent() {
	        (0, utils_1.assert)(this._parent, 'trying to access non-existent parent');
	        return this._parent;
	    }
	    isAttached() {
	        return !!this._parent;
	    }
	    setParent(parent) {
	        (0, utils_1.assert)(!this._parent, "Cannot set parent of an already attached element");
	        this._parent = parent;
	        this.onAttached();
	    }
	    onAttached() {
	    }
	    checkUpdate() {
	        if (!this.isAttached()) {
	            throw error(`Cannot modify detached element ${this}`);
	        }
	    }
	}
	class Extension {
	    get extendedElement() {
	        return this._extendedElement;
	    }
	    setExtendedElement(element) {
	        (0, utils_1.assert)(!this._extendedElement, "Cannot attached already attached extension");
	        this._extendedElement = element;
	    }
	}
	exports.Extension = Extension;
	class SchemaElement extends Element {
	    constructor() {
	        super(...arguments);
	        this._appliedDirectives = [];
	    }
	    get appliedDirectives() {
	        return this._appliedDirectives;
	    }
	    appliedDirectivesOf(nameOrDefinition) {
	        const directiveName = typeof nameOrDefinition === 'string' ? nameOrDefinition : nameOrDefinition.name;
	        return this._appliedDirectives.filter(d => d.name == directiveName);
	    }
	    hasAppliedDirective(nameOrDefinition) {
	        return (typeof nameOrDefinition === 'string'
	            ? this.appliedDirectivesOf(nameOrDefinition)
	            : this.appliedDirectivesOf(nameOrDefinition)).length !== 0;
	    }
	    applyDirective(nameOrDefOrDirective, args) {
	        let toAdd;
	        if (nameOrDefOrDirective instanceof Directive) {
	            this.checkUpdate(nameOrDefOrDirective);
	            toAdd = nameOrDefOrDirective;
	            if (args) {
	                toAdd.setArguments(args);
	            }
	        }
	        else {
	            let name;
	            if (typeof nameOrDefOrDirective === 'string') {
	                this.checkUpdate();
	                const def = this.schema().directive(nameOrDefOrDirective);
	                if (!def) {
	                    throw new graphql_1.GraphQLError(`Cannot apply unknown directive "@${nameOrDefOrDirective}"`);
	                }
	                name = nameOrDefOrDirective;
	            }
	            else {
	                this.checkUpdate(nameOrDefOrDirective);
	                name = nameOrDefOrDirective.name;
	            }
	            toAdd = new Directive(name, args !== null && args !== void 0 ? args : Object.create(null));
	            Element.prototype['setParent'].call(toAdd, this);
	        }
	        this._appliedDirectives.push(toAdd);
	        DirectiveDefinition.prototype['addReferencer'].call(toAdd.definition, toAdd);
	        this.onModification();
	        return toAdd;
	    }
	    removeAppliedDirectives() {
	        const applied = this._appliedDirectives.concat();
	        applied.forEach(d => d.remove());
	    }
	    onModification() {
	        const schema = this.schemaInternal();
	        if (schema) {
	            Schema.prototype['onModification'].call(schema);
	        }
	    }
	    isElementBuiltIn() {
	        return false;
	    }
	    removeTypeReferenceInternal(type) {
	        this.removeTypeReference(type);
	    }
	    checkRemoval() {
	        if (this.isElementBuiltIn() && !Schema.prototype['canModifyBuiltIn'].call(this.schema())) {
	            throw error(`Cannot modify built-in ${this}`);
	        }
	    }
	    checkUpdate(addedElement) {
	        super.checkUpdate();
	        if (!Schema.prototype['canModifyBuiltIn'].call(this.schema())) {
	            let thisElement = this;
	            while (thisElement && thisElement instanceof SchemaElement) {
	                if (thisElement.isElementBuiltIn()) {
	                    throw error(`Cannot modify built-in (or part of built-in) ${this}`);
	                }
	                thisElement = thisElement.parent;
	            }
	        }
	        if (addedElement && addedElement.isAttached()) {
	            const thatSchema = addedElement.schema();
	            if (thatSchema && thatSchema != this.schema()) {
	                throw error(`Cannot add element ${addedElement} to ${this} as it is attached to another schema`);
	            }
	        }
	    }
	}
	exports.SchemaElement = SchemaElement;
	class NamedSchemaElement extends SchemaElement {
	    constructor(name) {
	        super();
	        this._name = name;
	    }
	    get name() {
	        return this._name;
	    }
	}
	exports.NamedSchemaElement = NamedSchemaElement;
	class BaseNamedType extends NamedSchemaElement {
	    constructor(name, isBuiltIn = false) {
	        super(name);
	        this.isBuiltIn = isBuiltIn;
	        this._referencers = new Set();
	        this._extensions = new Set();
	    }
	    addReferencer(referencer) {
	        this._referencers.add(referencer);
	    }
	    removeReferencer(referencer) {
	        this._referencers.delete(referencer);
	    }
	    get coordinate() {
	        return this.name;
	    }
	    *allChildElements() {
	    }
	    extensions() {
	        return this._extensions;
	    }
	    newExtension() {
	        return this.addExtension(new Extension());
	    }
	    addExtension(extension) {
	        this.checkUpdate();
	        if (this._extensions.has(extension)) {
	            return extension;
	        }
	        if (extension.extendedElement) {
	            throw error(`Cannot add extension to type ${this}: it is already added to another type`);
	        }
	        this._extensions.add(extension);
	        Extension.prototype['setExtendedElement'].call(extension, this);
	        this.onModification();
	        return extension;
	    }
	    isIntrospectionType() {
	        return (0, introspection_1.isIntrospectionName)(this.name);
	    }
	    hasExtensionElements() {
	        return this._extensions.size > 0;
	    }
	    hasNonExtensionElements() {
	        return this._appliedDirectives.some(d => d.ofExtension() === undefined) || this.hasNonExtensionInnerElements();
	    }
	    isElementBuiltIn() {
	        return this.isBuiltIn;
	    }
	    rename(newName) {
	        this.checkUpdate();
	        const oldName = this._name;
	        this._name = newName;
	        Schema.prototype['renameTypeInternal'].call(this._parent, oldName, newName);
	        this.onModification();
	    }
	    remove() {
	        if (!this._parent) {
	            return [];
	        }
	        this.checkRemoval();
	        this.onModification();
	        this.removeInnerElements();
	        Schema.prototype['removeTypeInternal'].call(this._parent, this);
	        this.removeAppliedDirectives();
	        this.sourceAST = undefined;
	        const toReturn = (0, utils_1.setValues)(this._referencers).map(r => {
	            SchemaElement.prototype['removeTypeReferenceInternal'].call(r, this);
	            return r;
	        });
	        this._referencers.clear();
	        this._parent = undefined;
	        return toReturn;
	    }
	    removeRecursive() {
	        this.remove().forEach(ref => this.removeReferenceRecursive(ref));
	    }
	    referencers() {
	        return (0, utils_1.setValues)(this._referencers);
	    }
	    isReferenced() {
	        return this._referencers.size > 0;
	    }
	    toString() {
	        return this.name;
	    }
	}
	class NamedSchemaElementWithType extends NamedSchemaElement {
	    get type() {
	        return this._type;
	    }
	    set type(type) {
	        if (type) {
	            this.checkUpdate(type);
	        }
	        else {
	            this.checkRemoval();
	        }
	        if (this._type) {
	            removeReferenceToType(this, this._type);
	        }
	        this._type = type;
	        if (type) {
	            addReferenceToType(this, type);
	        }
	    }
	    removeTypeReference(type) {
	        (0, utils_1.assert)(this._type && baseType(this._type) === type, () => `Cannot remove reference to type ${type} on ${this} as its type is ${this._type}`);
	        this._type = undefined;
	    }
	}
	exports.NamedSchemaElementWithType = NamedSchemaElementWithType;
	function error(message) {
	    return new graphql_1.GraphQLError(message);
	}
	class BaseExtensionMember extends Element {
	    ofExtension() {
	        return this._extension;
	    }
	    setOfExtension(extension) {
	        var _a;
	        this.checkUpdate();
	        if (extension && !((_a = this._parent) === null || _a === void 0 ? void 0 : _a.extensions().has(extension))) {
	            throw error(`Cannot set object as part of the provided extension: it is not an extension of parent ${this.parent}`);
	        }
	        this._extension = extension;
	    }
	    remove() {
	        this.removeInner();
	        Schema.prototype['onModification'].call(this.schema());
	        this._extension = undefined;
	        this._parent = undefined;
	    }
	}
	function sortedMemberNames(u) {
	    return u.members().map(m => m.type.name).sort((n1, n2) => n1.localeCompare(n2));
	}
	class BuiltIns {
	    constructor() {
	        this.defaultGraphQLBuiltInTypes = ['Int', 'Float', 'String', 'Boolean', 'ID'];
	        this.defaultGraphQLBuiltInDirectives = ['include', 'skip', 'deprecated', 'specifiedBy'];
	    }
	    addBuiltInTypes(schema) {
	        this.defaultGraphQLBuiltInTypes.forEach(t => this.addBuiltInScalar(schema, t));
	    }
	    addBuiltInDirectives(schema) {
	        for (const name of ['include', 'skip']) {
	            this.addBuiltInDirective(schema, name)
	                .addLocations(graphql_1.DirectiveLocation.FIELD, graphql_1.DirectiveLocation.FRAGMENT_SPREAD, graphql_1.DirectiveLocation.INLINE_FRAGMENT)
	                .addArgument('if', new NonNullType(schema.booleanType()));
	        }
	        this.addBuiltInDirective(schema, 'deprecated')
	            .addLocations(graphql_1.DirectiveLocation.FIELD_DEFINITION, graphql_1.DirectiveLocation.ENUM_VALUE, graphql_1.DirectiveLocation.ARGUMENT_DEFINITION, graphql_1.DirectiveLocation.INPUT_FIELD_DEFINITION).addArgument('reason', schema.stringType(), 'No longer supported');
	        this.addBuiltInDirective(schema, 'specifiedBy')
	            .addLocations(graphql_1.DirectiveLocation.SCALAR)
	            .addArgument('url', new NonNullType(schema.stringType()));
	    }
	    isGraphQLBuiltIn(element) {
	        if ((0, introspection_1.isIntrospectionName)(element.name)) {
	            return true;
	        }
	        if (element instanceof FieldDefinition) {
	            return false;
	        }
	        else if (element instanceof DirectiveDefinition) {
	            return this.defaultGraphQLBuiltInDirectives.includes(element.name);
	        }
	        else {
	            return this.defaultGraphQLBuiltInTypes.includes(element.name);
	        }
	    }
	    prepareValidation(_) {
	    }
	    onValidation(schema, unvalidatedDirectives) {
	        const errors = [];
	        for (const type of schema.builtInTypes(undefined, true)) {
	            const maybeRedefined = schema.type(type.name);
	            if (!maybeRedefined.isBuiltIn) {
	                this.ensureSameTypeStructure(type, maybeRedefined, errors);
	            }
	        }
	        for (const directive of schema.builtInDirectives(true)) {
	            if (unvalidatedDirectives && unvalidatedDirectives.includes(directive.name)) {
	                continue;
	            }
	            const maybeRedefined = schema.directive(directive.name);
	            if (!maybeRedefined.isBuiltIn) {
	                this.ensureSameDirectiveStructure(directive, maybeRedefined, errors);
	            }
	        }
	        return errors;
	    }
	    validationRules() {
	        return specifiedRules_1.specifiedSDLRules;
	    }
	    maybeUpdateSubgraphDocument(_, document) {
	        return document;
	    }
	    ensureSameDirectiveStructure(builtIn, manuallyDefined, errors) {
	        this.ensureSameArguments(builtIn, manuallyDefined, `directive ${builtIn}`, errors);
	        if (!builtIn.repeatable && manuallyDefined.repeatable) {
	            errors.push(error(`Invalid redefinition of built-in directive ${builtIn}: ${builtIn} should${builtIn.repeatable ? "" : " not"} be repeatable`));
	        }
	        if (!manuallyDefined.locations.every(loc => builtIn.locations.includes(loc))) {
	            errors.push(error(`Invalid redefinition of built-in directive ${builtIn}: ${builtIn} should have locations ${builtIn.locations.join(', ')}, but found (non-subset) ${manuallyDefined.locations.join(', ')}`));
	        }
	    }
	    ensureSameArguments(builtIn, manuallyDefined, what, errors) {
	        const expectedArguments = builtIn.arguments();
	        const foundArguments = manuallyDefined.arguments();
	        if (expectedArguments.length !== foundArguments.length) {
	            errors.push(error(`Invalid redefinition of built-in ${what}: should have ${expectedArguments.length} arguments but ${foundArguments.length} found in redefinition`));
	            return;
	        }
	        for (const expectedArgument of expectedArguments) {
	            const foundArgument = manuallyDefined.argument(expectedArgument.name);
	            const expectedType = expectedArgument.type;
	            let actualType = foundArgument.type;
	            if (isNonNullType(actualType) && !isNonNullType(expectedType)) {
	                actualType = actualType.ofType;
	            }
	            if (!(0, types_1.sameType)(expectedType, actualType)) {
	                errors.push(error(`Invalid redefinition of built-in ${what}: ${expectedArgument.coordinate} should have type ${expectedArgument.type} but found type ${foundArgument.type}`));
	            }
	            else if (!isNonNullType(actualType) && !(0, values_1.valueEquals)(expectedArgument.defaultValue, foundArgument.defaultValue)) {
	                errors.push(error(`Invalid redefinition of built-in ${what}: ${expectedArgument.coordinate} should have default value ${(0, values_1.valueToString)(expectedArgument.defaultValue)} but found default value ${(0, values_1.valueToString)(foundArgument.defaultValue)}`));
	            }
	        }
	    }
	    ensureSameTypeStructure(builtIn, manuallyDefined, errors) {
	        if (builtIn.kind !== manuallyDefined.kind) {
	            errors.push(error(`Invalid redefinition of built-in type ${builtIn}: ${builtIn} should be a ${builtIn.kind} type but redefined as a ${manuallyDefined.kind}`));
	            return;
	        }
	        switch (builtIn.kind) {
	            case 'ScalarType':
	                return;
	            case 'ObjectType':
	                const redefinedObject = manuallyDefined;
	                for (const builtInField of builtIn.fields()) {
	                    const redefinedField = redefinedObject.field(builtInField.name);
	                    if (!redefinedField) {
	                        errors.push(error(`Invalid redefinition of built-in type ${builtIn}: redefinition is missing field ${builtInField}`));
	                        return;
	                    }
	                    let rType = redefinedField.type;
	                    if (!isNonNullType(builtInField.type) && isNonNullType(rType)) {
	                        rType = rType.ofType;
	                    }
	                    if (!(0, types_1.sameType)(builtInField.type, rType)) {
	                        errors.push(error(`Invalid redefinition of field ${builtInField} of built-in type ${builtIn}: should have type ${builtInField.type} but redefined with type ${redefinedField.type}`));
	                        return;
	                    }
	                    this.ensureSameArguments(builtInField, redefinedField, `field ${builtInField.coordinate}`, errors);
	                }
	                break;
	            case 'UnionType':
	                const redefinedUnion = manuallyDefined;
	                const builtInMembers = sortedMemberNames(builtIn);
	                const redefinedMembers = sortedMemberNames(redefinedUnion);
	                if (!(0, utils_1.arrayEquals)(builtInMembers, redefinedMembers)) {
	                    errors.push(error(`Invalid redefinition of built-in type ${builtIn}: redefinition has members [${redefinedMembers}] but should have members [${builtInMembers}]`));
	                }
	                break;
	            default:
	                errors.push(error(`Invalid redefinition of built-in type ${builtIn}: cannot redefine ${builtIn.kind} built-in types`));
	        }
	    }
	    addBuiltInScalar(schema, name) {
	        return schema.addType(new ScalarType(name, true));
	    }
	    addBuiltInObject(schema, name) {
	        return schema.addType(new ObjectType(name, true));
	    }
	    addBuiltInUnion(schema, name) {
	        return schema.addType(new UnionType(name, true));
	    }
	    addBuiltInDirective(schema, name) {
	        return schema.addDirectiveDefinition(new DirectiveDefinition(name, true));
	    }
	    addBuiltInField(parentType, name, type) {
	        return parentType.addField(new FieldDefinition(name, true), type);
	    }
	    getTypedDirective(schema, name) {
	        const directive = schema.directive(name);
	        if (!directive) {
	            throw new Error(`The provided schema has not be built with the ${name} directive built-in`);
	        }
	        return directive;
	    }
	    includeDirective(schema) {
	        return this.getTypedDirective(schema, 'include');
	    }
	    skipDirective(schema) {
	        return this.getTypedDirective(schema, 'skip');
	    }
	    deprecatedDirective(schema) {
	        return this.getTypedDirective(schema, 'deprecated');
	    }
	    specifiedByDirective(schema) {
	        return this.getTypedDirective(schema, 'specifiedBy');
	    }
	}
	exports.BuiltIns = BuiltIns;
	class CoreFeature {
	    constructor(url, nameInSchema, directive, purpose) {
	        this.url = url;
	        this.nameInSchema = nameInSchema;
	        this.directive = directive;
	        this.purpose = purpose;
	    }
	    isFeatureDefinition(element) {
	        return element.name.startsWith(this.nameInSchema + '__')
	            || (element.kind === 'DirectiveDefinition' && element.name === this.nameInSchema);
	    }
	}
	exports.CoreFeature = CoreFeature;
	class CoreFeatures {
	    constructor(coreItself) {
	        this.coreItself = coreItself;
	        this.byAlias = new Map();
	        this.byIdentity = new Map();
	        this.add(coreItself);
	        const coreDef = coreSpec_1.CORE_VERSIONS.find(coreItself.url.version);
	        if (!coreDef) {
	            throw error(`Schema uses unknown version ${coreItself.url.version} of the core spec (known versions: ${coreSpec_1.CORE_VERSIONS.versions().join(', ')})`);
	        }
	        this.coreDefinition = coreDef;
	    }
	    getByIdentity(identity) {
	        return this.byIdentity.get(identity);
	    }
	    allFeatures() {
	        return this.byIdentity.values();
	    }
	    removeFeature(featureIdentity) {
	        const feature = this.byIdentity.get(featureIdentity);
	        if (feature) {
	            this.byIdentity.delete(featureIdentity);
	            this.byAlias.delete(feature.nameInSchema);
	        }
	    }
	    maybeAddFeature(directive) {
	        var _a, _b;
	        if (((_a = directive.definition) === null || _a === void 0 ? void 0 : _a.name) !== this.coreItself.nameInSchema) {
	            return undefined;
	        }
	        const args = directive.arguments();
	        const url = coreSpec_1.FeatureUrl.parse(args.feature);
	        const existing = this.byIdentity.get(url.identity);
	        if (existing) {
	            throw error(`Duplicate inclusion of feature ${url.identity}`);
	        }
	        const feature = new CoreFeature(url, (_b = args.as) !== null && _b !== void 0 ? _b : url.name, directive, args.for);
	        this.add(feature);
	        return feature;
	    }
	    add(feature) {
	        this.byAlias.set(feature.nameInSchema, feature);
	        this.byIdentity.set(feature.url.identity, feature);
	    }
	}
	exports.CoreFeatures = CoreFeatures;
	const toASTPrintOptions = { ...print_1.defaultPrintOptions, showNonGraphQLBuiltIns: true };
	class Schema {
	    constructor(builtIns = exports.graphQLBuiltIns) {
	        this.builtIns = builtIns;
	        this._builtInTypes = new utils_1.MapWithCachedArrays();
	        this._types = new utils_1.MapWithCachedArrays();
	        this._builtInDirectives = new utils_1.MapWithCachedArrays();
	        this._directives = new utils_1.MapWithCachedArrays();
	        this.isConstructed = false;
	        this.isValidated = false;
	        this._schemaDefinition = new SchemaDefinition();
	        Element.prototype['setParent'].call(this._schemaDefinition, this);
	        builtIns.addBuiltInTypes(this);
	        builtIns.addBuiltInDirectives(this);
	        this.isConstructed = true;
	    }
	    canModifyBuiltIn() {
	        return !this.isConstructed;
	    }
	    runWithBuiltInModificationAllowed(fct) {
	        const wasConstructed = this.isConstructed;
	        this.isConstructed = false;
	        fct();
	        this.isConstructed = wasConstructed;
	    }
	    renameTypeInternal(oldName, newName) {
	        this._types.set(newName, this._types.get(oldName));
	        this._types.delete(oldName);
	    }
	    removeTypeInternal(type) {
	        this._types.delete(type.name);
	    }
	    removeDirectiveInternal(definition) {
	        this._directives.delete(definition.name);
	    }
	    markAsCoreSchema(coreItself) {
	        this._coreFeatures = new CoreFeatures(coreItself);
	    }
	    unmarkAsCoreSchema() {
	        this._coreFeatures = undefined;
	    }
	    onModification() {
	        if (this.isConstructed) {
	            this.invalidate();
	            this.cachedDocument = undefined;
	            this.apiSchema = undefined;
	        }
	    }
	    forceSetCachedDocument(document, addNonGraphQLBuiltIns = true) {
	        this.cachedDocument = addNonGraphQLBuiltIns
	            ? this.builtIns.maybeUpdateSubgraphDocument(this, document)
	            : document;
	    }
	    isCoreSchema() {
	        return this.coreFeatures !== undefined;
	    }
	    get coreFeatures() {
	        return this._coreFeatures;
	    }
	    toAST() {
	        if (!this.cachedDocument) {
	            this.forceSetCachedDocument((0, graphql_1.parse)((0, print_1.printSchema)(this, toASTPrintOptions), { noLocation: true }), false);
	        }
	        return this.cachedDocument;
	    }
	    toAPISchema() {
	        if (!this.apiSchema) {
	            this.validate();
	            const apiSchema = this.clone();
	            (0, inaccessibleSpec_1.removeInaccessibleElements)(apiSchema);
	            const coreFeatures = apiSchema.coreFeatures;
	            if (coreFeatures) {
	                for (const coreFeature of coreFeatures.allFeatures()) {
	                    (0, coreSpec_1.removeFeatureElements)(apiSchema, coreFeature);
	                }
	            }
	            (0, utils_1.assert)(!apiSchema.isCoreSchema(), "The API schema shouldn't be a core schema");
	            apiSchema.validate();
	            this.apiSchema = apiSchema;
	        }
	        return this.apiSchema;
	    }
	    toGraphQLJSSchema(isSubgraph = false) {
	        if (!isSubgraph) {
	            return (0, graphql_1.buildASTSchema)(this.toAST());
	        }
	        const ast = (0, graphql_1.parse)((0, print_1.printSchema)(this, { ...toASTPrintOptions, mergeTypesAndExtensions: true }), { noLocation: true });
	        return (0, graphql_1.buildASTSchema)(ast);
	    }
	    get schemaDefinition() {
	        return this._schemaDefinition;
	    }
	    types(kind, includeNonGraphQLBuiltIns = false) {
	        const allKinds = this._types.values();
	        const forKind = (kind ? allKinds.filter(t => t.kind === kind) : allKinds);
	        return includeNonGraphQLBuiltIns
	            ? this.builtInTypes(kind).filter(t => !exports.graphQLBuiltIns.isGraphQLBuiltIn(t)).concat(forKind)
	            : forKind;
	    }
	    builtInTypes(kind, includeShadowed = false) {
	        const allBuiltIns = this._builtInTypes.values();
	        const forKind = (kind ? allBuiltIns.filter(t => t.kind === kind) : allBuiltIns);
	        return includeShadowed
	            ? forKind
	            : forKind.filter(t => !this.isShadowedBuiltInType(t));
	    }
	    isShadowedBuiltInType(type) {
	        return type.isBuiltIn && this._types.has(type.name);
	    }
	    allTypes(kind) {
	        return this.builtInTypes(kind).concat(this.types(kind));
	    }
	    type(name) {
	        const type = this._types.get(name);
	        return type ? type : this._builtInTypes.get(name);
	    }
	    typeOfKind(name, kind) {
	        const type = this.type(name);
	        return type && type.kind === kind ? type : undefined;
	    }
	    intType() {
	        return this._builtInTypes.get('Int');
	    }
	    floatType() {
	        return this._builtInTypes.get('Float');
	    }
	    stringType() {
	        return this._builtInTypes.get('String');
	    }
	    booleanType() {
	        return this._builtInTypes.get('Boolean');
	    }
	    idType() {
	        return this._builtInTypes.get('ID');
	    }
	    addType(type) {
	        const existing = this.type(type.name);
	        if (existing && !existing.isBuiltIn) {
	            throw error(`Type ${type} already exists in this schema`);
	        }
	        if (type.isAttached()) {
	            if (type.parent == this) {
	                return type;
	            }
	            throw error(`Cannot add type ${type} to this schema; it is already attached to another schema`);
	        }
	        if (type.isBuiltIn) {
	            if (!this.isConstructed) {
	                this._builtInTypes.set(type.name, type);
	            }
	            else {
	                throw error(`Cannot add built-in ${type} to this schema (built-ins can only be added at schema construction time)`);
	            }
	        }
	        else {
	            this._types.set(type.name, type);
	        }
	        Element.prototype['setParent'].call(type, this);
	        const defaultSchemaRoot = checkDefaultSchemaRoot(type);
	        if (defaultSchemaRoot && !this.schemaDefinition.root(defaultSchemaRoot)) {
	            this.schemaDefinition.setRoot(defaultSchemaRoot, type);
	        }
	        this.onModification();
	        return type;
	    }
	    directives(includeNonGraphQLBuiltIns = false) {
	        return includeNonGraphQLBuiltIns
	            ? this.builtInDirectives().filter(d => !exports.graphQLBuiltIns.isGraphQLBuiltIn(d)).concat(this._directives.values())
	            : this._directives.values();
	    }
	    builtInDirectives(includeShadowed = false) {
	        return includeShadowed
	            ? this._builtInDirectives.values()
	            : this._builtInDirectives.values().filter(d => !this.isShadowedBuiltInDirective(d));
	    }
	    allDirectives() {
	        return this.builtInDirectives().concat(this.directives());
	    }
	    isShadowedBuiltInDirective(directive) {
	        return directive.isBuiltIn && this._directives.has(directive.name);
	    }
	    directive(name) {
	        const directive = this._directives.get(name);
	        return directive ? directive : this._builtInDirectives.get(name);
	    }
	    *allNamedSchemaElement() {
	        for (const type of this.types()) {
	            yield type;
	            yield* type.allChildElements();
	        }
	        for (const directive of this.directives()) {
	            yield directive;
	            yield* directive.arguments();
	        }
	    }
	    *allSchemaElement() {
	        yield this._schemaDefinition;
	        yield* this.allNamedSchemaElement();
	    }
	    addDirectiveDefinition(directiveOrName) {
	        const definition = typeof directiveOrName === 'string' ? new DirectiveDefinition(directiveOrName) : directiveOrName;
	        const existing = this.directive(definition.name);
	        if (existing && !existing.isBuiltIn) {
	            throw error(`Directive ${definition} already exists in this schema`);
	        }
	        if (definition.isAttached()) {
	            if (definition.parent == this) {
	                return definition;
	            }
	            throw error(`Cannot add directive ${definition} to this schema; it is already attached to another schema`);
	        }
	        if (definition.isBuiltIn) {
	            if (!this.isConstructed) {
	                this._builtInDirectives.set(definition.name, definition);
	            }
	            else {
	                throw error(`Cannot add built-in ${definition} to this schema (built-ins can only be added at schema construction time)`);
	            }
	        }
	        else {
	            this._directives.set(definition.name, definition);
	        }
	        Element.prototype['setParent'].call(definition, this);
	        this.onModification();
	        return definition;
	    }
	    invalidate() {
	        this.isValidated = false;
	    }
	    validate() {
	        if (this.isValidated) {
	            return;
	        }
	        this.runWithBuiltInModificationAllowed(() => {
	            this.builtIns.prepareValidation(this);
	            (0, introspection_1.addIntrospectionFields)(this);
	        });
	        let errors = (0, validate_1.validateSDL)(this.toAST(), undefined, this.builtIns.validationRules());
	        errors = errors.concat((0, validate_2.validateSchema)(this));
	        if (errors.length === 0) {
	            this.runWithBuiltInModificationAllowed(() => {
	                errors = this.builtIns.onValidation(this);
	            });
	        }
	        if (errors.length > 0) {
	            throw (0, exports.ErrGraphQLValidationFailed)(errors);
	        }
	        this.isValidated = true;
	    }
	    clone(builtIns) {
	        const cloned = new Schema(builtIns !== null && builtIns !== void 0 ? builtIns : this.builtIns);
	        copy(this, cloned);
	        if (this.isValidated) {
	            cloned.validate();
	        }
	        return cloned;
	    }
	}
	exports.Schema = Schema;
	class RootType extends BaseExtensionMember {
	    constructor(rootKind, type) {
	        super();
	        this.rootKind = rootKind;
	        this.type = type;
	    }
	    isDefaultRootName() {
	        return defaultRootName(this.rootKind) == this.type.name;
	    }
	    removeInner() {
	        SchemaDefinition.prototype['removeRootType'].call(this._parent, this);
	    }
	}
	exports.RootType = RootType;
	class SchemaDefinition extends SchemaElement {
	    constructor() {
	        super(...arguments);
	        this.kind = 'SchemaDefinition';
	        this._roots = new utils_1.MapWithCachedArrays();
	        this._extensions = new Set();
	    }
	    roots() {
	        return this._roots.values();
	    }
	    applyDirective(nameOrDefOrDirective, args) {
	        var _a;
	        const applied = super.applyDirective(nameOrDefOrDirective, args);
	        const schema = this.schema();
	        const coreFeatures = schema.coreFeatures;
	        if ((0, coreSpec_1.isCoreSpecDirectiveApplication)(applied)) {
	            if (coreFeatures) {
	                throw error(`Invalid duplicate application of the @core feature`);
	            }
	            const schemaDirective = applied;
	            const args = schemaDirective.arguments();
	            const url = coreSpec_1.FeatureUrl.parse(args.feature);
	            const core = new CoreFeature(url, (_a = args.as) !== null && _a !== void 0 ? _a : 'core', schemaDirective, args.for);
	            Schema.prototype['markAsCoreSchema'].call(schema, core);
	        }
	        else if (coreFeatures) {
	            CoreFeatures.prototype['maybeAddFeature'].call(coreFeatures, applied);
	        }
	        this.onModification();
	        return applied;
	    }
	    root(rootKind) {
	        return this._roots.get(rootKind);
	    }
	    rootType(rootKind) {
	        var _a;
	        return (_a = this.root(rootKind)) === null || _a === void 0 ? void 0 : _a.type;
	    }
	    setRoot(rootKind, nameOrType) {
	        let toSet;
	        if (typeof nameOrType === 'string') {
	            this.checkUpdate();
	            const obj = this.schema().type(nameOrType);
	            if (!obj) {
	                throw new graphql_1.GraphQLError(`Cannot set schema ${rootKind} root to unknown type ${nameOrType}`);
	            }
	            else if (obj.kind != 'ObjectType') {
	                throw new graphql_1.GraphQLError(`${defaultRootName(rootKind)} root type must be an Object type${rootKind === 'query' ? '' : ' if provided'}, it cannot be set to ${nameOrType} (an ${obj.kind}).`);
	            }
	            toSet = new RootType(rootKind, obj);
	        }
	        else {
	            this.checkUpdate(nameOrType);
	            toSet = new RootType(rootKind, nameOrType);
	        }
	        const prevRoot = this._roots.get(rootKind);
	        if (prevRoot) {
	            removeReferenceToType(this, prevRoot.type);
	        }
	        this._roots.set(rootKind, toSet);
	        Element.prototype['setParent'].call(toSet, this);
	        addReferenceToType(this, toSet.type);
	        this.onModification();
	        return toSet;
	    }
	    extensions() {
	        return this._extensions;
	    }
	    newExtension() {
	        return this.addExtension(new Extension());
	    }
	    addExtension(extension) {
	        this.checkUpdate();
	        if (this._extensions.has(extension)) {
	            return extension;
	        }
	        if (extension.extendedElement) {
	            throw error(`Cannot add extension to this schema: extension is already added to another schema`);
	        }
	        this._extensions.add(extension);
	        Extension.prototype['setExtendedElement'].call(extension, this);
	        this.onModification();
	        return extension;
	    }
	    removeRootType(rootType) {
	        this._roots.delete(rootType.rootKind);
	        removeReferenceToType(this, rootType.type);
	    }
	    removeTypeReference(toRemove) {
	        for (const rootType of this.roots()) {
	            if (rootType.type == toRemove) {
	                this._roots.delete(rootType.rootKind);
	            }
	        }
	    }
	    toString() {
	        return `schema[${this._roots.keys().join(', ')}]`;
	    }
	}
	exports.SchemaDefinition = SchemaDefinition;
	class ScalarType extends BaseNamedType {
	    constructor() {
	        super(...arguments);
	        this.kind = 'ScalarType';
	    }
	    removeTypeReference(type) {
	        (0, utils_1.assert)(false, `Scalar type ${this} can't reference other types; shouldn't be asked to remove reference to ${type}`);
	    }
	    hasNonExtensionInnerElements() {
	        return false;
	    }
	    removeInnerElements() {
	    }
	    removeReferenceRecursive(ref) {
	        ref.remove();
	    }
	}
	exports.ScalarType = ScalarType;
	class InterfaceImplementation extends BaseExtensionMember {
	    constructor(itf) {
	        super();
	        this.interface = itf;
	    }
	    removeInner() {
	        FieldBasedType.prototype['removeInterfaceImplementation'].call(this._parent, this.interface);
	    }
	    toString() {
	        return `'implements ${this.interface}'`;
	    }
	}
	exports.InterfaceImplementation = InterfaceImplementation;
	class FieldBasedType extends BaseNamedType {
	    constructor() {
	        super(...arguments);
	        this._interfaceImplementations = new utils_1.MapWithCachedArrays();
	        this._fields = new utils_1.MapWithCachedArrays();
	    }
	    onAttached() {
	        Schema.prototype['runWithBuiltInModificationAllowed'].call(this.schema(), () => {
	            this.addField(new FieldDefinition(exports.typenameFieldName, true), new NonNullType(this.schema().stringType()));
	        });
	    }
	    removeFieldInternal(field) {
	        this._fields.delete(field.name);
	        this._cachedNonBuiltInFields = undefined;
	    }
	    interfaceImplementations() {
	        return this._interfaceImplementations.values();
	    }
	    interfaceImplementation(type) {
	        return this._interfaceImplementations.get(typeof type === 'string' ? type : type.name);
	    }
	    interfaces() {
	        return this.interfaceImplementations().map(impl => impl.interface);
	    }
	    implementsInterface(type) {
	        return this._interfaceImplementations.has(typeof type === 'string' ? type : type.name);
	    }
	    addImplementedInterface(nameOrItfOrItfImpl) {
	        let toAdd;
	        if (nameOrItfOrItfImpl instanceof InterfaceImplementation) {
	            this.checkUpdate(nameOrItfOrItfImpl);
	            toAdd = nameOrItfOrItfImpl;
	        }
	        else {
	            let itf;
	            if (typeof nameOrItfOrItfImpl === 'string') {
	                this.checkUpdate();
	                const maybeItf = this.schema().type(nameOrItfOrItfImpl);
	                if (!maybeItf) {
	                    throw new graphql_1.GraphQLError(`Cannot implement unknown type ${nameOrItfOrItfImpl}`);
	                }
	                else if (maybeItf.kind != 'InterfaceType') {
	                    throw new graphql_1.GraphQLError(`Cannot implement non-interface type ${nameOrItfOrItfImpl} (of type ${maybeItf.kind})`);
	                }
	                itf = maybeItf;
	            }
	            else {
	                itf = nameOrItfOrItfImpl;
	            }
	            toAdd = new InterfaceImplementation(itf);
	        }
	        const existing = this._interfaceImplementations.get(toAdd.interface.name);
	        if (!existing) {
	            this._interfaceImplementations.set(toAdd.interface.name, toAdd);
	            addReferenceToType(this, toAdd.interface);
	            Element.prototype['setParent'].call(toAdd, this);
	            this.onModification();
	            return toAdd;
	        }
	        else {
	            return existing;
	        }
	    }
	    fields(includeNonGraphQLBuiltIns = false) {
	        if (includeNonGraphQLBuiltIns) {
	            return this.allFields().filter(f => !exports.graphQLBuiltIns.isGraphQLBuiltIn(f));
	        }
	        if (!this._cachedNonBuiltInFields) {
	            this._cachedNonBuiltInFields = this._fields.values().filter(f => !f.isBuiltIn);
	        }
	        return this._cachedNonBuiltInFields;
	    }
	    hasFields(includeNonGraphQLBuiltIns = false) {
	        return this.fields(includeNonGraphQLBuiltIns).length > 0;
	    }
	    builtInFields() {
	        return this.allFields().filter(f => f.isBuiltIn);
	    }
	    allFields() {
	        return this._fields.values();
	    }
	    field(name) {
	        return this._fields.get(name);
	    }
	    typenameField() {
	        return this.field(exports.typenameFieldName);
	    }
	    addField(nameOrField, type) {
	        let toAdd;
	        if (typeof nameOrField === 'string') {
	            this.checkUpdate();
	            toAdd = new FieldDefinition(nameOrField);
	        }
	        else {
	            this.checkUpdate(nameOrField);
	            toAdd = nameOrField;
	        }
	        if (this.field(toAdd.name)) {
	            throw error(`Field ${toAdd.name} already exists on ${this}`);
	        }
	        if (type && !isOutputType(type)) {
	            throw error(`Invalid input type ${type} for field ${toAdd.name}: object and interface field types should be output types.`);
	        }
	        this._fields.set(toAdd.name, toAdd);
	        this._cachedNonBuiltInFields = undefined;
	        Element.prototype['setParent'].call(toAdd, this);
	        if (type) {
	            toAdd.type = type;
	        }
	        this.onModification();
	        return toAdd;
	    }
	    *allChildElements() {
	        for (const field of this._fields.values()) {
	            yield field;
	            yield* field.arguments();
	        }
	    }
	    removeInterfaceImplementation(itf) {
	        this._interfaceImplementations.delete(itf.name);
	        removeReferenceToType(this, itf);
	    }
	    removeTypeReference(type) {
	        this._interfaceImplementations.delete(type.name);
	    }
	    removeInnerElements() {
	        for (const interfaceImpl of this.interfaceImplementations()) {
	            interfaceImpl.remove();
	        }
	        for (const field of this.allFields()) {
	            if (field.isBuiltIn) {
	                FieldDefinition.prototype['removeParent'].call(field);
	            }
	            else {
	                field.remove();
	            }
	        }
	    }
	    hasNonExtensionInnerElements() {
	        return this.interfaceImplementations().some(itf => itf.ofExtension() === undefined)
	            || this.fields().some(f => f.ofExtension() === undefined);
	    }
	}
	class ObjectType extends FieldBasedType {
	    constructor() {
	        super(...arguments);
	        this.kind = 'ObjectType';
	    }
	    isRootType() {
	        const schema = this.schema();
	        return schema.schemaDefinition.roots().some(rt => rt.type == this);
	    }
	    isQueryRootType() {
	        var _a;
	        const schema = this.schema();
	        return ((_a = schema.schemaDefinition.root('query')) === null || _a === void 0 ? void 0 : _a.type) === this;
	    }
	    removeReferenceRecursive(ref) {
	        switch (ref.kind) {
	            case 'FieldDefinition':
	                ref.removeRecursive();
	                break;
	            case 'UnionType':
	                if (ref.membersCount() === 0) {
	                    ref.removeRecursive();
	                }
	                break;
	        }
	    }
	}
	exports.ObjectType = ObjectType;
	class InterfaceType extends FieldBasedType {
	    constructor() {
	        super(...arguments);
	        this.kind = 'InterfaceType';
	    }
	    allImplementations() {
	        return (0, utils_1.setValues)(this._referencers).filter(ref => ref.kind === 'ObjectType' || ref.kind === 'InterfaceType');
	    }
	    possibleRuntimeTypes() {
	        return this.allImplementations().filter(impl => impl.kind === 'ObjectType');
	    }
	    isPossibleRuntimeType(type) {
	        const typeName = typeof type === 'string' ? type : type.name;
	        return this.possibleRuntimeTypes().some(t => t.name == typeName);
	    }
	    removeReferenceRecursive(ref) {
	        if (ref.kind === 'FieldDefinition') {
	            ref.removeRecursive();
	        }
	    }
	}
	exports.InterfaceType = InterfaceType;
	class UnionMember extends BaseExtensionMember {
	    constructor(type) {
	        super();
	        this.type = type;
	    }
	    removeInner() {
	        UnionType.prototype['removeMember'].call(this._parent, this.type);
	    }
	}
	exports.UnionMember = UnionMember;
	class UnionType extends BaseNamedType {
	    constructor() {
	        super(...arguments);
	        this.kind = 'UnionType';
	        this._members = new utils_1.MapWithCachedArrays();
	    }
	    onAttached() {
	        Schema.prototype['runWithBuiltInModificationAllowed'].call(this.schema(), () => {
	            this._typenameField = new FieldDefinition(exports.typenameFieldName, true);
	            Element.prototype['setParent'].call(this._typenameField, this);
	            this._typenameField.type = new NonNullType(this.schema().stringType());
	        });
	    }
	    types() {
	        return this.members().map(m => m.type);
	    }
	    members() {
	        return this._members.values();
	    }
	    membersCount() {
	        return this._members.size;
	    }
	    hasTypeMember(type) {
	        return this._members.has(typeof type === 'string' ? type : type.name);
	    }
	    addType(nameOrTypeOrMember) {
	        let toAdd;
	        if (nameOrTypeOrMember instanceof UnionMember) {
	            this.checkUpdate(nameOrTypeOrMember);
	            toAdd = nameOrTypeOrMember;
	        }
	        else {
	            let obj;
	            if (typeof nameOrTypeOrMember === 'string') {
	                this.checkUpdate();
	                const maybeObj = this.schema().type(nameOrTypeOrMember);
	                if (!maybeObj) {
	                    throw new graphql_1.GraphQLError(`Cannot add unknown type ${nameOrTypeOrMember} as member of union type ${this.name}`);
	                }
	                else if (maybeObj.kind != 'ObjectType') {
	                    throw new graphql_1.GraphQLError(`Cannot add non-object type ${nameOrTypeOrMember} (of type ${maybeObj.kind}) as member of union type ${this.name}`);
	                }
	                obj = maybeObj;
	            }
	            else {
	                this.checkUpdate(nameOrTypeOrMember);
	                obj = nameOrTypeOrMember;
	            }
	            toAdd = new UnionMember(obj);
	        }
	        const existing = this._members.get(toAdd.type.name);
	        if (!existing) {
	            this._members.set(toAdd.type.name, toAdd);
	            Element.prototype['setParent'].call(toAdd, this);
	            addReferenceToType(this, toAdd.type);
	            this.onModification();
	            return toAdd;
	        }
	        else {
	            return existing;
	        }
	    }
	    clearTypes() {
	        for (const type of this.types()) {
	            this.removeMember(type);
	        }
	        this.onModification();
	    }
	    field(name) {
	        if (name === exports.typenameFieldName && this._typenameField) {
	            return this._typenameField;
	        }
	        return undefined;
	    }
	    typenameField() {
	        return this._typenameField;
	    }
	    removeMember(type) {
	        this._members.delete(type.name);
	        removeReferenceToType(this, type);
	    }
	    removeTypeReference(type) {
	        this._members.delete(type.name);
	    }
	    removeInnerElements() {
	        for (const member of this.members()) {
	            member.remove();
	        }
	    }
	    hasNonExtensionInnerElements() {
	        return this.members().some(m => m.ofExtension() === undefined);
	    }
	    removeReferenceRecursive(ref) {
	        ref.removeRecursive();
	    }
	}
	exports.UnionType = UnionType;
	class EnumType extends BaseNamedType {
	    constructor() {
	        super(...arguments);
	        this.kind = 'EnumType';
	        this._values = [];
	    }
	    get values() {
	        return this._values;
	    }
	    value(name) {
	        return this._values.find(v => v.name == name);
	    }
	    addValue(nameOrValue) {
	        let toAdd;
	        if (typeof nameOrValue === 'string') {
	            this.checkUpdate();
	            toAdd = new EnumValue(nameOrValue);
	        }
	        else {
	            this.checkUpdate(nameOrValue);
	            toAdd = nameOrValue;
	        }
	        const existing = this.value(toAdd.name);
	        if (!existing) {
	            this._values.push(toAdd);
	            Element.prototype['setParent'].call(toAdd, this);
	            this.onModification();
	            return toAdd;
	        }
	        else {
	            return existing;
	        }
	    }
	    removeTypeReference(type) {
	        (0, utils_1.assert)(false, `Eum type ${this} can't reference other types; shouldn't be asked to remove reference to ${type}`);
	    }
	    removeValueInternal(value) {
	        const index = this._values.indexOf(value);
	        if (index >= 0) {
	            this._values.splice(index, 1);
	        }
	    }
	    removeInnerElements() {
	        this._values.splice(0, this._values.length);
	    }
	    hasNonExtensionInnerElements() {
	        return this._values.some(v => v.ofExtension() === undefined);
	    }
	    removeReferenceRecursive(ref) {
	        ref.removeRecursive();
	    }
	}
	exports.EnumType = EnumType;
	class InputObjectType extends BaseNamedType {
	    constructor() {
	        super(...arguments);
	        this.kind = 'InputObjectType';
	        this._fields = new Map();
	    }
	    fields() {
	        if (!this._cachedFieldsArray) {
	            this._cachedFieldsArray = (0, utils_1.mapValues)(this._fields);
	        }
	        return this._cachedFieldsArray;
	    }
	    field(name) {
	        return this._fields.get(name);
	    }
	    addField(nameOrField, type) {
	        const toAdd = typeof nameOrField === 'string' ? new InputFieldDefinition(nameOrField) : nameOrField;
	        this.checkUpdate(toAdd);
	        if (this.field(toAdd.name)) {
	            throw error(`Field ${toAdd.name} already exists on ${this}`);
	        }
	        if (type && !isInputType(type)) {
	            throw error(`Invalid output type ${type} for field ${toAdd.name}: input field types should be input types.`);
	        }
	        this._fields.set(toAdd.name, toAdd);
	        this._cachedFieldsArray = undefined;
	        Element.prototype['setParent'].call(toAdd, this);
	        if (typeof nameOrField === 'string' && type) {
	            toAdd.type = type;
	        }
	        this.onModification();
	        return toAdd;
	    }
	    hasFields() {
	        return this._fields.size > 0;
	    }
	    *allChildElements() {
	        yield* this._fields.values();
	    }
	    removeTypeReference(type) {
	        (0, utils_1.assert)(false, `Input Object type ${this} can't reference other types; shouldn't be asked to remove reference to ${type}`);
	    }
	    removeInnerElements() {
	        for (const field of this.fields()) {
	            field.remove();
	        }
	    }
	    removeFieldInternal(field) {
	        this._fields.delete(field.name);
	        this._cachedFieldsArray = undefined;
	    }
	    hasNonExtensionInnerElements() {
	        return this.fields().some(f => f.ofExtension() === undefined);
	    }
	    removeReferenceRecursive(ref) {
	        if (ref.kind === 'ArgumentDefinition') {
	            ref.parent().removeRecursive();
	        }
	        else {
	            ref.removeRecursive();
	        }
	    }
	}
	exports.InputObjectType = InputObjectType;
	class BaseWrapperType {
	    constructor(_type) {
	        this._type = _type;
	        (0, utils_1.assert)(this._type, 'Cannot wrap an undefined/null type');
	    }
	    schema() {
	        return this.baseType().schema();
	    }
	    isAttached() {
	        return this.baseType().isAttached();
	    }
	    get ofType() {
	        return this._type;
	    }
	    baseType() {
	        return baseType(this._type);
	    }
	}
	class ListType extends BaseWrapperType {
	    constructor(type) {
	        super(type);
	        this.kind = 'ListType';
	    }
	    toString() {
	        return `[${this.ofType}]`;
	    }
	}
	exports.ListType = ListType;
	class NonNullType extends BaseWrapperType {
	    constructor(type) {
	        super(type);
	        this.kind = 'NonNullType';
	    }
	    toString() {
	        return `${this.ofType}!`;
	    }
	}
	exports.NonNullType = NonNullType;
	class FieldDefinition extends NamedSchemaElementWithType {
	    constructor(name, isBuiltIn = false) {
	        super(name);
	        this.isBuiltIn = isBuiltIn;
	        this.kind = 'FieldDefinition';
	        this._args = new utils_1.MapWithCachedArrays();
	    }
	    isElementBuiltIn() {
	        return this.isBuiltIn;
	    }
	    get coordinate() {
	        const parent = this._parent;
	        return `${parent == undefined ? '<detached>' : parent.coordinate}.${this.name}`;
	    }
	    hasArguments() {
	        return this._args.size > 0;
	    }
	    arguments() {
	        return this._args.values();
	    }
	    argument(name) {
	        return this._args.get(name);
	    }
	    addArgument(nameOrArg, type, defaultValue) {
	        let toAdd;
	        if (typeof nameOrArg === 'string') {
	            this.checkUpdate();
	            toAdd = new ArgumentDefinition(nameOrArg);
	            toAdd.defaultValue = defaultValue;
	        }
	        else {
	            this.checkUpdate(nameOrArg);
	            toAdd = nameOrArg;
	        }
	        const existing = this.argument(toAdd.name);
	        if (existing) {
	            if (type && existing.type && !(0, types_1.sameType)(type, existing.type)) {
	                throw error(`Argument ${toAdd.name} already exists on field ${this.name} with a different type (${existing.type})`);
	            }
	            if (defaultValue && (!existing.defaultValue || !(0, values_1.valueEquals)(defaultValue, existing.defaultValue))) {
	                throw error(`Argument ${toAdd.name} already exists on field ${this.name} with a different default value (${(0, values_1.valueToString)(existing.defaultValue)})`);
	            }
	            return existing;
	        }
	        if (type && !isInputType(type)) {
	            throw error(`Invalid output type ${type} for argument ${toAdd.name} of ${this}: arguments should be input types.`);
	        }
	        this._args.set(toAdd.name, toAdd);
	        Element.prototype['setParent'].call(toAdd, this);
	        if (typeof nameOrArg === 'string') {
	            toAdd.type = type;
	        }
	        this.onModification();
	        return toAdd;
	    }
	    ofExtension() {
	        return this._extension;
	    }
	    setOfExtension(extension) {
	        var _a;
	        this.checkUpdate();
	        if (extension && !((_a = this._parent) === null || _a === void 0 ? void 0 : _a.extensions().has(extension))) {
	            throw error(`Cannot mark field ${this.name} as part of the provided extension: it is not an extension of field parent type ${this.parent}`);
	        }
	        this._extension = extension;
	        this.onModification();
	    }
	    isIntrospectionField() {
	        return (0, introspection_1.isIntrospectionName)(this.name);
	    }
	    isSchemaIntrospectionField() {
	        return introspection_1.introspectionFieldNames.includes(this.name);
	    }
	    removeArgumentInternal(name) {
	        this._args.delete(name);
	    }
	    removeParent() {
	        this._parent = undefined;
	    }
	    isDeprecated() {
	        return this.hasAppliedDirective('deprecated');
	    }
	    remove() {
	        if (!this._parent) {
	            return [];
	        }
	        this.onModification();
	        this.removeAppliedDirectives();
	        this.type = undefined;
	        this._extension = undefined;
	        for (const arg of this.arguments()) {
	            arg.remove();
	        }
	        FieldBasedType.prototype['removeFieldInternal'].call(this._parent, this);
	        this._parent = undefined;
	        return [];
	    }
	    removeRecursive() {
	        const parent = this._parent;
	        this.remove();
	        if (parent && !isUnionType(parent) && parent.fields().length === 0) {
	            parent.removeRecursive();
	        }
	    }
	    toString() {
	        const args = this._args.size == 0
	            ? ""
	            : '(' + this.arguments().map(arg => arg.toString()).join(', ') + ')';
	        return `${this.name}${args}: ${this.type}`;
	    }
	}
	exports.FieldDefinition = FieldDefinition;
	class InputFieldDefinition extends NamedSchemaElementWithType {
	    constructor() {
	        super(...arguments);
	        this.kind = 'InputFieldDefinition';
	    }
	    get coordinate() {
	        const parent = this._parent;
	        return `${parent == undefined ? '<detached>' : parent.coordinate}.${this.name}`;
	    }
	    isRequired() {
	        return isNonNullType(this.type) && this.defaultValue === undefined;
	    }
	    ofExtension() {
	        return this._extension;
	    }
	    setOfExtension(extension) {
	        var _a;
	        this.checkUpdate();
	        if (extension && !((_a = this._parent) === null || _a === void 0 ? void 0 : _a.extensions().has(extension))) {
	            throw error(`Cannot mark field ${this.name} as part of the provided extension: it is not an extension of field parent type ${this.parent}`);
	        }
	        this._extension = extension;
	        this.onModification();
	    }
	    isDeprecated() {
	        return this.hasAppliedDirective('deprecated');
	    }
	    remove() {
	        if (!this._parent) {
	            return [];
	        }
	        this.onModification();
	        InputObjectType.prototype['removeFieldInternal'].call(this._parent, this);
	        this._parent = undefined;
	        this.type = undefined;
	        return [];
	    }
	    removeRecursive() {
	        const parent = this._parent;
	        this.remove();
	        if (parent && parent.fields().length === 0) {
	            parent.removeRecursive();
	        }
	    }
	    toString() {
	        const defaultStr = this.defaultValue === undefined ? "" : ` = ${(0, values_1.valueToString)(this.defaultValue, this.type)}`;
	        return `${this.name}: ${this.type}${defaultStr}`;
	    }
	}
	exports.InputFieldDefinition = InputFieldDefinition;
	class ArgumentDefinition extends NamedSchemaElementWithType {
	    constructor(name) {
	        super(name);
	        this.kind = 'ArgumentDefinition';
	    }
	    get coordinate() {
	        const parent = this._parent;
	        return `${parent == undefined ? '<detached>' : parent.coordinate}(${this.name}:)`;
	    }
	    isRequired() {
	        return isNonNullType(this.type) && this.defaultValue === undefined;
	    }
	    isDeprecated() {
	        return this.hasAppliedDirective('deprecated');
	    }
	    remove() {
	        if (!this._parent) {
	            return [];
	        }
	        this.onModification();
	        if (this._parent instanceof FieldDefinition) {
	            FieldDefinition.prototype['removeArgumentInternal'].call(this._parent, this.name);
	        }
	        else {
	            DirectiveDefinition.prototype['removeArgumentInternal'].call(this._parent, this.name);
	        }
	        this._parent = undefined;
	        this.type = undefined;
	        this.defaultValue = undefined;
	        return [];
	    }
	    toString() {
	        const defaultStr = this.defaultValue === undefined ? "" : ` = ${(0, values_1.valueToString)(this.defaultValue, this.type)}`;
	        return `${this.name}: ${this.type}${defaultStr}`;
	    }
	}
	exports.ArgumentDefinition = ArgumentDefinition;
	class EnumValue extends NamedSchemaElement {
	    constructor() {
	        super(...arguments);
	        this.kind = 'EnumValue';
	    }
	    get coordinate() {
	        const parent = this._parent;
	        return `${parent == undefined ? '<detached>' : parent.coordinate}.${this.name}`;
	    }
	    ofExtension() {
	        return this._extension;
	    }
	    setOfExtension(extension) {
	        var _a;
	        this.checkUpdate();
	        if (extension && !((_a = this._parent) === null || _a === void 0 ? void 0 : _a.extensions().has(extension))) {
	            throw error(`Cannot mark field ${this.name} as part of the provided extension: it is not an extension of field parent type ${this.parent}`);
	        }
	        this._extension = extension;
	        this.onModification();
	    }
	    isDeprecated() {
	        return this.hasAppliedDirective('deprecated');
	    }
	    remove() {
	        if (!this._parent) {
	            return [];
	        }
	        this.onModification();
	        EnumType.prototype['removeValueInternal'].call(this._parent, this);
	        this._parent = undefined;
	        return [];
	    }
	    removeTypeReference(type) {
	        (0, utils_1.assert)(false, `Enum value ${this} can't reference other types; shouldn't be asked to remove reference to ${type}`);
	    }
	    toString() {
	        return `${this.name}`;
	    }
	}
	exports.EnumValue = EnumValue;
	class DirectiveDefinition extends NamedSchemaElement {
	    constructor(name, isBuiltIn = false) {
	        super(name);
	        this.isBuiltIn = isBuiltIn;
	        this.kind = 'DirectiveDefinition';
	        this._args = new utils_1.MapWithCachedArrays();
	        this.repeatable = false;
	        this._locations = [];
	        this._referencers = new Set();
	    }
	    get coordinate() {
	        return `@${this.name}`;
	    }
	    arguments() {
	        return this._args.values();
	    }
	    argument(name) {
	        return this._args.get(name);
	    }
	    addArgument(nameOrArg, type, defaultValue) {
	        let toAdd;
	        if (typeof nameOrArg === 'string') {
	            this.checkUpdate();
	            toAdd = new ArgumentDefinition(nameOrArg);
	            toAdd.defaultValue = defaultValue;
	        }
	        else {
	            this.checkUpdate(nameOrArg);
	            toAdd = nameOrArg;
	        }
	        if (this.argument(toAdd.name)) {
	            throw error(`Argument ${toAdd.name} already exists on field ${this.name}`);
	        }
	        this._args.set(toAdd.name, toAdd);
	        Element.prototype['setParent'].call(toAdd, this);
	        if (typeof nameOrArg === 'string') {
	            toAdd.type = type;
	        }
	        this.onModification();
	        return toAdd;
	    }
	    removeArgumentInternal(name) {
	        this._args.delete(name);
	    }
	    get locations() {
	        return this._locations;
	    }
	    addLocations(...locations) {
	        let modified = false;
	        for (const location of locations) {
	            if (!this._locations.includes(location)) {
	                this._locations.push(location);
	                modified = true;
	            }
	        }
	        if (modified) {
	            this.onModification();
	        }
	        return this;
	    }
	    addAllLocations() {
	        return this.addLocations(...Object.values(graphql_1.DirectiveLocation));
	    }
	    addAllTypeLocations() {
	        return this.addLocations(graphql_1.DirectiveLocation.SCALAR, graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE, graphql_1.DirectiveLocation.UNION, graphql_1.DirectiveLocation.ENUM, graphql_1.DirectiveLocation.INPUT_OBJECT);
	    }
	    removeLocations(...locations) {
	        let modified = false;
	        for (const location of locations) {
	            const index = this._locations.indexOf(location);
	            if (index >= 0) {
	                this._locations.splice(index, 1);
	                modified = true;
	            }
	        }
	        if (modified) {
	            this.onModification();
	        }
	        return this;
	    }
	    applications() {
	        return (0, utils_1.setValues)(this._referencers);
	    }
	    addReferencer(referencer) {
	        (0, utils_1.assert)(referencer, 'Referencer should exists');
	        this._referencers.add(referencer);
	    }
	    removeReferencer(referencer) {
	        this._referencers.delete(referencer);
	    }
	    removeTypeReference(type) {
	        (0, utils_1.assert)(false, `Directive definition ${this} can't reference other types (it's arguments can); shouldn't be asked to remove reference to ${type}`);
	    }
	    remove() {
	        if (!this._parent) {
	            return [];
	        }
	        this.onModification();
	        Schema.prototype['removeDirectiveInternal'].call(this._parent, this);
	        this._parent = undefined;
	        (0, utils_1.assert)(this._appliedDirectives.length === 0, "Directive definition should not have directive applied to it");
	        for (const arg of this.arguments()) {
	            arg.remove();
	        }
	        const toReturn = (0, utils_1.setValues)(this._referencers);
	        this._referencers.clear();
	        return toReturn;
	    }
	    removeRecursive() {
	        this.remove().forEach(ref => ref.remove());
	    }
	    toString() {
	        return `@${this.name}`;
	    }
	}
	exports.DirectiveDefinition = DirectiveDefinition;
	class Directive extends Element {
	    constructor(name, _args) {
	        super();
	        this.name = name;
	        this._args = _args;
	    }
	    schema() {
	        return this.parent.schema();
	    }
	    get definition() {
	        const doc = this.schema();
	        return doc.directive(this.name);
	    }
	    arguments(includeDefaultValues = false) {
	        if (!includeDefaultValues) {
	            return this._args;
	        }
	        const definition = this.definition;
	        if (!definition) {
	            throw error(`Cannot include default values for arguments: cannot find directive definition for ${this.name}`);
	        }
	        const updated = Object.create(null);
	        for (const argDef of definition.arguments()) {
	            updated[argDef.name] = (0, values_1.withDefaultValues)(this._args[argDef.name], argDef);
	        }
	        return updated;
	    }
	    onModification() {
	        if (this.isAttachedToSchemaElement()) {
	            Schema.prototype['onModification'].call(this.schema());
	        }
	    }
	    isAttachedToSchemaElement() {
	        return this.isAttached();
	    }
	    setArguments(args) {
	        this._args = args;
	        this.onModification();
	    }
	    argumentType(name) {
	        var _a, _b;
	        return (_b = (_a = this.definition) === null || _a === void 0 ? void 0 : _a.argument(name)) === null || _b === void 0 ? void 0 : _b.type;
	    }
	    matchArguments(expectedArgs) {
	        const entries = Object.entries(this._args);
	        if (entries.length !== Object.keys(expectedArgs).length) {
	            return false;
	        }
	        for (const [key, val] of entries) {
	            if (!(key in expectedArgs)) {
	                return false;
	            }
	            const expectedVal = expectedArgs[key];
	            if (!(0, values_1.valueEquals)(expectedVal, val)) {
	                return false;
	            }
	        }
	        return true;
	    }
	    ofExtension() {
	        return this._extension;
	    }
	    setOfExtension(extension) {
	        this.checkUpdate();
	        if (extension) {
	            const parent = this.parent;
	            if (parent instanceof SchemaDefinition || parent instanceof BaseNamedType) {
	                if (!parent.extensions().has(extension)) {
	                    throw error(`Cannot mark directive ${this.name} as part of the provided extension: it is not an extension of parent ${parent}`);
	                }
	            }
	            else {
	                throw error(`Can only mark directive parts of extensions when directly apply to type or schema definition.`);
	            }
	        }
	        this._extension = extension;
	        this.onModification();
	    }
	    argumentsToAST() {
	        const entries = Object.entries(this._args);
	        if (entries.length === 0) {
	            return undefined;
	        }
	        const definition = this.definition;
	        (0, utils_1.assert)(definition, () => `Cannot convert arguments of detached directive ${this}`);
	        return entries.map(([n, v]) => {
	            return {
	                kind: graphql_1.Kind.ARGUMENT,
	                name: { kind: graphql_1.Kind.NAME, value: n },
	                value: (0, values_1.valueToAST)(v, definition.argument(n).type),
	            };
	        });
	    }
	    remove() {
	        if (!this._parent) {
	            return false;
	        }
	        this.onModification();
	        const coreFeatures = this.schema().coreFeatures;
	        if (coreFeatures && this.name === coreFeatures.coreItself.nameInSchema) {
	            const url = coreSpec_1.FeatureUrl.parse(this._args['feature']);
	            if (url.identity === coreFeatures.coreItself.url.identity) {
	                Schema.prototype['unmarkAsCoreSchema'].call(this.schema());
	                for (const d of this.schema().schemaDefinition.appliedDirectivesOf(coreFeatures.coreItself.nameInSchema)) {
	                    d.removeInternal();
	                }
	                return true;
	            }
	            else {
	                CoreFeatures.prototype['removeFeature'].call(coreFeatures, url.identity);
	            }
	        }
	        return this.removeInternal();
	    }
	    removeInternal() {
	        if (!this._parent) {
	            return false;
	        }
	        const definition = this.definition;
	        if (definition && this.isAttachedToSchemaElement()) {
	            DirectiveDefinition.prototype['removeReferencer'].call(definition, this);
	        }
	        const parentDirectives = this._parent.appliedDirectives;
	        const index = parentDirectives.indexOf(this);
	        (0, utils_1.assert)(index >= 0, () => `Directive ${this} lists ${this._parent} as parent, but that parent doesn't list it as applied directive`);
	        parentDirectives.splice(index, 1);
	        this._parent = undefined;
	        this._extension = undefined;
	        return true;
	    }
	    toString() {
	        const entries = Object.entries(this._args).filter(([_, v]) => v !== undefined);
	        const args = entries.length == 0 ? '' : '(' + entries.map(([n, v]) => `${n}: ${(0, values_1.valueToString)(v, this.argumentType(n))}`).join(', ') + ')';
	        return `@${this.name}${args}`;
	    }
	}
	exports.Directive = Directive;
	class Variable {
	    constructor(name) {
	        this.name = name;
	    }
	    toVariableNode() {
	        return {
	            kind: graphql_1.Kind.VARIABLE,
	            name: { kind: graphql_1.Kind.NAME, value: this.name },
	        };
	    }
	    toString() {
	        return '$' + this.name;
	    }
	}
	exports.Variable = Variable;
	function mergeVariables(v1s, v2s) {
	    if (v1s.length == 0) {
	        return v2s;
	    }
	    if (v2s.length == 0) {
	        return v1s;
	    }
	    const res = v1s.concat();
	    for (const v of v2s) {
	        if (!containsVariable(v1s, v)) {
	            res.push(v);
	        }
	    }
	    return res;
	}
	exports.mergeVariables = mergeVariables;
	function containsVariable(variables, toCheck) {
	    return variables.some(v => v.name == toCheck.name);
	}
	exports.containsVariable = containsVariable;
	function isVariable(v) {
	    return v instanceof Variable;
	}
	exports.isVariable = isVariable;
	function variablesInArguments(args) {
	    let variables = [];
	    for (const value of Object.values(args)) {
	        variables = mergeVariables(variables, (0, values_1.variablesInValue)(value));
	    }
	    return variables;
	}
	exports.variablesInArguments = variablesInArguments;
	class VariableDefinition extends DirectiveTargetElement {
	    constructor(schema, variable, type, defaultValue) {
	        super(schema);
	        this.variable = variable;
	        this.type = type;
	        this.defaultValue = defaultValue;
	    }
	    toVariableDefinitionNode() {
	        const ast = (0, values_1.valueToAST)(this.defaultValue, this.type);
	        return {
	            kind: graphql_1.Kind.VARIABLE_DEFINITION,
	            variable: this.variable.toVariableNode(),
	            type: typeToAST(this.type),
	            defaultValue: (ast !== undefined) ? (0, values_1.valueNodeToConstValueNode)(ast) : undefined,
	            directives: this.appliedDirectivesToDirectiveNodes(),
	        };
	    }
	    toString() {
	        let base = this.variable + ': ' + this.type;
	        if (this.defaultValue) {
	            base = base + ' = ' + (0, values_1.valueToString)(this.defaultValue, this.type);
	        }
	        return base + this.appliedDirectivesToString();
	    }
	}
	exports.VariableDefinition = VariableDefinition;
	class VariableDefinitions {
	    constructor() {
	        this._definitions = new utils_1.MapWithCachedArrays();
	    }
	    add(definition) {
	        if (this._definitions.has(definition.variable.name)) {
	            return false;
	        }
	        this._definitions.set(definition.variable.name, definition);
	        return true;
	    }
	    addAll(definitions) {
	        for (const definition of definitions._definitions.values()) {
	            this.add(definition);
	        }
	    }
	    definition(variable) {
	        const varName = typeof variable === 'string' ? variable : variable.name;
	        return this._definitions.get(varName);
	    }
	    isEmpty() {
	        return this._definitions.size === 0;
	    }
	    definitions() {
	        return this._definitions.values();
	    }
	    filter(variables) {
	        if (variables.length === 0) {
	            return new VariableDefinitions();
	        }
	        const newDefs = new VariableDefinitions();
	        for (const variable of variables) {
	            const def = this.definition(variable);
	            if (!def) {
	                throw new Error(`Cannot find variable ${variable} in definitions ${this}`);
	            }
	            newDefs.add(def);
	        }
	        return newDefs;
	    }
	    toVariableDefinitionNodes() {
	        if (this._definitions.size === 0) {
	            return undefined;
	        }
	        return this.definitions().map(def => def.toVariableDefinitionNode());
	    }
	    toString() {
	        return '(' + this.definitions().join(', ') + ')';
	    }
	}
	exports.VariableDefinitions = VariableDefinitions;
	function variableDefinitionsFromAST(schema, definitionNodes) {
	    const definitions = new VariableDefinitions();
	    for (const definitionNode of definitionNodes) {
	        if (!definitions.add(variableDefinitionFromAST(schema, definitionNode))) {
	            const name = definitionNode.variable.name.value;
	            throw new graphql_1.GraphQLError(`Duplicate definition for variable ${name}`, definitionNodes.filter(n => n.variable.name.value === name));
	        }
	    }
	    return definitions;
	}
	exports.variableDefinitionsFromAST = variableDefinitionsFromAST;
	function variableDefinitionFromAST(schema, definitionNode) {
	    const variable = new Variable(definitionNode.variable.name.value);
	    const type = typeFromAST(schema, definitionNode.type);
	    if (!isInputType(type)) {
	        throw new graphql_1.GraphQLError(`Invalid type "${type}" for variable $${variable}: not an input type`, definitionNode.type);
	    }
	    const def = new VariableDefinition(schema, variable, type, definitionNode.defaultValue ? (0, values_1.valueFromAST)(definitionNode.defaultValue, type) : undefined);
	    return def;
	}
	exports.variableDefinitionFromAST = variableDefinitionFromAST;
	exports.graphQLBuiltIns = new BuiltIns();
	function addReferenceToType(referencer, type) {
	    switch (type.kind) {
	        case 'ListType':
	            addReferenceToType(referencer, type.baseType());
	            break;
	        case 'NonNullType':
	            addReferenceToType(referencer, type.baseType());
	            break;
	        default:
	            BaseNamedType.prototype['addReferencer'].call(type, referencer);
	            break;
	    }
	}
	function removeReferenceToType(referencer, type) {
	    switch (type.kind) {
	        case 'ListType':
	            removeReferenceToType(referencer, type.baseType());
	            break;
	        case 'NonNullType':
	            removeReferenceToType(referencer, type.baseType());
	            break;
	        default:
	            BaseNamedType.prototype['removeReferencer'].call(type, referencer);
	            break;
	    }
	}
	function newNamedType(kind, name) {
	    switch (kind) {
	        case 'ScalarType':
	            return new ScalarType(name);
	        case 'ObjectType':
	            return new ObjectType(name);
	        case 'InterfaceType':
	            return new InterfaceType(name);
	        case 'UnionType':
	            return new UnionType(name);
	        case 'EnumType':
	            return new EnumType(name);
	        case 'InputObjectType':
	            return new InputObjectType(name);
	        default:
	            (0, utils_1.assert)(false, `Unhandled kind ${kind} for type ${name}`);
	    }
	}
	exports.newNamedType = newNamedType;
	function* typesToCopy(source, dest) {
	    var _a;
	    for (const type of source.builtInTypes()) {
	        if (!type.isIntrospectionType() && !((_a = dest.type(type.name)) === null || _a === void 0 ? void 0 : _a.isBuiltIn)) {
	            yield type;
	        }
	    }
	    yield* source.types();
	}
	function* directivesToCopy(source, dest) {
	    var _a;
	    for (const directive of source.builtInDirectives()) {
	        if (!((_a = dest.directive(directive.name)) === null || _a === void 0 ? void 0 : _a.isBuiltIn)) {
	            yield directive;
	        }
	    }
	    yield* source.directives();
	}
	function copy(source, dest) {
	    for (const type of typesToCopy(source, dest)) {
	        dest.addType(newNamedType(type.kind, type.name));
	    }
	    for (const directive of directivesToCopy(source, dest)) {
	        copyDirectiveDefinitionInner(directive, dest.addDirectiveDefinition(directive.name));
	    }
	    copySchemaDefinitionInner(source.schemaDefinition, dest.schemaDefinition);
	    for (const type of typesToCopy(source, dest)) {
	        copyNamedTypeInner(type, dest.type(type.name));
	    }
	}
	function copyExtensions(source, dest) {
	    const extensionMap = new Map();
	    for (const sourceExtension of source.extensions()) {
	        const destExtension = new Extension();
	        dest.addExtension(destExtension);
	        extensionMap.set(sourceExtension, destExtension);
	    }
	    return extensionMap;
	}
	function copyOfExtension(extensionsMap, source, dest) {
	    const toCopy = source.ofExtension();
	    if (toCopy) {
	        dest.setOfExtension(extensionsMap.get(toCopy));
	    }
	}
	function copySchemaDefinitionInner(source, dest) {
	    const extensionsMap = copyExtensions(source, dest);
	    for (const rootType of source.roots()) {
	        copyOfExtension(extensionsMap, rootType, dest.setRoot(rootType.rootKind, rootType.type.name));
	    }
	    for (const directive of source.appliedDirectives) {
	        copyOfExtension(extensionsMap, directive, dest.applyDirective(directive.name, { ...directive.arguments() }));
	    }
	    dest.description = source.description;
	    dest.sourceAST = source.sourceAST;
	}
	function copyNamedTypeInner(source, dest) {
	    const extensionsMap = copyExtensions(source, dest);
	    for (const directive of source.appliedDirectives) {
	        copyOfExtension(extensionsMap, directive, dest.applyDirective(directive.name, { ...directive.arguments() }));
	    }
	    dest.description = source.description;
	    dest.sourceAST = source.sourceAST;
	    switch (source.kind) {
	        case 'ObjectType':
	        case 'InterfaceType':
	            const destFieldBasedType = dest;
	            for (const sourceField of source.fields()) {
	                const destField = destFieldBasedType.addField(new FieldDefinition(sourceField.name));
	                copyOfExtension(extensionsMap, sourceField, destField);
	                copyFieldDefinitionInner(sourceField, destField);
	            }
	            for (const sourceImpl of source.interfaceImplementations()) {
	                const destImpl = destFieldBasedType.addImplementedInterface(sourceImpl.interface.name);
	                copyOfExtension(extensionsMap, sourceImpl, destImpl);
	            }
	            break;
	        case 'UnionType':
	            const destUnionType = dest;
	            for (const sourceType of source.members()) {
	                const destType = destUnionType.addType(sourceType.type.name);
	                copyOfExtension(extensionsMap, sourceType, destType);
	            }
	            break;
	        case 'EnumType':
	            const destEnumType = dest;
	            for (const sourceValue of source.values) {
	                const destValue = destEnumType.addValue(sourceValue.name);
	                destValue.description = sourceValue.description;
	                copyOfExtension(extensionsMap, sourceValue, destValue);
	                copyAppliedDirectives(sourceValue, destValue);
	            }
	            break;
	        case 'InputObjectType':
	            const destInputType = dest;
	            for (const sourceField of source.fields()) {
	                const destField = destInputType.addField(new InputFieldDefinition(sourceField.name));
	                copyOfExtension(extensionsMap, sourceField, destField);
	                copyInputFieldDefinitionInner(sourceField, destField);
	            }
	    }
	}
	function copyAppliedDirectives(source, dest) {
	    for (const directive of source.appliedDirectives) {
	        dest.applyDirective(directive.name, { ...directive.arguments() });
	    }
	}
	function copyFieldDefinitionInner(source, dest) {
	    const type = copyWrapperTypeOrTypeRef(source.type, dest.schema());
	    dest.type = type;
	    for (const arg of source.arguments()) {
	        const argType = copyWrapperTypeOrTypeRef(arg.type, dest.schema());
	        copyArgumentDefinitionInner(arg, dest.addArgument(arg.name, argType));
	    }
	    copyAppliedDirectives(source, dest);
	    dest.description = source.description;
	    dest.sourceAST = source.sourceAST;
	}
	function copyInputFieldDefinitionInner(source, dest) {
	    const type = copyWrapperTypeOrTypeRef(source.type, dest.schema());
	    dest.type = type;
	    dest.defaultValue = source.defaultValue;
	    copyAppliedDirectives(source, dest);
	    dest.description = source.description;
	    dest.sourceAST = source.sourceAST;
	}
	function copyWrapperTypeOrTypeRef(source, destParent) {
	    if (!source) {
	        return undefined;
	    }
	    switch (source.kind) {
	        case 'ListType':
	            return new ListType(copyWrapperTypeOrTypeRef(source.ofType, destParent));
	        case 'NonNullType':
	            return new NonNullType(copyWrapperTypeOrTypeRef(source.ofType, destParent));
	        default:
	            return destParent.type(source.name);
	    }
	}
	function copyArgumentDefinitionInner(source, dest) {
	    const type = copyWrapperTypeOrTypeRef(source.type, dest.schema());
	    dest.type = type;
	    dest.defaultValue = source.defaultValue;
	    copyAppliedDirectives(source, dest);
	    dest.description = source.description;
	    dest.sourceAST = source.sourceAST;
	}
	function copyDirectiveDefinitionInner(source, dest) {
	    for (const arg of source.arguments()) {
	        const type = copyWrapperTypeOrTypeRef(arg.type, dest.schema());
	        copyArgumentDefinitionInner(arg, dest.addArgument(arg.name, type));
	    }
	    dest.repeatable = source.repeatable;
	    dest.addLocations(...source.locations);
	    dest.sourceAST = source.sourceAST;
	    dest.description = source.description;
	}

	}(definitions));

	var buildSchema$1 = {};

	Object.defineProperty(buildSchema$1, "__esModule", { value: true });
	buildSchema$1.builtTypeReference = buildSchema$1.buildSchemaFromAST = buildSchema$1.buildSchema = void 0;
	const graphql_1$6 = require$$2$2;
	const definitions_1$3 = definitions;
	function buildValue(value) {
	    return value ? (0, graphql_1$6.valueFromASTUntyped)(value) : undefined;
	}
	function buildSchema(source, builtIns = definitions_1$3.graphQLBuiltIns, validate = true) {
	    return buildSchemaFromAST((0, graphql_1$6.parse)(source), builtIns, validate);
	}
	buildSchema$1.buildSchema = buildSchema;
	function buildSchemaFromAST(documentNode, builtIns = definitions_1$3.graphQLBuiltIns, validate = true) {
	    const schema = new definitions_1$3.Schema(builtIns);
	    const directiveDefinitionNodes = buildNamedTypeAndDirectivesShallow(documentNode, schema);
	    for (const directiveDefinitionNode of directiveDefinitionNodes) {
	        buildDirectiveDefinitionInner(directiveDefinitionNode, schema.directive(directiveDefinitionNode.name.value));
	    }
	    for (const definitionNode of documentNode.definitions) {
	        switch (definitionNode.kind) {
	            case 'OperationDefinition':
	            case 'FragmentDefinition':
	                throw new graphql_1$6.GraphQLError("Invalid executable definition found while building schema", definitionNode);
	            case 'SchemaDefinition':
	                buildSchemaDefinitionInner(definitionNode, schema.schemaDefinition);
	                break;
	            case 'SchemaExtension':
	                buildSchemaDefinitionInner(definitionNode, schema.schemaDefinition, schema.schemaDefinition.newExtension());
	                break;
	            case 'ScalarTypeDefinition':
	            case 'ObjectTypeDefinition':
	            case 'InterfaceTypeDefinition':
	            case 'UnionTypeDefinition':
	            case 'EnumTypeDefinition':
	            case 'InputObjectTypeDefinition':
	                buildNamedTypeInner(definitionNode, schema.type(definitionNode.name.value));
	                break;
	            case 'ScalarTypeExtension':
	            case 'ObjectTypeExtension':
	            case 'InterfaceTypeExtension':
	            case 'UnionTypeExtension':
	            case 'EnumTypeExtension':
	            case 'InputObjectTypeExtension':
	                const toExtend = schema.type(definitionNode.name.value);
	                const extension = toExtend.newExtension();
	                extension.sourceAST = definitionNode;
	                buildNamedTypeInner(definitionNode, toExtend, extension);
	                break;
	        }
	    }
	    definitions_1$3.Schema.prototype['forceSetCachedDocument'].call(schema, documentNode);
	    if (validate) {
	        schema.validate();
	    }
	    return schema;
	}
	buildSchema$1.buildSchemaFromAST = buildSchemaFromAST;
	function buildNamedTypeAndDirectivesShallow(documentNode, schema) {
	    const directiveDefinitionNodes = [];
	    for (const definitionNode of documentNode.definitions) {
	        switch (definitionNode.kind) {
	            case 'ScalarTypeDefinition':
	            case 'ObjectTypeDefinition':
	            case 'InterfaceTypeDefinition':
	            case 'UnionTypeDefinition':
	            case 'EnumTypeDefinition':
	            case 'InputObjectTypeDefinition':
	            case 'ScalarTypeExtension':
	            case 'ObjectTypeExtension':
	            case 'InterfaceTypeExtension':
	            case 'UnionTypeExtension':
	            case 'EnumTypeExtension':
	            case 'InputObjectTypeExtension':
	                const existing = schema.type(definitionNode.name.value);
	                if (!existing || existing.isBuiltIn) {
	                    schema.addType((0, definitions_1$3.newNamedType)(withoutTrailingDefinition(definitionNode.kind), definitionNode.name.value));
	                }
	                break;
	            case 'DirectiveDefinition':
	                directiveDefinitionNodes.push(definitionNode);
	                schema.addDirectiveDefinition(definitionNode.name.value);
	                break;
	        }
	    }
	    return directiveDefinitionNodes;
	}
	function withoutTrailingDefinition(str) {
	    const endString = str.endsWith('Definition') ? 'Definition' : 'Extension';
	    return str.slice(0, str.length - endString.length);
	}
	function getReferencedType(node, schema) {
	    const type = schema.type(node.name.value);
	    if (!type) {
	        throw new graphql_1$6.GraphQLError(`Unknown type ${node.name.value}`, node);
	    }
	    return type;
	}
	function withNodeAttachedToError(operation, node) {
	    try {
	        operation();
	    }
	    catch (e) {
	        if (e instanceof graphql_1$6.GraphQLError) {
	            const allNodes = e.nodes ? [node, ...e.nodes] : node;
	            throw new graphql_1$6.GraphQLError(e.message, allNodes, e.source, e.positions, e.path, e, e.extensions);
	        }
	        else {
	            throw e;
	        }
	    }
	}
	function buildSchemaDefinitionInner(schemaNode, schemaDefinition, extension) {
	    var _a, _b;
	    for (const opTypeNode of (_a = schemaNode.operationTypes) !== null && _a !== void 0 ? _a : []) {
	        withNodeAttachedToError(() => schemaDefinition.setRoot(opTypeNode.operation, opTypeNode.type.name.value).setOfExtension(extension), opTypeNode);
	    }
	    schemaDefinition.sourceAST = schemaNode;
	    schemaDefinition.description = 'description' in schemaNode ? (_b = schemaNode.description) === null || _b === void 0 ? void 0 : _b.value : undefined;
	    buildAppliedDirectives(schemaNode, schemaDefinition, extension);
	}
	function buildAppliedDirectives(elementNode, element, extension) {
	    var _a;
	    for (const directive of (_a = elementNode.directives) !== null && _a !== void 0 ? _a : []) {
	        withNodeAttachedToError(() => {
	            const d = element.applyDirective(directive.name.value, buildArgs(directive));
	            d.setOfExtension(extension);
	            d.sourceAST = directive;
	        }, directive);
	    }
	}
	function buildArgs(argumentsNode) {
	    var _a;
	    const args = Object.create(null);
	    for (const argNode of (_a = argumentsNode.arguments) !== null && _a !== void 0 ? _a : []) {
	        args[argNode.name.value] = buildValue(argNode.value);
	    }
	    return args;
	}
	function buildNamedTypeInner(definitionNode, type, extension) {
	    var _a, _b, _c, _d, _e, _f, _g;
	    switch (definitionNode.kind) {
	        case 'ObjectTypeDefinition':
	        case 'ObjectTypeExtension':
	        case 'InterfaceTypeDefinition':
	        case 'InterfaceTypeExtension':
	            const fieldBasedType = type;
	            for (const fieldNode of (_a = definitionNode.fields) !== null && _a !== void 0 ? _a : []) {
	                const field = fieldBasedType.addField(fieldNode.name.value);
	                field.setOfExtension(extension);
	                buildFieldDefinitionInner(fieldNode, field);
	            }
	            for (const itfNode of (_b = definitionNode.interfaces) !== null && _b !== void 0 ? _b : []) {
	                withNodeAttachedToError(() => {
	                    const itfName = itfNode.name.value;
	                    if (fieldBasedType.implementsInterface(itfName)) {
	                        throw new graphql_1$6.GraphQLError(`Type ${type} can only implement ${itfName} once.`);
	                    }
	                    fieldBasedType.addImplementedInterface(itfName).setOfExtension(extension);
	                }, itfNode);
	            }
	            break;
	        case 'UnionTypeDefinition':
	        case 'UnionTypeExtension':
	            const unionType = type;
	            for (const namedType of (_c = definitionNode.types) !== null && _c !== void 0 ? _c : []) {
	                withNodeAttachedToError(() => {
	                    const name = namedType.name.value;
	                    if (unionType.hasTypeMember(name)) {
	                        throw new graphql_1$6.GraphQLError(`Union type ${unionType} can only include type ${name} once.`);
	                    }
	                    unionType.addType(name).setOfExtension(extension);
	                }, namedType);
	            }
	            break;
	        case 'EnumTypeDefinition':
	        case 'EnumTypeExtension':
	            const enumType = type;
	            for (const enumVal of (_d = definitionNode.values) !== null && _d !== void 0 ? _d : []) {
	                const v = enumType.addValue(enumVal.name.value);
	                v.description = (_e = enumVal.description) === null || _e === void 0 ? void 0 : _e.value;
	                v.setOfExtension(extension);
	                buildAppliedDirectives(enumVal, v);
	            }
	            break;
	        case 'InputObjectTypeDefinition':
	        case 'InputObjectTypeExtension':
	            const inputObjectType = type;
	            for (const fieldNode of (_f = definitionNode.fields) !== null && _f !== void 0 ? _f : []) {
	                const field = inputObjectType.addField(fieldNode.name.value);
	                field.setOfExtension(extension);
	                buildInputFieldDefinitionInner(fieldNode, field);
	            }
	            break;
	    }
	    buildAppliedDirectives(definitionNode, type, extension);
	    type.description = (_g = definitionNode.description) === null || _g === void 0 ? void 0 : _g.value;
	    type.sourceAST = definitionNode;
	}
	function buildFieldDefinitionInner(fieldNode, field) {
	    var _a, _b;
	    const type = buildTypeReferenceFromAST(fieldNode.type, field.schema());
	    field.type = ensureOutputType(type, field.coordinate, fieldNode);
	    for (const inputValueDef of (_a = fieldNode.arguments) !== null && _a !== void 0 ? _a : []) {
	        buildArgumentDefinitionInner(inputValueDef, field.addArgument(inputValueDef.name.value));
	    }
	    buildAppliedDirectives(fieldNode, field);
	    field.description = (_b = fieldNode.description) === null || _b === void 0 ? void 0 : _b.value;
	    field.sourceAST = fieldNode;
	}
	function ensureOutputType(type, what, node) {
	    if ((0, definitions_1$3.isOutputType)(type)) {
	        return type;
	    }
	    else {
	        throw new graphql_1$6.GraphQLError(`The type of ${what} must be Output Type but got: ${type}, a ${type.kind}.`, node);
	    }
	}
	function ensureInputType(type, what, node) {
	    if ((0, definitions_1$3.isInputType)(type)) {
	        return type;
	    }
	    else {
	        throw new graphql_1$6.GraphQLError(`The type of ${what} must be Input Type but got: ${type}, a ${type.kind}.`, node);
	    }
	}
	function builtTypeReference(encodedType, schema) {
	    return buildTypeReferenceFromAST((0, graphql_1$6.parseType)(encodedType), schema);
	}
	buildSchema$1.builtTypeReference = builtTypeReference;
	function buildTypeReferenceFromAST(typeNode, schema) {
	    switch (typeNode.kind) {
	        case graphql_1$6.Kind.LIST_TYPE:
	            return new definitions_1$3.ListType(buildTypeReferenceFromAST(typeNode.type, schema));
	        case graphql_1$6.Kind.NON_NULL_TYPE:
	            const wrapped = buildTypeReferenceFromAST(typeNode.type, schema);
	            if (wrapped.kind == graphql_1$6.Kind.NON_NULL_TYPE) {
	                throw new graphql_1$6.GraphQLError(`Cannot apply the non-null operator (!) twice to the same type`, typeNode);
	            }
	            return new definitions_1$3.NonNullType(wrapped);
	        default:
	            return getReferencedType(typeNode, schema);
	    }
	}
	function buildArgumentDefinitionInner(inputNode, arg) {
	    var _a;
	    const type = buildTypeReferenceFromAST(inputNode.type, arg.schema());
	    arg.type = ensureInputType(type, arg.coordinate, inputNode);
	    arg.defaultValue = buildValue(inputNode.defaultValue);
	    buildAppliedDirectives(inputNode, arg);
	    arg.description = (_a = inputNode.description) === null || _a === void 0 ? void 0 : _a.value;
	    arg.sourceAST = inputNode;
	}
	function buildInputFieldDefinitionInner(fieldNode, field) {
	    var _a;
	    const type = buildTypeReferenceFromAST(fieldNode.type, field.schema());
	    field.type = ensureInputType(type, field.coordinate, fieldNode);
	    field.defaultValue = buildValue(fieldNode.defaultValue);
	    buildAppliedDirectives(fieldNode, field);
	    field.description = (_a = fieldNode.description) === null || _a === void 0 ? void 0 : _a.value;
	    field.sourceAST = fieldNode;
	}
	function buildDirectiveDefinitionInner(directiveNode, directive) {
	    var _a, _b;
	    for (const inputValueDef of (_a = directiveNode.arguments) !== null && _a !== void 0 ? _a : []) {
	        buildArgumentDefinitionInner(inputValueDef, directive.addArgument(inputValueDef.name.value));
	    }
	    directive.repeatable = directiveNode.repeatable;
	    const locations = directiveNode.locations.map(({ value }) => value);
	    directive.addLocations(...locations);
	    directive.description = (_b = directiveNode.description) === null || _b === void 0 ? void 0 : _b.value;
	    directive.sourceAST = directiveNode;
	}

	var federation = {};

	var KnownTypeNamesInFederationRule$1 = {};

	Object.defineProperty(KnownTypeNamesInFederationRule$1, "__esModule", { value: true });
	KnownTypeNamesInFederationRule$1.KnownTypeNamesInFederationRule = void 0;
	const graphql_1$5 = require$$2$2;
	const federation_1$1 = federation;
	const suggestions_1 = suggestions;
	function KnownTypeNamesInFederationRule(context) {
	    const schema = context.getSchema();
	    const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);
	    const definedTypes = Object.create(null);
	    for (const def of context.getDocument().definitions) {
	        if ((0, graphql_1$5.isTypeDefinitionNode)(def) || (0, graphql_1$5.isTypeExtensionNode)(def)) {
	            definedTypes[def.name.value] = true;
	        }
	    }
	    const typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));
	    return {
	        NamedType(node, _1, parent, _2, ancestors) {
	            var _a;
	            const typeName = node.name.value;
	            if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
	                const definitionNode = (_a = ancestors[2]) !== null && _a !== void 0 ? _a : parent;
	                const isSDL = definitionNode != null && isSDLNode(definitionNode);
	                if (isSDL && isStandardTypeName(typeName)) {
	                    return;
	                }
	                const suggestedTypes = (0, suggestions_1.suggestionList)(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);
	                context.reportError(new graphql_1$5.GraphQLError(`Unknown type "${typeName}".` + (0, suggestions_1.didYouMean)(suggestedTypes), node));
	            }
	        },
	    };
	}
	KnownTypeNamesInFederationRule$1.KnownTypeNamesInFederationRule = KnownTypeNamesInFederationRule;
	const standardTypeNames = [...graphql_1$5.specifiedScalarTypes, ...graphql_1$5.introspectionTypes].map((type) => type.name);
	function isStandardTypeName(typeName) {
	    return standardTypeNames.indexOf(typeName) !== -1 || (0, federation_1$1.isFederationTypeName)(typeName);
	}
	function isSDLNode(value) {
	    return (!Array.isArray(value) &&
	        ((0, graphql_1$5.isTypeSystemDefinitionNode)(value) || (0, graphql_1$5.isTypeSystemExtensionNode)(value)));
	}

	var operations = {};

	Object.defineProperty(operations, "__esModule", { value: true });
	operations.operationToDocument = operations.parseSelectionSet = operations.parseOperation = operations.operationFromDocument = operations.FragmentSelection = operations.FieldSelection = operations.selectionSetOfPath = operations.selectionOfElement = operations.selectionSetOfElement = operations.SelectionSet = operations.NamedFragments = operations.NamedFragmentDefinition = operations.selectionSetOf = operations.Operation = operations.sameOperationPaths = operations.FragmentElement = operations.Field = void 0;
	const graphql_1$4 = require$$2$2;
	const definitions_1$2 = definitions;
	const utils_1$2 = utils;
	const values_1 = values;
	function validate$1(condition, message, sourceAST) {
	    if (!condition) {
	        throw new graphql_1$4.GraphQLError(message(), sourceAST);
	    }
	}
	function haveSameDirectives(op1, op2) {
	    if (op1.appliedDirectives.length != op2.appliedDirectives.length) {
	        return false;
	    }
	    for (const thisDirective of op1.appliedDirectives) {
	        if (!op2.appliedDirectives.some(thatDirective => thisDirective.name === thatDirective.name && (0, values_1.argumentsEquals)(thisDirective.arguments(), thatDirective.arguments()))) {
	            return false;
	        }
	    }
	    return true;
	}
	class AbstractOperationElement extends definitions_1$2.DirectiveTargetElement {
	    constructor(schema, variablesInElement) {
	        super(schema);
	        this.variablesInElement = variablesInElement;
	    }
	    variables() {
	        return (0, definitions_1$2.mergeVariables)(this.variablesInElement, this.variablesInAppliedDirectives());
	    }
	}
	class Field extends AbstractOperationElement {
	    constructor(definition, args = Object.create(null), variableDefinitions = new definitions_1$2.VariableDefinitions(), alias) {
	        super(definition.schema(), (0, definitions_1$2.variablesInArguments)(args));
	        this.definition = definition;
	        this.args = args;
	        this.variableDefinitions = variableDefinitions;
	        this.alias = alias;
	        this.kind = 'Field';
	        this.validate();
	    }
	    get name() {
	        return this.definition.name;
	    }
	    responseName() {
	        return this.alias ? this.alias : this.name;
	    }
	    get parentType() {
	        return this.definition.parent;
	    }
	    withUpdatedDefinition(newDefinition) {
	        const newField = new Field(newDefinition, this.args, this.variableDefinitions, this.alias);
	        for (const directive of this.appliedDirectives) {
	            newField.applyDirective(directive.definition, directive.arguments());
	        }
	        return newField;
	    }
	    appliesTo(type) {
	        const definition = type.field(this.name);
	        return !!definition && this.selects(definition);
	    }
	    selects(definition, assumeValid = false) {
	        if (definition == this.definition) {
	            return true;
	        }
	        if (this.name !== definition.name) {
	            return false;
	        }
	        for (const argDef of definition.arguments()) {
	            const appliedValue = this.args[argDef.name];
	            if (appliedValue === undefined) {
	                if (argDef.defaultValue === undefined && !(0, definitions_1$2.isNullableType)(argDef.type)) {
	                    return false;
	                }
	            }
	            else {
	                if (!assumeValid && !(0, values_1.isValidValue)(appliedValue, argDef, this.variableDefinitions)) {
	                    return false;
	                }
	            }
	        }
	        if (!assumeValid) {
	            for (const [name, value] of Object.entries(this.args)) {
	                if (value !== null && definition.argument(name) === undefined) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    }
	    validate() {
	        validate$1(this.name === this.definition.name, () => `Field name "${this.name}" cannot select field "${this.definition.coordinate}: name mismatch"`);
	        for (const argDef of this.definition.arguments()) {
	            const appliedValue = this.args[argDef.name];
	            if (appliedValue === undefined) {
	                validate$1(argDef.defaultValue !== undefined || (0, definitions_1$2.isNullableType)(argDef.type), () => `Missing mandatory value "${argDef.name}" in field selection "${this}"`);
	            }
	            else {
	                validate$1((0, values_1.isValidValue)(appliedValue, argDef, this.variableDefinitions), () => `Invalid value ${(0, values_1.valueToString)(appliedValue)} for argument "${argDef.coordinate}" of type ${argDef.type}`);
	            }
	        }
	        for (const [name, value] of Object.entries(this.args)) {
	            validate$1(value === null || this.definition.argument(name) !== undefined, () => `Unknown argument "${name}" in field application of "${this.name}"`);
	        }
	    }
	    updateForAddingTo(selectionSet) {
	        const selectionParent = selectionSet.parentType;
	        const fieldParent = this.definition.parent;
	        if (selectionParent.name !== fieldParent.name) {
	            if (this.name === definitions_1$2.typenameFieldName) {
	                return this.withUpdatedDefinition(selectionParent.typenameField());
	            }
	            validate$1(!(0, definitions_1$2.isUnionType)(selectionParent)
	                && (((0, definitions_1$2.isInterfaceType)(fieldParent) && fieldParent.allImplementations().some(i => i.name == selectionParent.name))
	                    || ((0, definitions_1$2.isObjectType)(fieldParent) && fieldParent.name == selectionParent.name)), () => `Cannot add selection of field "${this.definition.coordinate}" to selection set of parent type "${selectionSet.parentType}"`);
	            const fieldDef = selectionParent.field(this.name);
	            validate$1(fieldDef, () => `Cannot add selection of field "${this.definition.coordinate}" to selection set of parent type "${selectionParent} (that does not declare that type)"`);
	            return this.withUpdatedDefinition(fieldDef);
	        }
	        return this;
	    }
	    equals(that) {
	        if (this === that) {
	            return true;
	        }
	        return that.kind === 'Field'
	            && this.name === that.name
	            && this.alias === that.alias
	            && (0, values_1.argumentsEquals)(this.args, that.args)
	            && haveSameDirectives(this, that);
	    }
	    toString() {
	        const alias = this.alias ? this.alias + ': ' : '';
	        const entries = Object.entries(this.args);
	        const args = entries.length == 0
	            ? ''
	            : '(' + entries.map(([n, v]) => { var _a; return `${n}: ${(0, values_1.valueToString)(v, (_a = this.definition.argument(n)) === null || _a === void 0 ? void 0 : _a.type)}`; }).join(', ') + ')';
	        return alias + this.name + args + this.appliedDirectivesToString();
	    }
	}
	operations.Field = Field;
	class FragmentElement extends AbstractOperationElement {
	    constructor(sourceType, typeCondition) {
	        super(sourceType.schema(), []);
	        this.sourceType = sourceType;
	        this.kind = 'FragmentElement';
	        this.typeCondition = typeCondition !== undefined && typeof typeCondition === 'string'
	            ? this.schema().type(typeCondition)
	            : typeCondition;
	    }
	    get parentType() {
	        return this.sourceType;
	    }
	    withUpdatedSourceType(newSourceType) {
	        const newFragment = new FragmentElement(newSourceType, this.typeCondition);
	        for (const directive of this.appliedDirectives) {
	            newFragment.applyDirective(directive.definition, directive.arguments());
	        }
	        return newFragment;
	    }
	    updateForAddingTo(selectionSet) {
	        const selectionParent = selectionSet.parentType;
	        const fragmentParent = this.parentType;
	        const typeCondition = this.typeCondition;
	        if (selectionParent != fragmentParent) {
	            validate$1(!typeCondition || (0, definitions_1$2.runtimeTypesIntersects)(selectionParent, typeCondition), () => `Cannot add fragment of parent type "${this.parentType}" to selection set of parent type "${selectionSet.parentType}"`);
	            return this.withUpdatedSourceType(selectionParent);
	        }
	        return this;
	    }
	    equals(that) {
	        var _a, _b;
	        if (this === that) {
	            return true;
	        }
	        return that.kind === 'FragmentElement'
	            && ((_a = this.typeCondition) === null || _a === void 0 ? void 0 : _a.name) === ((_b = that.typeCondition) === null || _b === void 0 ? void 0 : _b.name)
	            && haveSameDirectives(this, that);
	    }
	    toString() {
	        return '...' + (this.typeCondition ? ' on ' + this.typeCondition : '') + this.appliedDirectivesToString();
	    }
	}
	operations.FragmentElement = FragmentElement;
	function sameOperationPaths(p1, p2) {
	    if (p1 === p2) {
	        return true;
	    }
	    if (p1.length !== p2.length) {
	        return false;
	    }
	    for (let i = 0; i < p1.length; i++) {
	        if (!p1[i].equals(p2[i])) {
	            return false;
	        }
	    }
	    return true;
	}
	operations.sameOperationPaths = sameOperationPaths;
	class Operation {
	    constructor(rootKind, selectionSet, variableDefinitions, name) {
	        this.rootKind = rootKind;
	        this.selectionSet = selectionSet;
	        this.variableDefinitions = variableDefinitions;
	        this.name = name;
	    }
	    optimize(fragments, minUsagesToOptimize = 2) {
	        if (!fragments) {
	            return this;
	        }
	        let optimizedSelection = this.selectionSet.optimize(fragments);
	        if (optimizedSelection === this.selectionSet) {
	            return this;
	        }
	        if (minUsagesToOptimize > 1) {
	            const usages = new Map();
	            optimizedSelection.collectUsedFragmentNames(usages);
	            for (const fragment of fragments.names()) {
	                if (!usages.has(fragment)) {
	                    usages.set(fragment, 0);
	                }
	            }
	            const toDeoptimize = (0, utils_1$2.mapEntries)(usages).filter(([_, count]) => count < minUsagesToOptimize).map(([name]) => name);
	            optimizedSelection = optimizedSelection.expandFragments(toDeoptimize);
	        }
	        return new Operation(this.rootKind, optimizedSelection, this.variableDefinitions, this.name);
	    }
	    expandAllFragments() {
	        const expandedSelections = this.selectionSet.expandFragments();
	        if (expandedSelections === this.selectionSet) {
	            return this;
	        }
	        return new Operation(this.rootKind, expandedSelections, this.variableDefinitions, this.name);
	    }
	    toString(expandFragments = false, prettyPrint = true) {
	        return this.selectionSet.toOperationString(this.rootKind, this.variableDefinitions, this.name, expandFragments, prettyPrint);
	    }
	}
	operations.Operation = Operation;
	function addDirectiveNodesToElement(directiveNodes, element) {
	    if (!directiveNodes) {
	        return;
	    }
	    const schema = element.schema();
	    for (const node of directiveNodes) {
	        const directiveDef = schema.directive(node.name.value);
	        validate$1(directiveDef, () => `Unknown directive "@${node.name.value}" in selection`);
	        element.applyDirective(directiveDef, (0, values_1.argumentsFromAST)(directiveDef.coordinate, node.arguments, directiveDef));
	    }
	}
	function selectionSetOf(parentType, selection) {
	    const selectionSet = new SelectionSet(parentType);
	    selectionSet.add(selection);
	    return selectionSet;
	}
	operations.selectionSetOf = selectionSetOf;
	class NamedFragmentDefinition extends definitions_1$2.DirectiveTargetElement {
	    constructor(schema, name, typeCondition, selectionSet) {
	        super(schema);
	        this.name = name;
	        this.typeCondition = typeCondition;
	        this.selectionSet = selectionSet;
	    }
	    variables() {
	        return (0, definitions_1$2.mergeVariables)(this.variablesInAppliedDirectives(), this.selectionSet.usedVariables());
	    }
	    collectUsedFragmentNames(collector) {
	        this.selectionSet.collectUsedFragmentNames(collector);
	    }
	    toFragmentDefinitionNode() {
	        return {
	            kind: graphql_1$4.Kind.FRAGMENT_DEFINITION,
	            name: {
	                kind: graphql_1$4.Kind.NAME,
	                value: this.name
	            },
	            typeCondition: {
	                kind: graphql_1$4.Kind.NAMED_TYPE,
	                name: {
	                    kind: graphql_1$4.Kind.NAME,
	                    value: this.typeCondition.name
	                }
	            },
	            selectionSet: this.selectionSet.toSelectionSetNode()
	        };
	    }
	    toString(indent) {
	        return (indent !== null && indent !== void 0 ? indent : '') + `fragment ${this.name} on ${this.typeCondition}${this.appliedDirectivesToString()} ${this.selectionSet.toString(false, true, indent)}`;
	    }
	}
	operations.NamedFragmentDefinition = NamedFragmentDefinition;
	class NamedFragments {
	    constructor() {
	        this.fragments = new utils_1$2.MapWithCachedArrays();
	    }
	    isEmpty() {
	        return this.fragments.size === 0;
	    }
	    variables() {
	        let variables = [];
	        for (const fragment of this.fragments.values()) {
	            variables = (0, definitions_1$2.mergeVariables)(variables, fragment.variables());
	        }
	        return variables;
	    }
	    names() {
	        return this.fragments.keys();
	    }
	    add(fragment) {
	        if (this.fragments.has(fragment.name)) {
	            throw new graphql_1$4.GraphQLError(`Duplicate fragment name '${fragment}'`);
	        }
	        this.fragments.set(fragment.name, fragment);
	    }
	    addIfNotExist(fragment) {
	        if (!this.fragments.has(fragment.name)) {
	            this.fragments.set(fragment.name, fragment);
	        }
	    }
	    onType(type) {
	        return this.fragments.values().filter(f => f.typeCondition.name === type.name);
	    }
	    without(names) {
	        if (!names.some(n => this.fragments.has(n))) {
	            return this;
	        }
	        const newFragments = new NamedFragments();
	        for (const fragment of this.fragments.values()) {
	            if (!names.includes(fragment.name)) {
	                const updatedSelection = fragment.selectionSet.expandFragments(names, false);
	                const newFragment = updatedSelection === fragment.selectionSet
	                    ? fragment
	                    : new NamedFragmentDefinition(fragment.schema(), fragment.name, fragment.typeCondition, updatedSelection);
	                newFragments.add(newFragment);
	            }
	        }
	        return newFragments;
	    }
	    get(name) {
	        return this.fragments.get(name);
	    }
	    definitions() {
	        return this.fragments.values();
	    }
	    validate() {
	        for (const fragment of this.fragments.values()) {
	            fragment.selectionSet.validate();
	        }
	    }
	    toFragmentDefinitionNodes() {
	        return this.definitions().map(f => f.toFragmentDefinitionNode());
	    }
	    toString(indent) {
	        return this.definitions().map(f => f.toString(indent)).join('\n\n');
	    }
	}
	operations.NamedFragments = NamedFragments;
	class SelectionSet {
	    constructor(parentType, fragments) {
	        this.parentType = parentType;
	        this.fragments = fragments;
	        this._selections = new utils_1$2.MultiMap();
	        this._selectionCount = 0;
	        validate$1(!(0, definitions_1$2.isLeafType)(parentType), () => `Cannot have selection on non-leaf type ${parentType}`);
	    }
	    selections(reversedOrder = false) {
	        if (!this._cachedSelections) {
	            const selections = new Array(this._selectionCount);
	            let idx = 0;
	            for (const byResponseName of this._selections.values()) {
	                for (const selection of byResponseName) {
	                    selections[idx++] = selection;
	                }
	            }
	            this._cachedSelections = selections;
	        }
	        (0, utils_1$2.assert)(this._cachedSelections, 'Cache should have been populated');
	        if (reversedOrder) {
	            const reversed = new Array(this._selectionCount);
	            for (let i = 0; i < this._selectionCount; i++) {
	                reversed[i] = this._cachedSelections[this._selectionCount - i - 1];
	            }
	            return reversed;
	        }
	        return this._cachedSelections;
	    }
	    usedVariables() {
	        let variables = [];
	        for (const byResponseName of this._selections.values()) {
	            for (const selection of byResponseName) {
	                variables = (0, definitions_1$2.mergeVariables)(variables, selection.usedVariables());
	            }
	        }
	        if (this.fragments) {
	            variables = (0, definitions_1$2.mergeVariables)(variables, this.fragments.variables());
	        }
	        return variables;
	    }
	    collectUsedFragmentNames(collector) {
	        if (!this.fragments) {
	            return;
	        }
	        for (const byResponseName of this._selections.values()) {
	            for (const selection of byResponseName) {
	                selection.collectUsedFragmentNames(collector);
	            }
	        }
	    }
	    optimize(fragments) {
	        if (!fragments || fragments.isEmpty()) {
	            return this;
	        }
	        if (this.fragments && this.fragments.definitions().some(def => fragments.get(def.name))) {
	            return this;
	        }
	        const optimized = new SelectionSet(this.parentType, fragments);
	        for (const selection of this.selections()) {
	            optimized.add(selection.optimize(fragments));
	        }
	        return optimized;
	    }
	    expandFragments(names, updateSelectionSetFragments = true) {
	        var _a;
	        if (!this.fragments) {
	            return this;
	        }
	        if (names && names.length === 0) {
	            return this;
	        }
	        const newFragments = updateSelectionSetFragments
	            ? (names ? (_a = this.fragments) === null || _a === void 0 ? void 0 : _a.without(names) : undefined)
	            : this.fragments;
	        const withExpanded = new SelectionSet(this.parentType, newFragments);
	        for (const selection of this.selections()) {
	            withExpanded.add(selection.expandFragments(names, updateSelectionSetFragments));
	        }
	        return withExpanded;
	    }
	    mergeIn(selectionSet) {
	        for (const selection of selectionSet.selections()) {
	            this.add(selection);
	        }
	    }
	    addAll(selections) {
	        selections.forEach(s => this.add(s));
	        return this;
	    }
	    add(selection) {
	        const toAdd = selection.updateForAddingTo(this);
	        const key = toAdd.key();
	        const existing = this._selections.get(key);
	        if (existing) {
	            for (const existingSelection of existing) {
	                if (existingSelection.kind === toAdd.kind && haveSameDirectives(existingSelection.element(), toAdd.element())) {
	                    if (toAdd.selectionSet) {
	                        existingSelection.selectionSet.mergeIn(toAdd.selectionSet);
	                    }
	                    return existingSelection;
	                }
	            }
	        }
	        this._selections.add(key, toAdd);
	        ++this._selectionCount;
	        this._cachedSelections = undefined;
	        return selection;
	    }
	    addPath(path) {
	        let previousSelections = this;
	        let currentSelections = this;
	        for (const element of path) {
	            validate$1(currentSelections, () => `Cannot apply selection ${element} to non-selectable parent type "${previousSelections.parentType}"`);
	            const mergedSelection = currentSelections.add(selectionOfElement(element));
	            previousSelections = currentSelections;
	            currentSelections = mergedSelection.selectionSet;
	        }
	    }
	    addSelectionSetNode(node, variableDefinitions, fieldAccessor = (type, name) => type.field(name)) {
	        if (!node) {
	            return;
	        }
	        for (const selectionNode of node.selections) {
	            this.addSelectionNode(selectionNode, variableDefinitions, fieldAccessor);
	        }
	    }
	    addSelectionNode(node, variableDefinitions, fieldAccessor = (type, name) => type.field(name)) {
	        this.add(this.nodeToSelection(node, variableDefinitions, fieldAccessor));
	    }
	    nodeToSelection(node, variableDefinitions, fieldAccessor) {
	        var _a, _b;
	        let selection;
	        switch (node.kind) {
	            case graphql_1$4.Kind.FIELD:
	                const definition = fieldAccessor(this.parentType, node.name.value);
	                validate$1(definition, () => `Cannot query field "${node.name.value}" on type "${this.parentType}".`, this.parentType.sourceAST);
	                const type = (0, definitions_1$2.baseType)(definition.type);
	                selection = new FieldSelection(new Field(definition, (0, values_1.argumentsFromAST)(definition.coordinate, node.arguments, definition), variableDefinitions, (_a = node.alias) === null || _a === void 0 ? void 0 : _a.value), (0, definitions_1$2.isLeafType)(type) ? undefined : new SelectionSet(type, this.fragments));
	                if (node.selectionSet) {
	                    validate$1(selection.selectionSet, () => `Unexpected selection set on leaf field "${selection.element()}"`, selection.element().definition.sourceAST);
	                    selection.selectionSet.addSelectionSetNode(node.selectionSet, variableDefinitions, fieldAccessor);
	                }
	                break;
	            case graphql_1$4.Kind.INLINE_FRAGMENT:
	                const element = new FragmentElement(this.parentType, (_b = node.typeCondition) === null || _b === void 0 ? void 0 : _b.name.value);
	                selection = new InlineFragmentSelection(element, new SelectionSet(element.typeCondition ? element.typeCondition : element.parentType, this.fragments));
	                selection.selectionSet.addSelectionSetNode(node.selectionSet, variableDefinitions, fieldAccessor);
	                break;
	            case graphql_1$4.Kind.FRAGMENT_SPREAD:
	                const fragmentName = node.name.value;
	                validate$1(this.fragments, () => `Cannot find fragment name "${fragmentName}" (no fragments were provided)`);
	                selection = new FragmentSpreadSelection(this.parentType, this.fragments, fragmentName);
	                break;
	        }
	        addDirectiveNodesToElement(node.directives, selection.element());
	        return selection;
	    }
	    equals(that) {
	        if (this === that) {
	            return true;
	        }
	        if (this._selections.size !== that._selections.size) {
	            return false;
	        }
	        for (const [key, thisSelections] of this._selections) {
	            const thatSelections = that._selections.get(key);
	            if (!thatSelections
	                || thisSelections.length !== thatSelections.length
	                || !thisSelections.every(thisSelection => thatSelections.some(thatSelection => thisSelection.equals(thatSelection)))) {
	                return false;
	            }
	        }
	        return true;
	    }
	    contains(that) {
	        if (this._selections.size < that._selections.size) {
	            return false;
	        }
	        for (const [key, thatSelections] of that._selections) {
	            const thisSelections = this._selections.get(key);
	            if (!thisSelections
	                || (thisSelections.length < thatSelections.length
	                    || !thatSelections.every(thatSelection => thisSelections.some(thisSelection => thisSelection.contains(thatSelection))))) {
	                return false;
	            }
	        }
	        return true;
	    }
	    validate() {
	        validate$1(!this.isEmpty(), () => `Invalid empty selection set`);
	        for (const selection of this.selections()) {
	            selection.validate();
	            const selectionFragments = selection.namedFragments();
	            (0, utils_1$2.assert)(!selectionFragments || selectionFragments === this.fragments, () => `Selection fragments (${selectionFragments}) for ${selection} does not match selection set one (${this.fragments})`);
	        }
	    }
	    isEmpty() {
	        return this._selections.size === 0;
	    }
	    toSelectionSetNode() {
	        if (this.isEmpty()) {
	            return {
	                kind: graphql_1$4.Kind.SELECTION_SET,
	                selections: [{
	                        kind: graphql_1$4.Kind.FIELD,
	                        name: {
	                            kind: graphql_1$4.Kind.NAME,
	                            value: '...',
	                        },
	                    }]
	            };
	        }
	        return {
	            kind: graphql_1$4.Kind.SELECTION_SET,
	            selections: Array.from(this.selectionsInPrintOrder(), s => s.toSelectionNode())
	        };
	    }
	    selectionsInPrintOrder() {
	        const typenameSelection = this._selections.get(definitions_1$2.typenameFieldName);
	        if (typenameSelection) {
	            return typenameSelection.concat(this.selections().filter(s => s.kind != 'FieldSelection' || s.field.name !== definitions_1$2.typenameFieldName));
	        }
	        else {
	            return this.selections();
	        }
	    }
	    toOperationPaths() {
	        return this.toOperationPathsInternal([]);
	    }
	    toOperationPathsInternal(parentPaths) {
	        return this.selections().flatMap((selection) => {
	            const updatedPaths = parentPaths.map(path => path.concat(selection.element()));
	            return selection.selectionSet
	                ? selection.selectionSet.toOperationPathsInternal(updatedPaths)
	                : updatedPaths;
	        });
	    }
	    clone() {
	        const cloned = new SelectionSet(this.parentType);
	        for (const selection of this.selections()) {
	            cloned.add(selection.clone());
	        }
	        return cloned;
	    }
	    toOperationString(rootKind, variableDefinitions, operationName, expandFragments = false, prettyPrint = true) {
	        const indent = prettyPrint ? '' : undefined;
	        const fragmentsDefinitions = !expandFragments && this.fragments && !this.fragments.isEmpty()
	            ? this.fragments.toString(indent) + "\n\n"
	            : "";
	        if (rootKind == "query" && !operationName && variableDefinitions.isEmpty()) {
	            return fragmentsDefinitions + this.toString(expandFragments, true, indent);
	        }
	        const nameAndVariables = operationName
	            ? " " + (operationName + (variableDefinitions.isEmpty() ? "" : variableDefinitions.toString()))
	            : (variableDefinitions.isEmpty() ? "" : " " + variableDefinitions.toString());
	        return fragmentsDefinitions + rootKind + nameAndVariables + " " + this.toString(expandFragments, true, indent);
	    }
	    toString(expandFragments = true, includeExternalBrackets = true, indent) {
	        if (indent === undefined) {
	            const selectionsToString = this.selections().map(s => s.toString(expandFragments)).join(' ');
	            return includeExternalBrackets ? '{ ' + selectionsToString + ' }' : selectionsToString;
	        }
	        else {
	            const selectionIndent = includeExternalBrackets ? indent + "  " : indent;
	            const selectionsToString = this.selections().map(s => s.toString(expandFragments, selectionIndent)).join('\n');
	            return includeExternalBrackets
	                ? '{\n' + selectionsToString + '\n' + indent + '}'
	                : selectionsToString;
	        }
	    }
	}
	operations.SelectionSet = SelectionSet;
	function selectionSetOfElement(element, subSelection) {
	    const selectionSet = new SelectionSet(element.parentType);
	    selectionSet.add(selectionOfElement(element, subSelection));
	    return selectionSet;
	}
	operations.selectionSetOfElement = selectionSetOfElement;
	function selectionOfElement(element, subSelection) {
	    return element.kind === 'Field' ? new FieldSelection(element, subSelection) : new InlineFragmentSelection(element, subSelection);
	}
	operations.selectionOfElement = selectionOfElement;
	function selectionSetOfPath(path, onPathEnd) {
	    validate$1(path.length > 0, () => `Cannot create a selection set from an empty path`);
	    const last = selectionSetOfElement(path[path.length - 1]);
	    let current = last;
	    for (let i = path.length - 2; i >= 0; i--) {
	        current = selectionSetOfElement(path[i], current);
	    }
	    if (onPathEnd) {
	        onPathEnd(last.selections()[0].selectionSet);
	    }
	    return current;
	}
	operations.selectionSetOfPath = selectionSetOfPath;
	class FieldSelection {
	    constructor(field, initialSelectionSet) {
	        this.field = field;
	        this.kind = 'FieldSelection';
	        const type = (0, definitions_1$2.baseType)(field.definition.type);
	        this.selectionSet = (0, definitions_1$2.isLeafType)(type) ? undefined : (initialSelectionSet ? initialSelectionSet : new SelectionSet(type));
	    }
	    key() {
	        return this.element().responseName();
	    }
	    element() {
	        return this.field;
	    }
	    usedVariables() {
	        var _a, _b;
	        return (0, definitions_1$2.mergeVariables)(this.element().variables(), (_b = (_a = this.selectionSet) === null || _a === void 0 ? void 0 : _a.usedVariables()) !== null && _b !== void 0 ? _b : []);
	    }
	    collectUsedFragmentNames(collector) {
	        if (this.selectionSet) {
	            this.selectionSet.collectUsedFragmentNames(collector);
	        }
	    }
	    optimize(fragments) {
	        const optimizedSelection = this.selectionSet ? this.selectionSet.optimize(fragments) : undefined;
	        return this.selectionSet === optimizedSelection
	            ? this
	            : new FieldSelection(this.field, optimizedSelection);
	    }
	    expandFragments(names, updateSelectionSetFragments = true) {
	        const expandedSelection = this.selectionSet ? this.selectionSet.expandFragments(names, updateSelectionSetFragments) : undefined;
	        return this.selectionSet === expandedSelection
	            ? this
	            : new FieldSelection(this.field, expandedSelection);
	    }
	    fieldArgumentsToAST() {
	        const entries = Object.entries(this.field.args);
	        if (entries.length === 0) {
	            return undefined;
	        }
	        return entries.map(([n, v]) => {
	            return {
	                kind: graphql_1$4.Kind.ARGUMENT,
	                name: { kind: graphql_1$4.Kind.NAME, value: n },
	                value: (0, values_1.valueToAST)(v, this.field.definition.argument(n).type),
	            };
	        });
	    }
	    validate() {
	        var _a;
	        validate$1(!(this.selectionSet && this.selectionSet.isEmpty()), () => `Invalid empty selection set for field "${this.field.definition.coordinate}" of non-leaf type ${this.field.definition.type}`, this.field.definition.sourceAST);
	        (_a = this.selectionSet) === null || _a === void 0 ? void 0 : _a.validate();
	    }
	    updateForAddingTo(selectionSet) {
	        const updatedField = this.field.updateForAddingTo(selectionSet);
	        return this.field === updatedField ? this : new FieldSelection(updatedField, this.selectionSet);
	    }
	    toSelectionNode() {
	        var _a;
	        const alias = this.field.alias ? { kind: graphql_1$4.Kind.NAME, value: this.field.alias, } : undefined;
	        return {
	            kind: graphql_1$4.Kind.FIELD,
	            name: {
	                kind: graphql_1$4.Kind.NAME,
	                value: this.field.name,
	            },
	            alias,
	            arguments: this.fieldArgumentsToAST(),
	            directives: this.element().appliedDirectivesToDirectiveNodes(),
	            selectionSet: (_a = this.selectionSet) === null || _a === void 0 ? void 0 : _a.toSelectionSetNode()
	        };
	    }
	    equals(that) {
	        if (this === that) {
	            return true;
	        }
	        if (!(that instanceof FieldSelection) || !this.field.equals(that.field)) {
	            return false;
	        }
	        if (!this.selectionSet) {
	            return !that.selectionSet;
	        }
	        return !!that.selectionSet && this.selectionSet.equals(that.selectionSet);
	    }
	    contains(that) {
	        if (!(that instanceof FieldSelection) || !this.field.equals(that.field)) {
	            return false;
	        }
	        if (!that.selectionSet) {
	            return true;
	        }
	        return !!this.selectionSet && this.selectionSet.contains(that.selectionSet);
	    }
	    namedFragments() {
	        var _a;
	        return (_a = this.selectionSet) === null || _a === void 0 ? void 0 : _a.fragments;
	    }
	    clone() {
	        if (!this.selectionSet) {
	            return this;
	        }
	        return new FieldSelection(this.field, this.selectionSet.clone());
	    }
	    toString(expandFragments = true, indent) {
	        return (indent !== null && indent !== void 0 ? indent : '') + this.field + (this.selectionSet ? ' ' + this.selectionSet.toString(expandFragments, true, indent) : '');
	    }
	}
	operations.FieldSelection = FieldSelection;
	class FragmentSelection {
	    constructor() {
	        this.kind = 'FragmentSelection';
	    }
	    usedVariables() {
	        return (0, definitions_1$2.mergeVariables)(this.element().variables(), this.selectionSet.usedVariables());
	    }
	    updateForAddingTo(selectionSet) {
	        const updatedFragment = this.element().updateForAddingTo(selectionSet);
	        return this.element() === updatedFragment ? this : new InlineFragmentSelection(updatedFragment, this.selectionSet);
	    }
	    equals(that) {
	        if (this === that) {
	            return true;
	        }
	        return (that instanceof FragmentSelection)
	            && this.element().equals(that.element())
	            && this.selectionSet.equals(that.selectionSet);
	    }
	    contains(that) {
	        return (that instanceof FragmentSelection)
	            && this.element().equals(that.element())
	            && this.selectionSet.contains(that.selectionSet);
	    }
	    clone() {
	        return new InlineFragmentSelection(this.element(), this.selectionSet.clone());
	    }
	}
	operations.FragmentSelection = FragmentSelection;
	class InlineFragmentSelection extends FragmentSelection {
	    constructor(fragmentElement, initialSelectionSet) {
	        super();
	        this.fragmentElement = fragmentElement;
	        this._selectionSet = initialSelectionSet
	            ? initialSelectionSet
	            : new SelectionSet(fragmentElement.typeCondition ? fragmentElement.typeCondition : fragmentElement.parentType);
	    }
	    key() {
	        var _a, _b;
	        return (_b = (_a = this.element().typeCondition) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : '';
	    }
	    validate() {
	        validate$1(!this.selectionSet.isEmpty(), () => `Invalid empty selection set for fragment "${this.element()}"`);
	        this.selectionSet.validate();
	    }
	    get selectionSet() {
	        return this._selectionSet;
	    }
	    namedFragments() {
	        return this.selectionSet.fragments;
	    }
	    element() {
	        return this.fragmentElement;
	    }
	    toSelectionNode() {
	        const typeCondition = this.element().typeCondition;
	        return {
	            kind: graphql_1$4.Kind.INLINE_FRAGMENT,
	            typeCondition: typeCondition
	                ? {
	                    kind: graphql_1$4.Kind.NAMED_TYPE,
	                    name: {
	                        kind: graphql_1$4.Kind.NAME,
	                        value: typeCondition.name,
	                    },
	                }
	                : undefined,
	            directives: this.element().appliedDirectivesToDirectiveNodes(),
	            selectionSet: this.selectionSet.toSelectionSetNode()
	        };
	    }
	    optimize(fragments) {
	        const optimizedSelection = this.selectionSet.optimize(fragments);
	        const typeCondition = this.element().typeCondition;
	        if (typeCondition) {
	            for (const candidate of fragments.onType(typeCondition)) {
	                if (candidate.selectionSet.equals(optimizedSelection)) {
	                    fragments.addIfNotExist(candidate);
	                    return new FragmentSpreadSelection(this.element().parentType, fragments, candidate.name);
	                }
	            }
	        }
	        return this.selectionSet === optimizedSelection
	            ? this
	            : new InlineFragmentSelection(this.fragmentElement, optimizedSelection);
	    }
	    expandFragments(names, updateSelectionSetFragments = true) {
	        const expandedSelection = this.selectionSet.expandFragments(names, updateSelectionSetFragments);
	        return this.selectionSet === expandedSelection
	            ? this
	            : new InlineFragmentSelection(this.element(), expandedSelection);
	    }
	    collectUsedFragmentNames(collector) {
	        this.selectionSet.collectUsedFragmentNames(collector);
	    }
	    toString(expandFragments = true, indent) {
	        return (indent !== null && indent !== void 0 ? indent : '') + this.fragmentElement + ' ' + this.selectionSet.toString(expandFragments, true, indent);
	    }
	}
	class FragmentSpreadSelection extends FragmentSelection {
	    constructor(sourceType, fragments, fragmentName) {
	        super();
	        this.fragments = fragments;
	        const fragmentDefinition = fragments.get(fragmentName);
	        validate$1(fragmentDefinition, () => `Unknown fragment "...${fragmentName}"`);
	        this.namedFragment = fragmentDefinition;
	        this._element = new FragmentElement(sourceType, fragmentDefinition.typeCondition);
	        for (const directive of fragmentDefinition.appliedDirectives) {
	            this._element.applyDirective(directive.definition, directive.arguments());
	        }
	    }
	    key() {
	        return '...' + this.namedFragment.name;
	    }
	    element() {
	        return this._element;
	    }
	    namedFragments() {
	        return this.fragments;
	    }
	    get selectionSet() {
	        return this.namedFragment.selectionSet;
	    }
	    validate() {
	    }
	    toSelectionNode() {
	        const spreadDirectives = this.spreadDirectives();
	        const directiveNodes = spreadDirectives.length === 0
	            ? undefined
	            : spreadDirectives.map(directive => {
	                return {
	                    kind: graphql_1$4.Kind.DIRECTIVE,
	                    name: {
	                        kind: graphql_1$4.Kind.NAME,
	                        value: directive.name,
	                    },
	                    arguments: directive.argumentsToAST()
	                };
	            });
	        return {
	            kind: graphql_1$4.Kind.FRAGMENT_SPREAD,
	            name: { kind: graphql_1$4.Kind.NAME, value: this.namedFragment.name },
	            directives: directiveNodes,
	        };
	    }
	    optimize(_) {
	        return this;
	    }
	    expandFragments(names, updateSelectionSetFragments = true) {
	        if (names && !names.includes(this.namedFragment.name)) {
	            return this;
	        }
	        return new InlineFragmentSelection(this._element, this.selectionSet.expandFragments(names, updateSelectionSetFragments));
	    }
	    collectUsedFragmentNames(collector) {
	        this.selectionSet.collectUsedFragmentNames(collector);
	        const usageCount = collector.get(this.namedFragment.name);
	        collector.set(this.namedFragment.name, usageCount === undefined ? 1 : usageCount + 1);
	    }
	    spreadDirectives() {
	        return this._element.appliedDirectives.slice(this.namedFragment.appliedDirectives.length);
	    }
	    toString(expandFragments = true, indent) {
	        if (expandFragments) {
	            return (indent !== null && indent !== void 0 ? indent : '') + this._element + ' ' + this.selectionSet.toString(true, true, indent);
	        }
	        else {
	            const directives = this.spreadDirectives();
	            const directiveString = directives.length == 0 ? '' : ' ' + directives.join(' ');
	            return (indent !== null && indent !== void 0 ? indent : '') + '...' + this.namedFragment.name + directiveString;
	        }
	    }
	}
	function operationFromDocument(schema, document, operationName) {
	    let operation;
	    const fragments = new NamedFragments();
	    document.definitions.forEach(definition => {
	        switch (definition.kind) {
	            case graphql_1$4.Kind.OPERATION_DEFINITION:
	                validate$1(!operation || operationName, () => 'Must provide operation name if query contains multiple operations.');
	                if (!operationName || (definition.name && definition.name.value === operationName)) {
	                    operation = definition;
	                }
	                break;
	            case graphql_1$4.Kind.FRAGMENT_DEFINITION:
	                const name = definition.name.value;
	                const typeName = definition.typeCondition.name.value;
	                const typeCondition = schema.type(typeName);
	                if (!typeCondition) {
	                    throw new graphql_1$4.GraphQLError(`Unknown type "${typeName}" for fragment "${name}"`, definition);
	                }
	                if (!(0, definitions_1$2.isCompositeType)(typeCondition)) {
	                    throw new graphql_1$4.GraphQLError(`Invalid fragment "${name}" on non-composite type "${typeName}"`, definition);
	                }
	                const fragment = new NamedFragmentDefinition(schema, name, typeCondition, new SelectionSet(typeCondition, fragments));
	                addDirectiveNodesToElement(definition.directives, fragment);
	                fragments.add(fragment);
	                break;
	        }
	    });
	    validate$1(operation, () => operationName ? `Unknown operation named "${operationName}"` : 'No operation found in provided document.');
	    const variableDefinitions = operation.variableDefinitions
	        ? (0, definitions_1$2.variableDefinitionsFromAST)(schema, operation.variableDefinitions)
	        : new definitions_1$2.VariableDefinitions();
	    document.definitions.forEach(definition => {
	        switch (definition.kind) {
	            case graphql_1$4.Kind.FRAGMENT_DEFINITION:
	                const fragment = fragments.get(definition.name.value);
	                fragment.selectionSet.addSelectionSetNode(definition.selectionSet, variableDefinitions);
	                break;
	        }
	    });
	    fragments.validate();
	    return operationFromAST(schema, operation, fragments);
	}
	operations.operationFromDocument = operationFromDocument;
	function operationFromAST(schema, operation, fragments) {
	    var _a;
	    const rootType = schema.schemaDefinition.root(operation.operation);
	    validate$1(rootType, () => `The schema has no "${operation.operation}" root type defined`);
	    const variableDefinitions = operation.variableDefinitions ? (0, definitions_1$2.variableDefinitionsFromAST)(schema, operation.variableDefinitions) : new definitions_1$2.VariableDefinitions();
	    return new Operation(operation.operation, parseSelectionSet(rootType.type, operation.selectionSet, variableDefinitions, fragments), variableDefinitions, (_a = operation.name) === null || _a === void 0 ? void 0 : _a.value);
	}
	function parseOperation(schema, operation, operationName) {
	    return operationFromDocument(schema, (0, graphql_1$4.parse)(operation), operationName);
	}
	operations.parseOperation = parseOperation;
	function parseSelectionSet(parentType, source, variableDefinitions = new definitions_1$2.VariableDefinitions(), fragments, fieldAccessor = (type, name) => type.field(name)) {
	    const node = typeof source === 'string'
	        ? parseOperationAST(source.trim().startsWith('{') ? source : `{${source}}`).selectionSet
	        : source;
	    const selectionSet = new SelectionSet(parentType, fragments);
	    selectionSet.addSelectionSetNode(node, variableDefinitions, fieldAccessor);
	    selectionSet.validate();
	    return selectionSet;
	}
	operations.parseSelectionSet = parseSelectionSet;
	function parseOperationAST(source) {
	    const parsed = (0, graphql_1$4.parse)(source);
	    validate$1(parsed.definitions.length === 1, () => 'Selections should contain a single definitions, found ' + parsed.definitions.length);
	    const def = parsed.definitions[0];
	    validate$1(def.kind === graphql_1$4.Kind.OPERATION_DEFINITION, () => 'Expected an operation definition but got a ' + def.kind);
	    return def;
	}
	function operationToDocument(operation) {
	    var _a;
	    const operationAST = {
	        kind: graphql_1$4.Kind.OPERATION_DEFINITION,
	        operation: operation.rootKind,
	        selectionSet: operation.selectionSet.toSelectionSetNode(),
	        variableDefinitions: operation.variableDefinitions.toVariableDefinitionNodes(),
	    };
	    const fragmentASTs = operation.selectionSet.fragments
	        ? (_a = operation.selectionSet.fragments) === null || _a === void 0 ? void 0 : _a.toFragmentDefinitionNodes()
	        : [];
	    return {
	        kind: graphql_1$4.Kind.DOCUMENT,
	        definitions: [operationAST].concat(fragmentASTs),
	    };
	}
	operations.operationToDocument = operationToDocument;

	var tagSpec$1 = {};

	var error = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.REMOVED_ERRORS = exports.ERRORS = exports.ERROR_CATEGORIES = exports.errorCodeDef = exports.errorCode = void 0;
	const graphql_1 = require$$2$2;
	const utils_1 = utils;
	const FED1_CODE = '0.x';
	const makeCodeDefinition = (code, description, metadata = DEFAULT_METADATA) => ({
	    code,
	    description,
	    metadata,
	    err: ({ message, nodes, source, positions, path, originalError, extensions, }) => new graphql_1.GraphQLError(message, nodes, source, positions, path, originalError, {
	        ...extensions,
	        code,
	    }),
	});
	const DEFAULT_METADATA = { addedIn: '2.0.0' };
	const makeErrorCodeCategory = (extractCode, makeDescription, metadata = DEFAULT_METADATA) => ({
	    createCode: (element) => {
	        return makeCodeDefinition(extractCode(element), makeDescription(element), metadata);
	    },
	    get: (element) => {
	        const def = codeDefByCode[extractCode(element)];
	        (0, utils_1.assert)(def, `Unexpected element: ${element}`);
	        return def;
	    }
	});
	const makeFederationDirectiveErrorCodeCategory = (codeSuffix, makeDescription, metadata = DEFAULT_METADATA) => makeErrorCodeCategory((directive) => `${directive.toLocaleUpperCase()}_${codeSuffix}`, makeDescription, metadata);
	function errorCode(e) {
	    if (!('code' in e.extensions)) {
	        return undefined;
	    }
	    return e.extensions.code;
	}
	exports.errorCode = errorCode;
	function errorCodeDef(e) {
	    const code = typeof e === 'string' ? e : errorCode(e);
	    return code ? codeDefByCode[code] : undefined;
	}
	exports.errorCodeDef = errorCodeDef;
	const INVALID_GRAPHQL = makeCodeDefinition('INVALID_GRAPHQL', 'A schema is invalid GraphQL: it violates one of the rule of the specification.');
	const TAG_DEFINITION_INVALID = makeCodeDefinition('TAG_DIRECTIVE_DEFINITION_INVALID', 'The @tag directive has an invalid defintion in the schema.', { addedIn: FED1_CODE });
	const FIELDS_HAS_ARGS = makeFederationDirectiveErrorCodeCategory('FIELDS_HAS_ARGS', (directive) => `The \`fields\` argument of a \`@${directive}\` directive includes a field defined with arguments (which is not currently supported).`);
	const KEY_FIELDS_HAS_ARGS = FIELDS_HAS_ARGS.createCode('key');
	const PROVIDES_FIELDS_HAS_ARGS = FIELDS_HAS_ARGS.createCode('provides');
	const REQUIRES_FIELDS_HAS_ARGS = FIELDS_HAS_ARGS.createCode('requires');
	const DIRECTIVE_FIELDS_MISSING_EXTERNAL = makeFederationDirectiveErrorCodeCategory('FIELDS_MISSING_EXTERNAL', (directive) => `The \`fields\` argument of a \`@${directive}\` directive includes a field that is not marked as \`@external\`.`, { addedIn: FED1_CODE });
	const PROVIDES_MISSING_EXTERNAL = DIRECTIVE_FIELDS_MISSING_EXTERNAL.createCode('provides');
	const REQUIRES_MISSING_EXTERNAL = DIRECTIVE_FIELDS_MISSING_EXTERNAL.createCode('requires');
	const DIRECTIVE_UNSUPPORTED_ON_INTERFACE = makeFederationDirectiveErrorCodeCategory('UNSUPPORTED_ON_INTERFACE', (directive) => `A \`@${directive}\` directive is used on an interface, which is not (yet) supported.`);
	const KEY_UNSUPPORTED_ON_INTERFACE = DIRECTIVE_UNSUPPORTED_ON_INTERFACE.createCode('key');
	const PROVIDES_UNSUPPORTED_ON_INTERFACE = DIRECTIVE_UNSUPPORTED_ON_INTERFACE.createCode('provides');
	const REQUIRES_UNSUPPORTED_ON_INTERFACE = DIRECTIVE_UNSUPPORTED_ON_INTERFACE.createCode('requires');
	const EXTERNAL_UNUSED = makeCodeDefinition('EXTERNAL_UNUSED', 'An `@external` field is not being used by any instance of `@key`, `@requires`, `@provides` or to satisfy an interface implememtation.', { addedIn: FED1_CODE });
	const PROVIDES_ON_NON_OBJECT_FIELD = makeCodeDefinition('PROVIDES_ON_NON_OBJECT_FIELD', 'A `@provides` directive is used to mark a field whose base type is not an object type.');
	const DIRECTIVE_INVALID_FIELDS_TYPE = makeFederationDirectiveErrorCodeCategory('INVALID_FIELDS_TYPE', (directive) => `The value passed to the \`fields\` argument of a \`@${directive}\` directive is not a string.`);
	const KEY_INVALID_FIELDS_TYPE = DIRECTIVE_INVALID_FIELDS_TYPE.createCode('key');
	const PROVIDES_INVALID_FIELDS_TYPE = DIRECTIVE_INVALID_FIELDS_TYPE.createCode('provides');
	const REQUIRES_INVALID_FIELDS_TYPE = DIRECTIVE_INVALID_FIELDS_TYPE.createCode('requires');
	const DIRECTIVE_INVALID_FIELDS = makeFederationDirectiveErrorCodeCategory('INVALID_FIELDS', (directive) => `The \`fields\` argument of a \`@${directive}\` directive is invalid (it has invalid syntax, includes unknown fields, ...).`);
	const KEY_INVALID_FIELDS = DIRECTIVE_INVALID_FIELDS.createCode('key');
	const PROVIDES_INVALID_FIELDS = DIRECTIVE_INVALID_FIELDS.createCode('provides');
	const REQUIRES_INVALID_FIELDS = DIRECTIVE_INVALID_FIELDS.createCode('requires');
	const KEY_FIELDS_SELECT_INVALID_TYPE = makeCodeDefinition('KEY_FIELDS_SELECT_INVALID_TYPE', 'The `fields` argument of `@key` directive includes a field whose type is a list, interface, or union type. Fields of these types cannot be part of a `@key`', { addedIn: FED1_CODE });
	const ROOT_TYPE_USED = makeErrorCodeCategory((kind) => `ROOT_${kind.toLocaleUpperCase()}_USED`, (kind) => `A subgraph's schema defines a type with the name \`${kind}\`, while also specifying a _different_ type name as the root query object. This is not allowed.`, { addedIn: FED1_CODE });
	const ROOT_QUERY_USED = ROOT_TYPE_USED.createCode('query');
	const ROOT_MUTATION_USED = ROOT_TYPE_USED.createCode('mutation');
	const ROOT_SUBSCRIPTION_USED = ROOT_TYPE_USED.createCode('subscription');
	const INVALID_SUBGRAPH_NAME = makeCodeDefinition('INVALID_SUBGRAPH_NAME', 'A subgraph name is invalid (subgraph names cannot be a single underscore ("_")).');
	const NO_QUERIES = makeCodeDefinition('NO_QUERIES', 'None of the composed subgraphs expose any query.');
	const INTERFACE_FIELD_NO_IMPLEM = makeCodeDefinition('INTERFACE_FIELD_NO_IMPLEM', 'After subgraph merging, an implemenation is missing a field of one of the interface it implements (which can happen for valid subgraphs).');
	const TYPE_KIND_MISMATCH = makeCodeDefinition('TYPE_KIND_MISMATCH', 'A type has the same name in different subgraphs, but a different kind. For instance, one definition is an object type but another is an interface.', { ...DEFAULT_METADATA, replaces: ['VALUE_TYPE_KIND_MISMATCH', 'EXTENSION_OF_WRONG_KIND', 'ENUM_MISMATCH_TYPE'] });
	const EXTERNAL_TYPE_MISMATCH = makeCodeDefinition('EXTERNAL_TYPE_MISMATCH', 'An `@external` field has a type that is incompatible with the declaration(s) of that field in other subgraphs.', { addedIn: FED1_CODE });
	const EXTERNAL_ARGUMENT_MISSING = makeCodeDefinition('EXTERNAL_ARGUMENT_MISSING', 'An `@external` field is missing some arguments present in the declaration(s) of that field in other subgraphs.');
	const EXTERNAL_ARGUMENT_TYPE_MISMATCH = makeCodeDefinition('EXTERNAL_ARGUMENT_TYPE_MISMATCH', 'An `@external` field declares an argument with a type that is incompatible with the corresponding argument in the declaration(s) of that field in other subgtaphs.');
	const EXTERNAL_ARGUMENT_DEFAULT_MISMATCH = makeCodeDefinition('EXTERNAL_ARGUMENT_DEFAULT_MISMATCH', 'An `@external` field declares an argument with a default that is incompatible with the corresponding argument in the declaration(s) of that field in other subgtaphs.');
	const FIELD_TYPE_MISMATCH = makeCodeDefinition('FIELD_TYPE_MISMATCH', 'A field has a type that is incompatible with other declarations of that field in other subgraphs.', { ...DEFAULT_METADATA, replaces: ['VALUE_TYPE_FIELD_TYPE_MISMATCH'] });
	const ARGUMENT_TYPE_MISMATCH = makeCodeDefinition('FIELD_ARGUMENT_TYPE_MISMATCH', 'An argument (of a field/directive) has a type that is incompatible with that of other declarations of that same argument in other subgraphs.', { ...DEFAULT_METADATA, replaces: ['VALUE_TYPE_INPUT_VALUE_MISMATCH'] });
	const INPUT_FIELD_DEFAULT_MISMATCH = makeCodeDefinition('INPUT_FIELD_DEFAULT_MISMATCH', 'An input field has a default value that is incompatible with other declarations of that field in other subgraphs.');
	const ARGUMENT_DEFAULT_MISMATCH = makeCodeDefinition('FIELD_ARGUMENT_DEFAULT_MISMATCH', 'An argument (of a field/directive) has a default value that is incompatible with that of other declarations of that same argument in other subgraphs.');
	const EXTENSION_WITH_NO_BASE = makeCodeDefinition('EXTENSION_WITH_NO_BASE', 'A subgraph is attempting to `extend` a type that is not originally defined in any known subgraph.', { addedIn: FED1_CODE });
	const EXTERNAL_MISSING_ON_BASE = makeCodeDefinition('EXTERNAL_MISSING_ON_BASE', 'A field is marked as `@external` in a subgraph but with no non-external declaration in any other subgraph.', { addedIn: FED1_CODE });
	const INTERFACE_FIELD_IMPLEM_TYPE_MISMATCH = makeCodeDefinition('INTERFACE_FIELD_IMPLEM_TYPE_MISMATCH', 'For an interface field, some of its concrete implementations have @external or @requires and there is difference in those implementations return type (which is currently not supported; see https://github.com/apollographql/federation/issues/1257)');
	const SATISFIABILITY_ERROR = makeCodeDefinition('SATISFIABILITY_ERROR', 'Subgraphs can be merged, but the resulting supergraph API would have queries that cannot be satisfied by those subgraphs.');
	exports.ERROR_CATEGORIES = {
	    DIRECTIVE_FIELDS_MISSING_EXTERNAL,
	    DIRECTIVE_UNSUPPORTED_ON_INTERFACE,
	    DIRECTIVE_INVALID_FIELDS_TYPE,
	    DIRECTIVE_INVALID_FIELDS,
	    FIELDS_HAS_ARGS,
	    ROOT_TYPE_USED,
	};
	exports.ERRORS = {
	    INVALID_GRAPHQL,
	    TAG_DEFINITION_INVALID,
	    KEY_FIELDS_HAS_ARGS,
	    PROVIDES_FIELDS_HAS_ARGS,
	    REQUIRES_FIELDS_HAS_ARGS,
	    PROVIDES_MISSING_EXTERNAL,
	    REQUIRES_MISSING_EXTERNAL,
	    KEY_UNSUPPORTED_ON_INTERFACE,
	    PROVIDES_UNSUPPORTED_ON_INTERFACE,
	    REQUIRES_UNSUPPORTED_ON_INTERFACE,
	    EXTERNAL_UNUSED,
	    PROVIDES_ON_NON_OBJECT_FIELD,
	    KEY_INVALID_FIELDS_TYPE,
	    PROVIDES_INVALID_FIELDS_TYPE,
	    REQUIRES_INVALID_FIELDS_TYPE,
	    KEY_INVALID_FIELDS,
	    PROVIDES_INVALID_FIELDS,
	    REQUIRES_INVALID_FIELDS,
	    KEY_FIELDS_SELECT_INVALID_TYPE,
	    ROOT_QUERY_USED,
	    ROOT_MUTATION_USED,
	    ROOT_SUBSCRIPTION_USED,
	    INVALID_SUBGRAPH_NAME,
	    NO_QUERIES,
	    INTERFACE_FIELD_NO_IMPLEM,
	    TYPE_KIND_MISMATCH,
	    EXTERNAL_TYPE_MISMATCH,
	    EXTERNAL_ARGUMENT_MISSING,
	    EXTERNAL_ARGUMENT_TYPE_MISMATCH,
	    EXTERNAL_ARGUMENT_DEFAULT_MISMATCH,
	    FIELD_TYPE_MISMATCH,
	    ARGUMENT_TYPE_MISMATCH,
	    INPUT_FIELD_DEFAULT_MISMATCH,
	    ARGUMENT_DEFAULT_MISMATCH,
	    EXTENSION_WITH_NO_BASE,
	    EXTERNAL_MISSING_ON_BASE,
	    INTERFACE_FIELD_IMPLEM_TYPE_MISMATCH,
	    SATISFIABILITY_ERROR,
	};
	const codeDefByCode = Object.values(exports.ERRORS).reduce((obj, codeDef) => { obj[codeDef.code] = codeDef; return obj; }, {});
	exports.REMOVED_ERRORS = [
	    ['KEY_FIELDS_MISSING_ON_BASE', 'Keys can now use any field from any other subgraph.'],
	    ['KEY_FIELDS_MISSING_EXTERNAL', 'Using `@external` for key fields is now decouraged, unless the field is truly meant to be external.'],
	    ['KEY_MISSING_ON_BASE', 'Each subgraph is now free to declare a key only if it needs it.'],
	    ['MULTIPLE_KEYS_ON_EXTENSION', 'Every subgraph can have multiple keys, as necessary.'],
	    ['KEY_NOT_SPECIFIED', 'Each subgraph can declare key independently of any other subgraph.'],
	    ['EXTERNAL_USED_ON_BASE', 'As there is not type ownership anymore, there is also no particular limitation as to where a field can be external.'],
	    ['PROVIDES_NOT_ON_ENTITY', '@provides can now be used on any type.'],
	    ['REQUIRES_FIELDS_MISSING_ON_BASE', 'Fields in @requires can now be from any subgraph.'],
	    ['REQUIRES_USED_ON_BASE', 'As there is not type ownership anymore, there is also no particular limitation as to which subgraph can use a @requires.'],
	    ['DUPLICATE_SCALAR_DEFINITION', 'As duplicate scalar definitions is invalid GraphQL, this will now be an error with code `INVALID_GRAPHQL`'],
	    ['DUPLICATE_ENUM_DEFINITION', 'As duplicate enum definitions is invalid GraphQL, this will now be an error with code `INVALID_GRAPHQL`'],
	    ['DUPLICATE_ENUM_VALUE', 'As duplicate enum values is invalid GraphQL, this will now be an error with code `INVALID_GRAPHQL`'],
	    ['ENUM_MISMATCH', 'Subgraph definitions for an enum are now merged by composition'],
	    ['VALUE_TYPE_NO_ENTITY', 'There is no strong different between entity and value types in the model (they are just usage pattern) and a type can have keys in one subgraph but not another.'],
	    ['VALUE_TYPE_UNION_TYPES_MISMATCH', 'Subgraph definitions for an union are now merged by composition'],
	    ['PROVIDES_FIELDS_SELECT_INVALID_TYPE', '@provides can now be used on field of interface, union and list types'],
	    ['RESERVED_FIELD_USED', 'This error was previously not correctly enforced: the _service and _entities, if present, were overriden; this is still the case'],
	];

	}(error));

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TAG_VERSIONS = exports.TagSpecDefinition = exports.tagLocations = exports.tagIdentity = void 0;
	const graphql_1 = require$$2$2;
	const coreSpec_1 = coreSpec$1;
	const definitions_1 = definitions;
	const error_1 = error;
	const types_1 = types;
	const utils_1 = utils;
	exports.tagIdentity = 'https://specs.apollo.dev/tag';
	exports.tagLocations = [
	    graphql_1.DirectiveLocation.FIELD_DEFINITION,
	    graphql_1.DirectiveLocation.OBJECT,
	    graphql_1.DirectiveLocation.INTERFACE,
	    graphql_1.DirectiveLocation.UNION,
	];
	const printedTagDefinition = 'directive @tag(name: String!) repeatable on FIELD_DEFINITION | INTERFACE | OBJECT | UNION';
	class TagSpecDefinition extends coreSpec_1.FeatureDefinition {
	    constructor(version) {
	        super(new coreSpec_1.FeatureUrl(exports.tagIdentity, 'tag', version));
	    }
	    addElementsToSchema(schema) {
	        const directive = this.addDirective(schema, 'tag').addLocations(...exports.tagLocations);
	        directive.addArgument("name", new definitions_1.NonNullType(schema.stringType()));
	    }
	    tagDirective(schema) {
	        return this.directive(schema, 'tag');
	    }
	    checkCompatibleDirective(definition) {
	        (0, utils_1.assert)(definition.name === 'tag', () => `This method should not have been called on directive named ${definition.name}`);
	        const hasUnknownArguments = Object.keys(definition.arguments()).length > 1;
	        const nameArg = definition.argument('name');
	        const hasValidNameArg = nameArg && (0, types_1.sameType)(nameArg.type, new definitions_1.NonNullType(definition.schema().stringType()));
	        const hasValidLocations = definition.locations.every(loc => exports.tagLocations.includes(loc));
	        if (hasUnknownArguments || !hasValidNameArg || !hasValidLocations) {
	            return error_1.ERRORS.TAG_DEFINITION_INVALID.err({
	                message: `Found invalid @tag directive definition. Please ensure the directive definition in your schema's definitions matches the following:\n\t${printedTagDefinition}`,
	            });
	        }
	        return undefined;
	    }
	}
	exports.TagSpecDefinition = TagSpecDefinition;
	exports.TAG_VERSIONS = new coreSpec_1.FeatureDefinitions(exports.tagIdentity)
	    .add(new TagSpecDefinition(new coreSpec_1.FeatureVersion(0, 1)));

	}(tagSpec$1));

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ExternalTester = exports.addSubgraphToError = exports.addSubgraphToASTNode = exports.Subgraph = exports.Subgraphs = exports.subgraphsFromServiceList = exports.parseFieldSetArgument = exports.buildSubgraph = exports.isEntityType = exports.isFederationDirective = exports.isFederationField = exports.isFederationTypeName = exports.isFederationType = exports.isFederationSubgraphSchema = exports.federationBuiltIns = exports.FederationBuiltIns = exports.FEDERATION_RESERVED_SUBGRAPH_NAME = exports.entitiesFieldName = exports.serviceFieldName = exports.tagDirectiveName = exports.providesDirectiveName = exports.requiresDirectiveName = exports.externalDirectiveName = exports.extendsDirectiveName = exports.keyDirectiveName = exports.fieldSetTypeName = exports.anyTypeName = exports.serviceTypeName = exports.entityTypeName = void 0;
	const definitions_1 = definitions;
	const utils_1 = utils;
	const specifiedRules_1 = require$$2$1;
	const graphql_1 = require$$2$2;
	const print_1 = print;
	const KnownTypeNamesInFederationRule_1 = KnownTypeNamesInFederationRule$1;
	const buildSchema_1 = buildSchema$1;
	const operations_1 = operations;
	const tagSpec_1 = tagSpec$1;
	const error_1 = error;
	exports.entityTypeName = '_Entity';
	exports.serviceTypeName = '_Service';
	exports.anyTypeName = '_Any';
	exports.fieldSetTypeName = '_FieldSet';
	exports.keyDirectiveName = 'key';
	exports.extendsDirectiveName = 'extends';
	exports.externalDirectiveName = 'external';
	exports.requiresDirectiveName = 'requires';
	exports.providesDirectiveName = 'provides';
	exports.tagDirectiveName = 'tag';
	exports.serviceFieldName = '_service';
	exports.entitiesFieldName = '_entities';
	const tagSpec = tagSpec_1.TAG_VERSIONS.latest();
	exports.FEDERATION_RESERVED_SUBGRAPH_NAME = '_';
	const FEDERATION_TYPES = [
	    exports.entityTypeName,
	    exports.serviceTypeName,
	    exports.anyTypeName,
	    exports.fieldSetTypeName
	];
	const FEDERATION_DIRECTIVES = [
	    exports.keyDirectiveName,
	    exports.extendsDirectiveName,
	    exports.externalDirectiveName,
	    exports.requiresDirectiveName,
	    exports.providesDirectiveName,
	    exports.tagDirectiveName
	];
	const FEDERATION_ROOT_FIELDS = [
	    exports.serviceFieldName,
	    exports.entitiesFieldName
	];
	const FEDERATION_OMITTED_VALIDATION_RULES = [
	    graphql_1.PossibleTypeExtensionsRule,
	    graphql_1.KnownTypeNamesRule
	];
	const FEDERATION_SPECIFIC_VALIDATION_RULES = [
	    KnownTypeNamesInFederationRule_1.KnownTypeNamesInFederationRule
	];
	const FEDERATION_VALIDATION_RULES = specifiedRules_1.specifiedSDLRules.filter(rule => !FEDERATION_OMITTED_VALIDATION_RULES.includes(rule)).concat(FEDERATION_SPECIFIC_VALIDATION_RULES);
	function validateFieldSetSelections(directiveName, selectionSet, hasExternalInParents, externalTester, externalFieldCoordinatesCollector, allowOnNonExternalLeafFields) {
	    for (const selection of selectionSet.selections()) {
	        if (selection.kind === 'FieldSelection') {
	            const field = selection.element().definition;
	            const isExternal = externalTester.isExternal(field);
	            if (isExternal) {
	                externalFieldCoordinatesCollector.push(field.coordinate);
	            }
	            if (field.hasArguments()) {
	                throw error_1.ERROR_CATEGORIES.FIELDS_HAS_ARGS.get(directiveName).err({
	                    message: `field ${field.coordinate} cannot be included because it has arguments (fields with argument are not allowed in @${directiveName})`,
	                    nodes: field.sourceAST
	                });
	            }
	            const mustBeExternal = !selection.selectionSet && !allowOnNonExternalLeafFields && !hasExternalInParents;
	            if (!isExternal && mustBeExternal) {
	                const errorCode = error_1.ERROR_CATEGORIES.DIRECTIVE_FIELDS_MISSING_EXTERNAL.get(directiveName);
	                if (externalTester.isFakeExternal(field)) {
	                    throw errorCode.err({
	                        message: `field "${field.coordinate}" should not be part of a @${directiveName} since it is already "effectively" provided by this subgraph `
	                            + `(while it is marked @${exports.externalDirectiveName}, it is a @${exports.keyDirectiveName} field of an extension type, which are not internally considered external for historical/backward compatibility reasons)`,
	                        nodes: field.sourceAST
	                    });
	                }
	                else {
	                    throw errorCode.err({
	                        message: `field "${field.coordinate}" should not be part of a @${directiveName} since it is already provided by this subgraph (it is not marked @${exports.externalDirectiveName})`,
	                        nodes: field.sourceAST
	                    });
	                }
	            }
	            if (selection.selectionSet) {
	                let newHasExternalInParents = hasExternalInParents || isExternal;
	                const parentType = field.parent;
	                if (!newHasExternalInParents && (0, definitions_1.isInterfaceType)(parentType)) {
	                    for (const implem of parentType.possibleRuntimeTypes()) {
	                        const fieldInImplem = implem.field(field.name);
	                        if (fieldInImplem && externalTester.isExternal(fieldInImplem)) {
	                            newHasExternalInParents = true;
	                            break;
	                        }
	                    }
	                }
	                validateFieldSetSelections(directiveName, selection.selectionSet, newHasExternalInParents, externalTester, externalFieldCoordinatesCollector, allowOnNonExternalLeafFields);
	            }
	        }
	        else {
	            validateFieldSetSelections(directiveName, selection.selectionSet, hasExternalInParents, externalTester, externalFieldCoordinatesCollector, allowOnNonExternalLeafFields);
	        }
	    }
	}
	function validateFieldSet(type, directive, externalTester, externalFieldCoordinatesCollector, allowOnNonExternalLeafFields, onFields) {
	    var _a;
	    try {
	        const fieldAcessor = onFields
	            ? (type, fieldName) => {
	                const field = type.field(fieldName);
	                if (field) {
	                    onFields(field);
	                }
	                return field;
	            }
	            : undefined;
	        const selectionSet = parseFieldSetArgument(type, directive, fieldAcessor);
	        try {
	            validateFieldSetSelections(directive.name, selectionSet, false, externalTester, externalFieldCoordinatesCollector, allowOnNonExternalLeafFields);
	            return undefined;
	        }
	        catch (e) {
	            if (!(e instanceof graphql_1.GraphQLError)) {
	                throw e;
	            }
	            const nodes = (0, definitions_1.sourceASTs)(directive);
	            if (e.nodes) {
	                nodes.push(...e.nodes);
	            }
	            const codeDef = (_a = (0, error_1.errorCodeDef)(e)) !== null && _a !== void 0 ? _a : error_1.ERROR_CATEGORIES.DIRECTIVE_INVALID_FIELDS.get(directive.name);
	            return codeDef.err({
	                message: `${fieldSetErrorDescriptor(directive)}: ${e.message.trim()}`,
	                nodes,
	                originalError: e,
	            });
	        }
	    }
	    catch (e) {
	        if (e instanceof graphql_1.GraphQLError) {
	            return e;
	        }
	        else {
	            throw e;
	        }
	    }
	}
	function fieldSetErrorDescriptor(directive) {
	    return `On ${fieldSetTargetDescription(directive)}, for ${directiveStrUsingASTIfPossible(directive)}`;
	}
	function directiveStrUsingASTIfPossible(directive) {
	    return directive.sourceAST ? (0, graphql_1.print)(directive.sourceAST) : directive.toString();
	}
	function fieldSetTargetDescription(directive) {
	    var _a;
	    const targetKind = directive.parent instanceof definitions_1.FieldDefinition ? "field" : "type";
	    return `${targetKind} "${(_a = directive.parent) === null || _a === void 0 ? void 0 : _a.coordinate}"`;
	}
	function validateAllFieldSet(definition, targetTypeExtractor, errorCollector, externalTester, externalFieldCoordinatesCollector, isOnParentType, allowOnNonExternalLeafFields, onFields) {
	    for (const application of definition.applications()) {
	        const elt = application.parent;
	        const type = targetTypeExtractor(elt);
	        const parentType = isOnParentType ? type : elt.parent;
	        if ((0, definitions_1.isInterfaceType)(parentType)) {
	            const code = error_1.ERROR_CATEGORIES.DIRECTIVE_UNSUPPORTED_ON_INTERFACE.get(definition.name);
	            errorCollector.push(code.err({
	                message: isOnParentType
	                    ? `Cannot use ${definition.coordinate} on interface "${parentType.coordinate}": ${definition.coordinate} is not yet supported on interfaces`
	                    : `Cannot use ${definition.coordinate} on ${fieldSetTargetDescription(application)} of parent type "${parentType}": ${definition.coordinate} is not yet supported within interfaces`,
	                nodes: (0, definitions_1.sourceASTs)(application).concat(isOnParentType ? [] : (0, definitions_1.sourceASTs)(type)),
	            }));
	        }
	        const error = validateFieldSet(type, application, externalTester, externalFieldCoordinatesCollector, allowOnNonExternalLeafFields, onFields);
	        if (error) {
	            errorCollector.push(error);
	        }
	    }
	}
	function validateAllExternalFieldsUsed(schema, externalTester, allExternalFieldsUsedInFederationDirectivesCoordinates, errorCollector) {
	    for (const type of schema.types()) {
	        if (!(0, definitions_1.isObjectType)(type) && !(0, definitions_1.isInterfaceType)(type)) {
	            continue;
	        }
	        for (const field of type.fields()) {
	            if (!externalTester.isExternal(field) || allExternalFieldsUsedInFederationDirectivesCoordinates.includes(field.coordinate)) {
	                continue;
	            }
	            if (!isFieldSatisfyingInterface(field)) {
	                errorCollector.push(error_1.ERRORS.EXTERNAL_UNUSED.err({
	                    message: `Field "${field.coordinate}" is marked @external but is not used in any federation directive (@key, @provides, @requires) or to satisfy an interface;`
	                        + ' the field declaration has no use and should be removed (or the field should not be @external).',
	                    nodes: field.sourceAST,
	                }));
	            }
	        }
	    }
	}
	function isFieldSatisfyingInterface(field) {
	    return field.parent.interfaces().some(itf => itf.field(field.name));
	}
	function validateInterfaceRuntimeImplementationFieldsTypes(itf, externalTester, errorCollector) {
	    const runtimeTypes = itf.possibleRuntimeTypes();
	    for (const field of itf.fields()) {
	        const withExternalOrRequires = [];
	        const typeToImplems = new utils_1.MultiMap();
	        const nodes = [];
	        for (const type of runtimeTypes) {
	            const implemField = type.field(field.name);
	            if (!implemField)
	                continue;
	            if (implemField.sourceAST) {
	                nodes.push(implemField.sourceAST);
	            }
	            if (externalTester.isExternal(implemField) || implemField.hasAppliedDirective(exports.requiresDirectiveName)) {
	                withExternalOrRequires.push(implemField);
	            }
	            const returnType = implemField.type;
	            typeToImplems.add(returnType.toString(), implemField);
	        }
	        if (withExternalOrRequires.length > 0 && typeToImplems.size > 1) {
	            const typeToImplemsArray = [...typeToImplems.entries()];
	            errorCollector.push(error_1.ERRORS.INTERFACE_FIELD_IMPLEM_TYPE_MISMATCH.err({
	                message: `Some of the runtime implementations of interface field "${field.coordinate}" are marked @external or have a @require (${withExternalOrRequires.map(printFieldCoordinate)}) so all the implementations should use the same type (a current limitation of federation; see https://github.com/apollographql/federation/issues/1257), but ${formatFieldsToReturnType(typeToImplemsArray[0])} while ${(0, utils_1.joinStrings)(typeToImplemsArray.slice(1).map(formatFieldsToReturnType), ' and ')}.`,
	                nodes
	            }));
	        }
	    }
	}
	const printFieldCoordinate = (f) => `"${f.coordinate}"`;
	function formatFieldsToReturnType([type, implems]) {
	    return `${(0, utils_1.joinStrings)(implems.map(printFieldCoordinate))} ${implems.length == 1 ? 'has' : 'have'} type "${type}"`;
	}
	class FederationBuiltIns extends definitions_1.BuiltIns {
	    addBuiltInTypes(schema) {
	        super.addBuiltInTypes(schema);
	        this.addBuiltInUnion(schema, exports.entityTypeName);
	        this.addBuiltInObject(schema, exports.serviceTypeName).addField('sdl', schema.stringType());
	        this.addBuiltInScalar(schema, exports.anyTypeName);
	        this.addBuiltInScalar(schema, exports.fieldSetTypeName);
	    }
	    addBuiltInDirectives(schema) {
	        super.addBuiltInDirectives(schema);
	        const fieldSetType = new definitions_1.NonNullType(schema.type(exports.fieldSetTypeName));
	        const keyDirective = this.addBuiltInDirective(schema, exports.keyDirectiveName)
	            .addLocations(graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE);
	        keyDirective.repeatable = true;
	        keyDirective.addArgument('fields', fieldSetType);
	        this.addBuiltInDirective(schema, exports.extendsDirectiveName)
	            .addLocations(graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE);
	        this.addBuiltInDirective(schema, exports.externalDirectiveName)
	            .addLocations(graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.FIELD_DEFINITION);
	        for (const name of [exports.requiresDirectiveName, exports.providesDirectiveName]) {
	            this.addBuiltInDirective(schema, name)
	                .addLocations(graphql_1.DirectiveLocation.FIELD_DEFINITION)
	                .addArgument('fields', fieldSetType);
	        }
	        const directive = this.addBuiltInDirective(schema, 'tag').addLocations(...tagSpec_1.tagLocations);
	        directive.addArgument("name", new definitions_1.NonNullType(schema.stringType()));
	    }
	    prepareValidation(schema) {
	        super.prepareValidation(schema);
	        let entityType = schema.type(exports.entityTypeName);
	        if (!entityType.isBuiltIn) {
	            if (entityType.membersCount() === 0) {
	                entityType.remove();
	            }
	            entityType = schema.builtInTypes('UnionType', true).find(u => u.name === exports.entityTypeName);
	        }
	        entityType.clearTypes();
	        for (const objectType of schema.types("ObjectType")) {
	            if (isEntityType(objectType)) {
	                entityType.addType(objectType);
	            }
	        }
	        const hasEntities = entityType.membersCount() > 0;
	        if (!hasEntities) {
	            entityType.remove();
	        }
	        const queryRoot = schema.schemaDefinition.root("query");
	        const queryType = queryRoot ? queryRoot.type : schema.addType(new definitions_1.ObjectType("Query"));
	        const entityField = queryType.field(exports.entitiesFieldName);
	        if (hasEntities) {
	            const anyType = schema.type(exports.anyTypeName);
	            (0, utils_1.assert)(anyType, `The schema should have the _Any type`);
	            const entityFieldType = new definitions_1.NonNullType(new definitions_1.ListType(entityType));
	            if (!entityField) {
	                this.addBuiltInField(queryType, exports.entitiesFieldName, entityFieldType)
	                    .addArgument('representations', new definitions_1.NonNullType(new definitions_1.ListType(new definitions_1.NonNullType(anyType))));
	            }
	            else if (!entityField.type) {
	                entityField.type = entityType;
	            }
	        }
	        else if (entityField) {
	            entityField.remove();
	        }
	        if (!queryType.field(exports.serviceFieldName)) {
	            this.addBuiltInField(queryType, exports.serviceFieldName, schema.type(exports.serviceTypeName));
	        }
	    }
	    onValidation(schema) {
	        var _a;
	        const errors = super.onValidation(schema, [exports.tagDirectiveName]);
	        for (const k of definitions_1.allSchemaRootKinds) {
	            const type = (_a = schema.schemaDefinition.root(k)) === null || _a === void 0 ? void 0 : _a.type;
	            const defaultName = (0, definitions_1.defaultRootName)(k);
	            if (type && type.name !== defaultName) {
	                const existing = schema.type(defaultName);
	                if (existing) {
	                    errors.push(error_1.ERROR_CATEGORIES.ROOT_TYPE_USED.get(k).err({
	                        message: `The schema has a type named "${defaultName}" but it is not set as the ${k} root type ("${type.name}" is instead): `
	                            + 'this is not supported by federation. '
	                            + 'If a root type does not use its default name, there should be no other type with that default name.',
	                        nodes: (0, definitions_1.sourceASTs)(type, existing),
	                    }));
	                }
	                type.rename(defaultName);
	            }
	        }
	        const externalTester = new ExternalTester(schema);
	        const externalFieldsInFedDirectivesCoordinates = [];
	        const keyDirective = this.keyDirective(schema);
	        validateAllFieldSet(keyDirective, type => type, errors, externalTester, externalFieldsInFedDirectivesCoordinates, true, true, field => {
	            if ((0, definitions_1.isListType)(field.type) || (0, definitions_1.isUnionType)(field.type) || (0, definitions_1.isInterfaceType)(field.type)) {
	                let kind = field.type.kind;
	                kind = kind.slice(0, kind.length - 'Type'.length);
	                throw error_1.ERRORS.KEY_FIELDS_SELECT_INVALID_TYPE.err({
	                    message: `field "${field.coordinate}" is a ${kind} type which is not allowed in @key`
	                });
	            }
	        });
	        validateAllFieldSet(this.requiresDirective(schema), field => field.parent, errors, externalTester, externalFieldsInFedDirectivesCoordinates, false, false);
	        validateAllFieldSet(this.providesDirective(schema), field => {
	            if (externalTester.isExternal(field)) {
	                throw new graphql_1.GraphQLError(`Cannot have both @provides and @external on field "${field.coordinate}"`, field.sourceAST);
	            }
	            const type = (0, definitions_1.baseType)(field.type);
	            if (!(0, definitions_1.isCompositeType)(type)) {
	                throw error_1.ERRORS.PROVIDES_ON_NON_OBJECT_FIELD.err({
	                    message: `Invalid @provides directive on field "${field.coordinate}": field has type "${field.type}" which is not a Composite Type`,
	                    nodes: field.sourceAST,
	                });
	            }
	            return type;
	        }, errors, externalTester, externalFieldsInFedDirectivesCoordinates, false, false);
	        validateAllExternalFieldsUsed(schema, externalTester, externalFieldsInFedDirectivesCoordinates, errors);
	        const tagDirective = this.tagDirective(schema);
	        if (!tagDirective.isBuiltIn) {
	            const error = tagSpec.checkCompatibleDirective(tagDirective);
	            if (error) {
	                errors.push(error);
	            }
	        }
	        for (const itf of schema.types('InterfaceType')) {
	            validateInterfaceRuntimeImplementationFieldsTypes(itf, externalTester, errors);
	        }
	        return errors;
	    }
	    validationRules() {
	        return FEDERATION_VALIDATION_RULES;
	    }
	    keyDirective(schema) {
	        return this.getTypedDirective(schema, exports.keyDirectiveName);
	    }
	    extendsDirective(schema) {
	        return this.getTypedDirective(schema, exports.extendsDirectiveName);
	    }
	    externalDirective(schema) {
	        return this.getTypedDirective(schema, exports.externalDirectiveName);
	    }
	    requiresDirective(schema) {
	        return this.getTypedDirective(schema, exports.requiresDirectiveName);
	    }
	    providesDirective(schema) {
	        return this.getTypedDirective(schema, exports.providesDirectiveName);
	    }
	    tagDirective(schema) {
	        return this.getTypedDirective(schema, exports.tagDirectiveName);
	    }
	    maybeUpdateSubgraphDocument(schema, document) {
	        document = super.maybeUpdateSubgraphDocument(schema, document);
	        const definitions = document.definitions.concat();
	        for (const directiveName of FEDERATION_DIRECTIVES) {
	            const directive = schema.directive(directiveName);
	            (0, utils_1.assert)(directive, 'This method should only have been called on a schema with federation built-ins');
	            if (directive.isBuiltIn) {
	                definitions.push((0, graphql_1.parse)((0, print_1.printDirectiveDefinition)(directive, print_1.defaultPrintOptions)).definitions[0]);
	            }
	        }
	        return {
	            kind: graphql_1.Kind.DOCUMENT,
	            loc: document.loc,
	            definitions
	        };
	    }
	}
	exports.FederationBuiltIns = FederationBuiltIns;
	exports.federationBuiltIns = new FederationBuiltIns();
	function isFederationSubgraphSchema(schema) {
	    return schema.builtIns instanceof FederationBuiltIns;
	}
	exports.isFederationSubgraphSchema = isFederationSubgraphSchema;
	function isFederationType(type) {
	    return isFederationTypeName(type.name);
	}
	exports.isFederationType = isFederationType;
	function isFederationTypeName(typeName) {
	    return FEDERATION_TYPES.includes(typeName);
	}
	exports.isFederationTypeName = isFederationTypeName;
	function isFederationField(field) {
	    var _a;
	    if (field.parent === ((_a = field.schema().schemaDefinition.root("query")) === null || _a === void 0 ? void 0 : _a.type)) {
	        return FEDERATION_ROOT_FIELDS.includes(field.name);
	    }
	    return false;
	}
	exports.isFederationField = isFederationField;
	function isFederationDirective(directive) {
	    return FEDERATION_DIRECTIVES.includes(directive.name);
	}
	exports.isFederationDirective = isFederationDirective;
	function isEntityType(type) {
	    return type.kind == "ObjectType" && type.hasAppliedDirective(exports.keyDirectiveName);
	}
	exports.isEntityType = isEntityType;
	function buildSubgraph(name, source) {
	    try {
	        return typeof source === 'string'
	            ? (0, buildSchema_1.buildSchema)(new graphql_1.Source(source, name), exports.federationBuiltIns)
	            : (0, buildSchema_1.buildSchemaFromAST)(source, exports.federationBuiltIns);
	    }
	    catch (e) {
	        if (e instanceof graphql_1.GraphQLError) {
	            throw addSubgraphToError(e, name, error_1.ERRORS.INVALID_GRAPHQL);
	        }
	        else {
	            throw e;
	        }
	    }
	}
	exports.buildSubgraph = buildSubgraph;
	function parseFieldSetArgument(parentType, directive, fieldAccessor = (type, name) => type.field(name)) {
	    var _a;
	    try {
	        const selectionSet = (0, operations_1.parseSelectionSet)(parentType, validateFieldSetValue(directive), new definitions_1.VariableDefinitions(), undefined, fieldAccessor);
	        selectionSet.validate();
	        return selectionSet;
	    }
	    catch (e) {
	        if (!(e instanceof graphql_1.GraphQLError)) {
	            throw e;
	        }
	        const nodes = (0, definitions_1.sourceASTs)(directive);
	        if (e.nodes) {
	            nodes.push(...e.nodes);
	        }
	        let msg = e.message.trim();
	        if (msg.startsWith('Cannot query field')) {
	            if (msg.endsWith('.')) {
	                msg = msg.slice(0, msg.length - 1);
	            }
	            if (directive.name === exports.keyDirectiveName) {
	                msg = msg + ' (the field should be either be added to this subgraph or, if it should not be resolved by this subgraph, you need to add it to this subgraph with @external).';
	            }
	            else {
	                msg = msg + ' (if the field is defined in another subgraph, you need to add it to this subgraph with @external).';
	            }
	        }
	        const codeDef = (_a = (0, error_1.errorCodeDef)(e)) !== null && _a !== void 0 ? _a : error_1.ERROR_CATEGORIES.DIRECTIVE_INVALID_FIELDS.get(directive.name);
	        throw codeDef.err({
	            message: `${fieldSetErrorDescriptor(directive)}: ${msg}`,
	            nodes,
	            originalError: e,
	        });
	    }
	}
	exports.parseFieldSetArgument = parseFieldSetArgument;
	function validateFieldSetValue(directive) {
	    var _a;
	    const fields = directive.arguments().fields;
	    const nodes = directive.sourceAST;
	    if (typeof fields !== 'string') {
	        throw error_1.ERROR_CATEGORIES.DIRECTIVE_INVALID_FIELDS_TYPE.get(directive.name).err({
	            message: `Invalid value for argument "${directive.definition.argument('fields').name}": must be a string.`,
	            nodes,
	        });
	    }
	    if (nodes && nodes.kind === 'Directive') {
	        for (const argNode of (_a = nodes.arguments) !== null && _a !== void 0 ? _a : []) {
	            if (argNode.name.value === 'fields') {
	                if (argNode.value.kind !== 'StringValue') {
	                    throw error_1.ERROR_CATEGORIES.DIRECTIVE_INVALID_FIELDS_TYPE.get(directive.name).err({
	                        message: `Invalid value for argument "${directive.definition.argument('fields').name}": must be a string.`,
	                        nodes,
	                    });
	                }
	                break;
	            }
	        }
	    }
	    return fields;
	}
	function subgraphsFromServiceList(serviceList) {
	    var _a;
	    let errors = [];
	    const subgraphs = new Subgraphs();
	    for (const service of serviceList) {
	        try {
	            subgraphs.add(service.name, (_a = service.url) !== null && _a !== void 0 ? _a : '', service.typeDefs);
	        }
	        catch (e) {
	            const causes = (0, definitions_1.errorCauses)(e);
	            if (causes) {
	                errors = errors.concat(causes);
	            }
	            else {
	                throw e;
	            }
	        }
	    }
	    return errors.length === 0 ? subgraphs : errors;
	}
	exports.subgraphsFromServiceList = subgraphsFromServiceList;
	class Subgraphs {
	    constructor() {
	        this.subgraphs = new utils_1.OrderedMap();
	    }
	    add(subgraphOrName, url, schema) {
	        const toAdd = typeof subgraphOrName === 'string'
	            ? new Subgraph(subgraphOrName, url, schema instanceof definitions_1.Schema ? schema : buildSubgraph(subgraphOrName, schema))
	            : subgraphOrName;
	        if (toAdd.name === exports.FEDERATION_RESERVED_SUBGRAPH_NAME) {
	            throw error_1.ERRORS.INVALID_SUBGRAPH_NAME.err({ message: `Invalid name ${exports.FEDERATION_RESERVED_SUBGRAPH_NAME} for a subgraph: this name is reserved` });
	        }
	        if (this.subgraphs.has(toAdd.name)) {
	            throw new Error(`A subgraph named ${toAdd.name} already exists` + (toAdd.url ? ` (with url '${toAdd.url}')` : ''));
	        }
	        this.subgraphs.add(toAdd.name, toAdd);
	        return toAdd;
	    }
	    get(name) {
	        return this.subgraphs.get(name);
	    }
	    size() {
	        return this.subgraphs.size;
	    }
	    names() {
	        return this.subgraphs.keys();
	    }
	    values() {
	        return this.subgraphs.values();
	    }
	    *[Symbol.iterator]() {
	        for (const subgraph of this.subgraphs) {
	            yield subgraph;
	        }
	    }
	    toString() {
	        return '[' + this.subgraphs.keys().join(', ') + ']';
	    }
	}
	exports.Subgraphs = Subgraphs;
	class Subgraph {
	    constructor(name, url, schema, validateSchema = true) {
	        this.name = name;
	        this.url = url;
	        this.schema = schema;
	        if (validateSchema) {
	            schema.validate();
	        }
	    }
	    toString() {
	        return `${this.name} (${this.url})`;
	    }
	}
	exports.Subgraph = Subgraph;
	function addSubgraphToASTNode(node, subgraph) {
	    return {
	        ...node,
	        subgraph
	    };
	}
	exports.addSubgraphToASTNode = addSubgraphToASTNode;
	function addSubgraphToError(e, subgraphName, errorCode) {
	    const updatedCauses = (0, definitions_1.errorCauses)(e).map(cause => {
	        var _a;
	        const message = `[${subgraphName}] ${cause.message}`;
	        const nodes = cause.nodes
	            ? cause.nodes.map(node => addSubgraphToASTNode(node, subgraphName))
	            : undefined;
	        const code = (_a = (0, error_1.errorCodeDef)(cause)) !== null && _a !== void 0 ? _a : errorCode;
	        if (code) {
	            return code.err({
	                message,
	                nodes,
	                source: cause.source,
	                positions: cause.positions,
	                path: cause.path,
	                originalError: cause.originalError,
	                extensions: cause.extensions,
	            });
	        }
	        else {
	            return new graphql_1.GraphQLError(message, nodes, cause.source, cause.positions, cause.path, cause.originalError, cause.extensions);
	        }
	    });
	    return (0, definitions_1.ErrGraphQLValidationFailed)(updatedCauses);
	}
	exports.addSubgraphToError = addSubgraphToError;
	class ExternalTester {
	    constructor(schema) {
	        this.schema = schema;
	        this.fakeExternalFields = new Set();
	        this.collectFakeExternals();
	    }
	    collectFakeExternals() {
	        const keyDirective = exports.federationBuiltIns.keyDirective(this.schema);
	        if (!keyDirective) {
	            return;
	        }
	        for (const key of keyDirective.applications()) {
	            const parent = key.parent;
	            if (!(key.ofExtension() || parent.hasAppliedDirective(exports.extendsDirectiveName))) {
	                continue;
	            }
	            try {
	                parseFieldSetArgument(parent, key, (parentType, fieldName) => {
	                    const field = parentType.field(fieldName);
	                    if (field && field.hasAppliedDirective(exports.externalDirectiveName)) {
	                        this.fakeExternalFields.add(field.coordinate);
	                    }
	                    return field;
	                });
	            }
	            catch (e) {
	            }
	        }
	    }
	    isExternal(field) {
	        return field.hasAppliedDirective(exports.externalDirectiveName) && !this.isFakeExternal(field);
	    }
	    isFakeExternal(field) {
	        return this.fakeExternalFields.has(field.coordinate);
	    }
	    selectsAnyExternalField(selectionSet) {
	        for (const selection of selectionSet.selections()) {
	            if (selection.kind === 'FieldSelection' && this.isExternal(selection.element().definition)) {
	                return true;
	            }
	            if (selection.selectionSet) {
	                if (this.selectsAnyExternalField(selection.selectionSet)) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }
	}
	exports.ExternalTester = ExternalTester;

	}(federation));

	var debug$1 = {};

	var ansiStyles$1 = {exports: {}};

	var colorName = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};

	/* MIT license */

	/* eslint-disable no-mixed-operators */
	const cssKeywords = colorName;

	// NOTE: conversions should only return primitive values (i.e. arrays, or
	//       values that give correct `typeof` results).
	//       do not use box values types (i.e. Number(), String(), etc.)

	const reverseKeywords = {};
	for (const key of Object.keys(cssKeywords)) {
		reverseKeywords[cssKeywords[key]] = key;
	}

	const convert$1 = {
		rgb: {channels: 3, labels: 'rgb'},
		hsl: {channels: 3, labels: 'hsl'},
		hsv: {channels: 3, labels: 'hsv'},
		hwb: {channels: 3, labels: 'hwb'},
		cmyk: {channels: 4, labels: 'cmyk'},
		xyz: {channels: 3, labels: 'xyz'},
		lab: {channels: 3, labels: 'lab'},
		lch: {channels: 3, labels: 'lch'},
		hex: {channels: 1, labels: ['hex']},
		keyword: {channels: 1, labels: ['keyword']},
		ansi16: {channels: 1, labels: ['ansi16']},
		ansi256: {channels: 1, labels: ['ansi256']},
		hcg: {channels: 3, labels: ['h', 'c', 'g']},
		apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
		gray: {channels: 1, labels: ['gray']}
	};

	var conversions$2 = convert$1;

	// Hide .channels and .labels properties
	for (const model of Object.keys(convert$1)) {
		if (!('channels' in convert$1[model])) {
			throw new Error('missing channels property: ' + model);
		}

		if (!('labels' in convert$1[model])) {
			throw new Error('missing channel labels property: ' + model);
		}

		if (convert$1[model].labels.length !== convert$1[model].channels) {
			throw new Error('channel and label counts mismatch: ' + model);
		}

		const {channels, labels} = convert$1[model];
		delete convert$1[model].channels;
		delete convert$1[model].labels;
		Object.defineProperty(convert$1[model], 'channels', {value: channels});
		Object.defineProperty(convert$1[model], 'labels', {value: labels});
	}

	convert$1.rgb.hsl = function (rgb) {
		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;
		const min = Math.min(r, g, b);
		const max = Math.max(r, g, b);
		const delta = max - min;
		let h;
		let s;

		if (max === min) {
			h = 0;
		} else if (r === max) {
			h = (g - b) / delta;
		} else if (g === max) {
			h = 2 + (b - r) / delta;
		} else if (b === max) {
			h = 4 + (r - g) / delta;
		}

		h = Math.min(h * 60, 360);

		if (h < 0) {
			h += 360;
		}

		const l = (min + max) / 2;

		if (max === min) {
			s = 0;
		} else if (l <= 0.5) {
			s = delta / (max + min);
		} else {
			s = delta / (2 - max - min);
		}

		return [h, s * 100, l * 100];
	};

	convert$1.rgb.hsv = function (rgb) {
		let rdif;
		let gdif;
		let bdif;
		let h;
		let s;

		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;
		const v = Math.max(r, g, b);
		const diff = v - Math.min(r, g, b);
		const diffc = function (c) {
			return (v - c) / 6 / diff + 1 / 2;
		};

		if (diff === 0) {
			h = 0;
			s = 0;
		} else {
			s = diff / v;
			rdif = diffc(r);
			gdif = diffc(g);
			bdif = diffc(b);

			if (r === v) {
				h = bdif - gdif;
			} else if (g === v) {
				h = (1 / 3) + rdif - bdif;
			} else if (b === v) {
				h = (2 / 3) + gdif - rdif;
			}

			if (h < 0) {
				h += 1;
			} else if (h > 1) {
				h -= 1;
			}
		}

		return [
			h * 360,
			s * 100,
			v * 100
		];
	};

	convert$1.rgb.hwb = function (rgb) {
		const r = rgb[0];
		const g = rgb[1];
		let b = rgb[2];
		const h = convert$1.rgb.hsl(rgb)[0];
		const w = 1 / 255 * Math.min(r, Math.min(g, b));

		b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

		return [h, w * 100, b * 100];
	};

	convert$1.rgb.cmyk = function (rgb) {
		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;

		const k = Math.min(1 - r, 1 - g, 1 - b);
		const c = (1 - r - k) / (1 - k) || 0;
		const m = (1 - g - k) / (1 - k) || 0;
		const y = (1 - b - k) / (1 - k) || 0;

		return [c * 100, m * 100, y * 100, k * 100];
	};

	function comparativeDistance(x, y) {
		/*
			See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
		*/
		return (
			((x[0] - y[0]) ** 2) +
			((x[1] - y[1]) ** 2) +
			((x[2] - y[2]) ** 2)
		);
	}

	convert$1.rgb.keyword = function (rgb) {
		const reversed = reverseKeywords[rgb];
		if (reversed) {
			return reversed;
		}

		let currentClosestDistance = Infinity;
		let currentClosestKeyword;

		for (const keyword of Object.keys(cssKeywords)) {
			const value = cssKeywords[keyword];

			// Compute comparative distance
			const distance = comparativeDistance(rgb, value);

			// Check if its less, if so set as closest
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}

		return currentClosestKeyword;
	};

	convert$1.keyword.rgb = function (keyword) {
		return cssKeywords[keyword];
	};

	convert$1.rgb.xyz = function (rgb) {
		let r = rgb[0] / 255;
		let g = rgb[1] / 255;
		let b = rgb[2] / 255;

		// Assume sRGB
		r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
		g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
		b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

		const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
		const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
		const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

		return [x * 100, y * 100, z * 100];
	};

	convert$1.rgb.lab = function (rgb) {
		const xyz = convert$1.rgb.xyz(rgb);
		let x = xyz[0];
		let y = xyz[1];
		let z = xyz[2];

		x /= 95.047;
		y /= 100;
		z /= 108.883;

		x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

		const l = (116 * y) - 16;
		const a = 500 * (x - y);
		const b = 200 * (y - z);

		return [l, a, b];
	};

	convert$1.hsl.rgb = function (hsl) {
		const h = hsl[0] / 360;
		const s = hsl[1] / 100;
		const l = hsl[2] / 100;
		let t2;
		let t3;
		let val;

		if (s === 0) {
			val = l * 255;
			return [val, val, val];
		}

		if (l < 0.5) {
			t2 = l * (1 + s);
		} else {
			t2 = l + s - l * s;
		}

		const t1 = 2 * l - t2;

		const rgb = [0, 0, 0];
		for (let i = 0; i < 3; i++) {
			t3 = h + 1 / 3 * -(i - 1);
			if (t3 < 0) {
				t3++;
			}

			if (t3 > 1) {
				t3--;
			}

			if (6 * t3 < 1) {
				val = t1 + (t2 - t1) * 6 * t3;
			} else if (2 * t3 < 1) {
				val = t2;
			} else if (3 * t3 < 2) {
				val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
			} else {
				val = t1;
			}

			rgb[i] = val * 255;
		}

		return rgb;
	};

	convert$1.hsl.hsv = function (hsl) {
		const h = hsl[0];
		let s = hsl[1] / 100;
		let l = hsl[2] / 100;
		let smin = s;
		const lmin = Math.max(l, 0.01);

		l *= 2;
		s *= (l <= 1) ? l : 2 - l;
		smin *= lmin <= 1 ? lmin : 2 - lmin;
		const v = (l + s) / 2;
		const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

		return [h, sv * 100, v * 100];
	};

	convert$1.hsv.rgb = function (hsv) {
		const h = hsv[0] / 60;
		const s = hsv[1] / 100;
		let v = hsv[2] / 100;
		const hi = Math.floor(h) % 6;

		const f = h - Math.floor(h);
		const p = 255 * v * (1 - s);
		const q = 255 * v * (1 - (s * f));
		const t = 255 * v * (1 - (s * (1 - f)));
		v *= 255;

		switch (hi) {
			case 0:
				return [v, t, p];
			case 1:
				return [q, v, p];
			case 2:
				return [p, v, t];
			case 3:
				return [p, q, v];
			case 4:
				return [t, p, v];
			case 5:
				return [v, p, q];
		}
	};

	convert$1.hsv.hsl = function (hsv) {
		const h = hsv[0];
		const s = hsv[1] / 100;
		const v = hsv[2] / 100;
		const vmin = Math.max(v, 0.01);
		let sl;
		let l;

		l = (2 - s) * v;
		const lmin = (2 - s) * vmin;
		sl = s * vmin;
		sl /= (lmin <= 1) ? lmin : 2 - lmin;
		sl = sl || 0;
		l /= 2;

		return [h, sl * 100, l * 100];
	};

	// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
	convert$1.hwb.rgb = function (hwb) {
		const h = hwb[0] / 360;
		let wh = hwb[1] / 100;
		let bl = hwb[2] / 100;
		const ratio = wh + bl;
		let f;

		// Wh + bl cant be > 1
		if (ratio > 1) {
			wh /= ratio;
			bl /= ratio;
		}

		const i = Math.floor(6 * h);
		const v = 1 - bl;
		f = 6 * h - i;

		if ((i & 0x01) !== 0) {
			f = 1 - f;
		}

		const n = wh + f * (v - wh); // Linear interpolation

		let r;
		let g;
		let b;
		/* eslint-disable max-statements-per-line,no-multi-spaces */
		switch (i) {
			default:
			case 6:
			case 0: r = v;  g = n;  b = wh; break;
			case 1: r = n;  g = v;  b = wh; break;
			case 2: r = wh; g = v;  b = n; break;
			case 3: r = wh; g = n;  b = v; break;
			case 4: r = n;  g = wh; b = v; break;
			case 5: r = v;  g = wh; b = n; break;
		}
		/* eslint-enable max-statements-per-line,no-multi-spaces */

		return [r * 255, g * 255, b * 255];
	};

	convert$1.cmyk.rgb = function (cmyk) {
		const c = cmyk[0] / 100;
		const m = cmyk[1] / 100;
		const y = cmyk[2] / 100;
		const k = cmyk[3] / 100;

		const r = 1 - Math.min(1, c * (1 - k) + k);
		const g = 1 - Math.min(1, m * (1 - k) + k);
		const b = 1 - Math.min(1, y * (1 - k) + k);

		return [r * 255, g * 255, b * 255];
	};

	convert$1.xyz.rgb = function (xyz) {
		const x = xyz[0] / 100;
		const y = xyz[1] / 100;
		const z = xyz[2] / 100;
		let r;
		let g;
		let b;

		r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
		g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
		b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

		// Assume sRGB
		r = r > 0.0031308
			? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
			: r * 12.92;

		g = g > 0.0031308
			? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
			: g * 12.92;

		b = b > 0.0031308
			? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
			: b * 12.92;

		r = Math.min(Math.max(0, r), 1);
		g = Math.min(Math.max(0, g), 1);
		b = Math.min(Math.max(0, b), 1);

		return [r * 255, g * 255, b * 255];
	};

	convert$1.xyz.lab = function (xyz) {
		let x = xyz[0];
		let y = xyz[1];
		let z = xyz[2];

		x /= 95.047;
		y /= 100;
		z /= 108.883;

		x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

		const l = (116 * y) - 16;
		const a = 500 * (x - y);
		const b = 200 * (y - z);

		return [l, a, b];
	};

	convert$1.lab.xyz = function (lab) {
		const l = lab[0];
		const a = lab[1];
		const b = lab[2];
		let x;
		let y;
		let z;

		y = (l + 16) / 116;
		x = a / 500 + y;
		z = y - b / 200;

		const y2 = y ** 3;
		const x2 = x ** 3;
		const z2 = z ** 3;
		y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
		x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
		z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

		x *= 95.047;
		y *= 100;
		z *= 108.883;

		return [x, y, z];
	};

	convert$1.lab.lch = function (lab) {
		const l = lab[0];
		const a = lab[1];
		const b = lab[2];
		let h;

		const hr = Math.atan2(b, a);
		h = hr * 360 / 2 / Math.PI;

		if (h < 0) {
			h += 360;
		}

		const c = Math.sqrt(a * a + b * b);

		return [l, c, h];
	};

	convert$1.lch.lab = function (lch) {
		const l = lch[0];
		const c = lch[1];
		const h = lch[2];

		const hr = h / 360 * 2 * Math.PI;
		const a = c * Math.cos(hr);
		const b = c * Math.sin(hr);

		return [l, a, b];
	};

	convert$1.rgb.ansi16 = function (args, saturation = null) {
		const [r, g, b] = args;
		let value = saturation === null ? convert$1.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

		value = Math.round(value / 50);

		if (value === 0) {
			return 30;
		}

		let ansi = 30
			+ ((Math.round(b / 255) << 2)
			| (Math.round(g / 255) << 1)
			| Math.round(r / 255));

		if (value === 2) {
			ansi += 60;
		}

		return ansi;
	};

	convert$1.hsv.ansi16 = function (args) {
		// Optimization here; we already know the value and don't need to get
		// it converted for us.
		return convert$1.rgb.ansi16(convert$1.hsv.rgb(args), args[2]);
	};

	convert$1.rgb.ansi256 = function (args) {
		const r = args[0];
		const g = args[1];
		const b = args[2];

		// We use the extended greyscale palette here, with the exception of
		// black and white. normal palette only has 4 greyscale shades.
		if (r === g && g === b) {
			if (r < 8) {
				return 16;
			}

			if (r > 248) {
				return 231;
			}

			return Math.round(((r - 8) / 247) * 24) + 232;
		}

		const ansi = 16
			+ (36 * Math.round(r / 255 * 5))
			+ (6 * Math.round(g / 255 * 5))
			+ Math.round(b / 255 * 5);

		return ansi;
	};

	convert$1.ansi16.rgb = function (args) {
		let color = args % 10;

		// Handle greyscale
		if (color === 0 || color === 7) {
			if (args > 50) {
				color += 3.5;
			}

			color = color / 10.5 * 255;

			return [color, color, color];
		}

		const mult = (~~(args > 50) + 1) * 0.5;
		const r = ((color & 1) * mult) * 255;
		const g = (((color >> 1) & 1) * mult) * 255;
		const b = (((color >> 2) & 1) * mult) * 255;

		return [r, g, b];
	};

	convert$1.ansi256.rgb = function (args) {
		// Handle greyscale
		if (args >= 232) {
			const c = (args - 232) * 10 + 8;
			return [c, c, c];
		}

		args -= 16;

		let rem;
		const r = Math.floor(args / 36) / 5 * 255;
		const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
		const b = (rem % 6) / 5 * 255;

		return [r, g, b];
	};

	convert$1.rgb.hex = function (args) {
		const integer = ((Math.round(args[0]) & 0xFF) << 16)
			+ ((Math.round(args[1]) & 0xFF) << 8)
			+ (Math.round(args[2]) & 0xFF);

		const string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert$1.hex.rgb = function (args) {
		const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
		if (!match) {
			return [0, 0, 0];
		}

		let colorString = match[0];

		if (match[0].length === 3) {
			colorString = colorString.split('').map(char => {
				return char + char;
			}).join('');
		}

		const integer = parseInt(colorString, 16);
		const r = (integer >> 16) & 0xFF;
		const g = (integer >> 8) & 0xFF;
		const b = integer & 0xFF;

		return [r, g, b];
	};

	convert$1.rgb.hcg = function (rgb) {
		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;
		const max = Math.max(Math.max(r, g), b);
		const min = Math.min(Math.min(r, g), b);
		const chroma = (max - min);
		let grayscale;
		let hue;

		if (chroma < 1) {
			grayscale = min / (1 - chroma);
		} else {
			grayscale = 0;
		}

		if (chroma <= 0) {
			hue = 0;
		} else
		if (max === r) {
			hue = ((g - b) / chroma) % 6;
		} else
		if (max === g) {
			hue = 2 + (b - r) / chroma;
		} else {
			hue = 4 + (r - g) / chroma;
		}

		hue /= 6;
		hue %= 1;

		return [hue * 360, chroma * 100, grayscale * 100];
	};

	convert$1.hsl.hcg = function (hsl) {
		const s = hsl[1] / 100;
		const l = hsl[2] / 100;

		const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

		let f = 0;
		if (c < 1.0) {
			f = (l - 0.5 * c) / (1.0 - c);
		}

		return [hsl[0], c * 100, f * 100];
	};

	convert$1.hsv.hcg = function (hsv) {
		const s = hsv[1] / 100;
		const v = hsv[2] / 100;

		const c = s * v;
		let f = 0;

		if (c < 1.0) {
			f = (v - c) / (1 - c);
		}

		return [hsv[0], c * 100, f * 100];
	};

	convert$1.hcg.rgb = function (hcg) {
		const h = hcg[0] / 360;
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;

		if (c === 0.0) {
			return [g * 255, g * 255, g * 255];
		}

		const pure = [0, 0, 0];
		const hi = (h % 1) * 6;
		const v = hi % 1;
		const w = 1 - v;
		let mg = 0;

		/* eslint-disable max-statements-per-line */
		switch (Math.floor(hi)) {
			case 0:
				pure[0] = 1; pure[1] = v; pure[2] = 0; break;
			case 1:
				pure[0] = w; pure[1] = 1; pure[2] = 0; break;
			case 2:
				pure[0] = 0; pure[1] = 1; pure[2] = v; break;
			case 3:
				pure[0] = 0; pure[1] = w; pure[2] = 1; break;
			case 4:
				pure[0] = v; pure[1] = 0; pure[2] = 1; break;
			default:
				pure[0] = 1; pure[1] = 0; pure[2] = w;
		}
		/* eslint-enable max-statements-per-line */

		mg = (1.0 - c) * g;

		return [
			(c * pure[0] + mg) * 255,
			(c * pure[1] + mg) * 255,
			(c * pure[2] + mg) * 255
		];
	};

	convert$1.hcg.hsv = function (hcg) {
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;

		const v = c + g * (1.0 - c);
		let f = 0;

		if (v > 0.0) {
			f = c / v;
		}

		return [hcg[0], f * 100, v * 100];
	};

	convert$1.hcg.hsl = function (hcg) {
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;

		const l = g * (1.0 - c) + 0.5 * c;
		let s = 0;

		if (l > 0.0 && l < 0.5) {
			s = c / (2 * l);
		} else
		if (l >= 0.5 && l < 1.0) {
			s = c / (2 * (1 - l));
		}

		return [hcg[0], s * 100, l * 100];
	};

	convert$1.hcg.hwb = function (hcg) {
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;
		const v = c + g * (1.0 - c);
		return [hcg[0], (v - c) * 100, (1 - v) * 100];
	};

	convert$1.hwb.hcg = function (hwb) {
		const w = hwb[1] / 100;
		const b = hwb[2] / 100;
		const v = 1 - b;
		const c = v - w;
		let g = 0;

		if (c < 1) {
			g = (v - c) / (1 - c);
		}

		return [hwb[0], c * 100, g * 100];
	};

	convert$1.apple.rgb = function (apple) {
		return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
	};

	convert$1.rgb.apple = function (rgb) {
		return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
	};

	convert$1.gray.rgb = function (args) {
		return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
	};

	convert$1.gray.hsl = function (args) {
		return [0, 0, args[0]];
	};

	convert$1.gray.hsv = convert$1.gray.hsl;

	convert$1.gray.hwb = function (gray) {
		return [0, 100, gray[0]];
	};

	convert$1.gray.cmyk = function (gray) {
		return [0, 0, 0, gray[0]];
	};

	convert$1.gray.lab = function (gray) {
		return [gray[0], 0, 0];
	};

	convert$1.gray.hex = function (gray) {
		const val = Math.round(gray[0] / 100 * 255) & 0xFF;
		const integer = (val << 16) + (val << 8) + val;

		const string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert$1.rgb.gray = function (rgb) {
		const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
		return [val / 255 * 100];
	};

	const conversions$1 = conversions$2;

	/*
		This function routes a model to all other models.

		all functions that are routed have a property `.conversion` attached
		to the returned synthetic function. This property is an array
		of strings, each with the steps in between the 'from' and 'to'
		color models (inclusive).

		conversions that are not possible simply are not included.
	*/

	function buildGraph() {
		const graph = {};
		// https://jsperf.com/object-keys-vs-for-in-with-closure/3
		const models = Object.keys(conversions$1);

		for (let len = models.length, i = 0; i < len; i++) {
			graph[models[i]] = {
				// http://jsperf.com/1-vs-infinity
				// micro-opt, but this is simple.
				distance: -1,
				parent: null
			};
		}

		return graph;
	}

	// https://en.wikipedia.org/wiki/Breadth-first_search
	function deriveBFS(fromModel) {
		const graph = buildGraph();
		const queue = [fromModel]; // Unshift -> queue -> pop

		graph[fromModel].distance = 0;

		while (queue.length) {
			const current = queue.pop();
			const adjacents = Object.keys(conversions$1[current]);

			for (let len = adjacents.length, i = 0; i < len; i++) {
				const adjacent = adjacents[i];
				const node = graph[adjacent];

				if (node.distance === -1) {
					node.distance = graph[current].distance + 1;
					node.parent = current;
					queue.unshift(adjacent);
				}
			}
		}

		return graph;
	}

	function link(from, to) {
		return function (args) {
			return to(from(args));
		};
	}

	function wrapConversion(toModel, graph) {
		const path = [graph[toModel].parent, toModel];
		let fn = conversions$1[graph[toModel].parent][toModel];

		let cur = graph[toModel].parent;
		while (graph[cur].parent) {
			path.unshift(graph[cur].parent);
			fn = link(conversions$1[graph[cur].parent][cur], fn);
			cur = graph[cur].parent;
		}

		fn.conversion = path;
		return fn;
	}

	var route$1 = function (fromModel) {
		const graph = deriveBFS(fromModel);
		const conversion = {};

		const models = Object.keys(graph);
		for (let len = models.length, i = 0; i < len; i++) {
			const toModel = models[i];
			const node = graph[toModel];

			if (node.parent === null) {
				// No possible conversion, or this node is the source model.
				continue;
			}

			conversion[toModel] = wrapConversion(toModel, graph);
		}

		return conversion;
	};

	const conversions = conversions$2;
	const route = route$1;

	const convert = {};

	const models = Object.keys(conversions);

	function wrapRaw(fn) {
		const wrappedFn = function (...args) {
			const arg0 = args[0];
			if (arg0 === undefined || arg0 === null) {
				return arg0;
			}

			if (arg0.length > 1) {
				args = arg0;
			}

			return fn(args);
		};

		// Preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	function wrapRounded(fn) {
		const wrappedFn = function (...args) {
			const arg0 = args[0];

			if (arg0 === undefined || arg0 === null) {
				return arg0;
			}

			if (arg0.length > 1) {
				args = arg0;
			}

			const result = fn(args);

			// We're assuming the result is an array here.
			// see notice in conversions.js; don't use box types
			// in conversion functions.
			if (typeof result === 'object') {
				for (let len = result.length, i = 0; i < len; i++) {
					result[i] = Math.round(result[i]);
				}
			}

			return result;
		};

		// Preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	models.forEach(fromModel => {
		convert[fromModel] = {};

		Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
		Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

		const routes = route(fromModel);
		const routeModels = Object.keys(routes);

		routeModels.forEach(toModel => {
			const fn = routes[toModel];

			convert[fromModel][toModel] = wrapRounded(fn);
			convert[fromModel][toModel].raw = wrapRaw(fn);
		});
	});

	var colorConvert = convert;

	(function (module) {

	const wrapAnsi16 = (fn, offset) => (...args) => {
		const code = fn(...args);
		return `\u001B[${code + offset}m`;
	};

	const wrapAnsi256 = (fn, offset) => (...args) => {
		const code = fn(...args);
		return `\u001B[${38 + offset};5;${code}m`;
	};

	const wrapAnsi16m = (fn, offset) => (...args) => {
		const rgb = fn(...args);
		return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
	};

	const ansi2ansi = n => n;
	const rgb2rgb = (r, g, b) => [r, g, b];

	const setLazyProperty = (object, property, get) => {
		Object.defineProperty(object, property, {
			get: () => {
				const value = get();

				Object.defineProperty(object, property, {
					value,
					enumerable: true,
					configurable: true
				});

				return value;
			},
			enumerable: true,
			configurable: true
		});
	};

	/** @type {typeof import('color-convert')} */
	let colorConvert$1;
	const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
		if (colorConvert$1 === undefined) {
			colorConvert$1 = colorConvert;
		}

		const offset = isBackground ? 10 : 0;
		const styles = {};

		for (const [sourceSpace, suite] of Object.entries(colorConvert$1)) {
			const name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;
			if (sourceSpace === targetSpace) {
				styles[name] = wrap(identity, offset);
			} else if (typeof suite === 'object') {
				styles[name] = wrap(suite[targetSpace], offset);
			}
		}

		return styles;
	};

	function assembleStyles() {
		const codes = new Map();
		const styles = {
			modifier: {
				reset: [0, 0],
				// 21 isn't widely supported and 22 does the same thing
				bold: [1, 22],
				dim: [2, 22],
				italic: [3, 23],
				underline: [4, 24],
				inverse: [7, 27],
				hidden: [8, 28],
				strikethrough: [9, 29]
			},
			color: {
				black: [30, 39],
				red: [31, 39],
				green: [32, 39],
				yellow: [33, 39],
				blue: [34, 39],
				magenta: [35, 39],
				cyan: [36, 39],
				white: [37, 39],

				// Bright color
				blackBright: [90, 39],
				redBright: [91, 39],
				greenBright: [92, 39],
				yellowBright: [93, 39],
				blueBright: [94, 39],
				magentaBright: [95, 39],
				cyanBright: [96, 39],
				whiteBright: [97, 39]
			},
			bgColor: {
				bgBlack: [40, 49],
				bgRed: [41, 49],
				bgGreen: [42, 49],
				bgYellow: [43, 49],
				bgBlue: [44, 49],
				bgMagenta: [45, 49],
				bgCyan: [46, 49],
				bgWhite: [47, 49],

				// Bright color
				bgBlackBright: [100, 49],
				bgRedBright: [101, 49],
				bgGreenBright: [102, 49],
				bgYellowBright: [103, 49],
				bgBlueBright: [104, 49],
				bgMagentaBright: [105, 49],
				bgCyanBright: [106, 49],
				bgWhiteBright: [107, 49]
			}
		};

		// Alias bright black as gray (and grey)
		styles.color.gray = styles.color.blackBright;
		styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
		styles.color.grey = styles.color.blackBright;
		styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;

		for (const [groupName, group] of Object.entries(styles)) {
			for (const [styleName, style] of Object.entries(group)) {
				styles[styleName] = {
					open: `\u001B[${style[0]}m`,
					close: `\u001B[${style[1]}m`
				};

				group[styleName] = styles[styleName];

				codes.set(style[0], style[1]);
			}

			Object.defineProperty(styles, groupName, {
				value: group,
				enumerable: false
			});
		}

		Object.defineProperty(styles, 'codes', {
			value: codes,
			enumerable: false
		});

		styles.color.close = '\u001B[39m';
		styles.bgColor.close = '\u001B[49m';

		setLazyProperty(styles.color, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));
		setLazyProperty(styles.color, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));
		setLazyProperty(styles.color, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));
		setLazyProperty(styles.bgColor, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));
		setLazyProperty(styles.bgColor, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));
		setLazyProperty(styles.bgColor, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));

		return styles;
	}

	// Make the export immutable
	Object.defineProperty(module, 'exports', {
		enumerable: true,
		get: assembleStyles
	});
	}(ansiStyles$1));

	/*
	The MIT License (MIT)

	Copyright (c) 2016 CoderPuppy

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.

	*/
	var _endianness;
	function endianness() {
	  if (typeof _endianness === 'undefined') {
	    var a = new ArrayBuffer(2);
	    var b = new Uint8Array(a);
	    var c = new Uint16Array(a);
	    b[0] = 1;
	    b[1] = 2;
	    if (c[0] === 258) {
	      _endianness = 'BE';
	    } else if (c[0] === 513){
	      _endianness = 'LE';
	    } else {
	      throw new Error('unable to figure out endianess');
	    }
	  }
	  return _endianness;
	}

	function hostname() {
	  if (typeof global.location !== 'undefined') {
	    return global.location.hostname
	  } else return '';
	}

	function loadavg() {
	  return [];
	}

	function uptime() {
	  return 0;
	}

	function freemem() {
	  return Number.MAX_VALUE;
	}

	function totalmem() {
	  return Number.MAX_VALUE;
	}

	function cpus() {
	  return [];
	}

	function type() {
	  return 'Browser';
	}

	function release () {
	  if (typeof global.navigator !== 'undefined') {
	    return global.navigator.appVersion;
	  }
	  return '';
	}

	function networkInterfaces(){}
	function getNetworkInterfaces(){}

	function arch() {
	  return 'javascript';
	}

	function platform() {
	  return 'browser';
	}

	function tmpDir() {
	  return '/tmp';
	}
	var tmpdir = tmpDir;

	var EOL = '\n';
	var os$1 = {
	  EOL: EOL,
	  tmpdir: tmpdir,
	  tmpDir: tmpDir,
	  networkInterfaces:networkInterfaces,
	  getNetworkInterfaces: getNetworkInterfaces,
	  release: release,
	  type: type,
	  cpus: cpus,
	  totalmem: totalmem,
	  freemem: freemem,
	  uptime: uptime,
	  loadavg: loadavg,
	  hostname: hostname,
	  endianness: endianness,
	};

	var os$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		endianness: endianness,
		hostname: hostname,
		loadavg: loadavg,
		uptime: uptime,
		freemem: freemem,
		totalmem: totalmem,
		cpus: cpus,
		type: type,
		release: release,
		networkInterfaces: networkInterfaces,
		getNetworkInterfaces: getNetworkInterfaces,
		arch: arch,
		platform: platform,
		tmpDir: tmpDir,
		tmpdir: tmpdir,
		EOL: EOL,
		'default': os$1
	});

	var require$$0 = /*@__PURE__*/getAugmentedNamespace(os$2);

	// MIT lisence
	// from https://github.com/substack/tty-browserify/blob/1ba769a6429d242f36226538835b4034bf6b7886/index.js

	function isatty() {
	  return false;
	}

	function ReadStream() {
	  throw new Error('tty.ReadStream is not implemented');
	}

	function WriteStream() {
	  throw new Error('tty.ReadStream is not implemented');
	}

	var tty$1 = {
	  isatty: isatty,
	  ReadStream: ReadStream,
	  WriteStream: WriteStream
	};

	var tty$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		isatty: isatty,
		ReadStream: ReadStream,
		WriteStream: WriteStream,
		'default': tty$1
	});

	var require$$1 = /*@__PURE__*/getAugmentedNamespace(tty$2);

	var hasFlag$1 = (flag, argv = process.argv) => {
		const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
		const position = argv.indexOf(prefix + flag);
		const terminatorPosition = argv.indexOf('--');
		return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
	};

	const os = require$$0;
	const tty = require$$1;
	const hasFlag = hasFlag$1;

	const {env} = process;

	let forceColor;
	if (hasFlag('no-color') ||
		hasFlag('no-colors') ||
		hasFlag('color=false') ||
		hasFlag('color=never')) {
		forceColor = 0;
	} else if (hasFlag('color') ||
		hasFlag('colors') ||
		hasFlag('color=true') ||
		hasFlag('color=always')) {
		forceColor = 1;
	}

	if ('FORCE_COLOR' in env) {
		if (env.FORCE_COLOR === 'true') {
			forceColor = 1;
		} else if (env.FORCE_COLOR === 'false') {
			forceColor = 0;
		} else {
			forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
		}
	}

	function translateLevel(level) {
		if (level === 0) {
			return false;
		}

		return {
			level,
			hasBasic: true,
			has256: level >= 2,
			has16m: level >= 3
		};
	}

	function supportsColor(haveStream, streamIsTTY) {
		if (forceColor === 0) {
			return 0;
		}

		if (hasFlag('color=16m') ||
			hasFlag('color=full') ||
			hasFlag('color=truecolor')) {
			return 3;
		}

		if (hasFlag('color=256')) {
			return 2;
		}

		if (haveStream && !streamIsTTY && forceColor === undefined) {
			return 0;
		}

		const min = forceColor || 0;

		if (env.TERM === 'dumb') {
			return min;
		}

		if (process.platform === 'win32') {
			// Windows 10 build 10586 is the first Windows release that supports 256 colors.
			// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
			const osRelease = os.release().split('.');
			if (
				Number(osRelease[0]) >= 10 &&
				Number(osRelease[2]) >= 10586
			) {
				return Number(osRelease[2]) >= 14931 ? 3 : 2;
			}

			return 1;
		}

		if ('CI' in env) {
			if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
				return 1;
			}

			return min;
		}

		if ('TEAMCITY_VERSION' in env) {
			return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
		}

		if (env.COLORTERM === 'truecolor') {
			return 3;
		}

		if ('TERM_PROGRAM' in env) {
			const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

			switch (env.TERM_PROGRAM) {
				case 'iTerm.app':
					return version >= 3 ? 3 : 2;
				case 'Apple_Terminal':
					return 2;
				// No default
			}
		}

		if (/-256(color)?$/i.test(env.TERM)) {
			return 2;
		}

		if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
			return 1;
		}

		if ('COLORTERM' in env) {
			return 1;
		}

		return min;
	}

	function getSupportLevel(stream) {
		const level = supportsColor(stream, stream && stream.isTTY);
		return translateLevel(level);
	}

	var supportsColor_1 = {
		supportsColor: getSupportLevel,
		stdout: translateLevel(supportsColor(true, tty.isatty(1))),
		stderr: translateLevel(supportsColor(true, tty.isatty(2)))
	};

	const stringReplaceAll$1 = (string, substring, replacer) => {
		let index = string.indexOf(substring);
		if (index === -1) {
			return string;
		}

		const substringLength = substring.length;
		let endIndex = 0;
		let returnValue = '';
		do {
			returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
			endIndex = index + substringLength;
			index = string.indexOf(substring, endIndex);
		} while (index !== -1);

		returnValue += string.substr(endIndex);
		return returnValue;
	};

	const stringEncaseCRLFWithFirstIndex$1 = (string, prefix, postfix, index) => {
		let endIndex = 0;
		let returnValue = '';
		do {
			const gotCR = string[index - 1] === '\r';
			returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
			endIndex = index + 1;
			index = string.indexOf('\n', endIndex);
		} while (index !== -1);

		returnValue += string.substr(endIndex);
		return returnValue;
	};

	var util = {
		stringReplaceAll: stringReplaceAll$1,
		stringEncaseCRLFWithFirstIndex: stringEncaseCRLFWithFirstIndex$1
	};

	const TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
	const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
	const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
	const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;

	const ESCAPES = new Map([
		['n', '\n'],
		['r', '\r'],
		['t', '\t'],
		['b', '\b'],
		['f', '\f'],
		['v', '\v'],
		['0', '\0'],
		['\\', '\\'],
		['e', '\u001B'],
		['a', '\u0007']
	]);

	function unescape(c) {
		const u = c[0] === 'u';
		const bracket = c[1] === '{';

		if ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {
			return String.fromCharCode(parseInt(c.slice(1), 16));
		}

		if (u && bracket) {
			return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
		}

		return ESCAPES.get(c) || c;
	}

	function parseArguments(name, arguments_) {
		const results = [];
		const chunks = arguments_.trim().split(/\s*,\s*/g);
		let matches;

		for (const chunk of chunks) {
			const number = Number(chunk);
			if (!Number.isNaN(number)) {
				results.push(number);
			} else if ((matches = chunk.match(STRING_REGEX))) {
				results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
			} else {
				throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
			}
		}

		return results;
	}

	function parseStyle(style) {
		STYLE_REGEX.lastIndex = 0;

		const results = [];
		let matches;

		while ((matches = STYLE_REGEX.exec(style)) !== null) {
			const name = matches[1];

			if (matches[2]) {
				const args = parseArguments(name, matches[2]);
				results.push([name].concat(args));
			} else {
				results.push([name]);
			}
		}

		return results;
	}

	function buildStyle(chalk, styles) {
		const enabled = {};

		for (const layer of styles) {
			for (const style of layer.styles) {
				enabled[style[0]] = layer.inverse ? null : style.slice(1);
			}
		}

		let current = chalk;
		for (const [styleName, styles] of Object.entries(enabled)) {
			if (!Array.isArray(styles)) {
				continue;
			}

			if (!(styleName in current)) {
				throw new Error(`Unknown Chalk style: ${styleName}`);
			}

			current = styles.length > 0 ? current[styleName](...styles) : current[styleName];
		}

		return current;
	}

	var templates = (chalk, temporary) => {
		const styles = [];
		const chunks = [];
		let chunk = [];

		// eslint-disable-next-line max-params
		temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
			if (escapeCharacter) {
				chunk.push(unescape(escapeCharacter));
			} else if (style) {
				const string = chunk.join('');
				chunk = [];
				chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
				styles.push({inverse, styles: parseStyle(style)});
			} else if (close) {
				if (styles.length === 0) {
					throw new Error('Found extraneous } in Chalk template literal');
				}

				chunks.push(buildStyle(chalk, styles)(chunk.join('')));
				chunk = [];
				styles.pop();
			} else {
				chunk.push(character);
			}
		});

		chunks.push(chunk.join(''));

		if (styles.length > 0) {
			const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
			throw new Error(errMessage);
		}

		return chunks.join('');
	};

	const ansiStyles = ansiStyles$1.exports;
	const {stdout: stdoutColor, stderr: stderrColor} = supportsColor_1;
	const {
		stringReplaceAll,
		stringEncaseCRLFWithFirstIndex
	} = util;

	const {isArray: isArray$2} = Array;

	// `supportsColor.level` → `ansiStyles.color[name]` mapping
	const levelMapping = [
		'ansi',
		'ansi',
		'ansi256',
		'ansi16m'
	];

	const styles = Object.create(null);

	const applyOptions = (object, options = {}) => {
		if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
			throw new Error('The `level` option should be an integer from 0 to 3');
		}

		// Detect level if not set manually
		const colorLevel = stdoutColor ? stdoutColor.level : 0;
		object.level = options.level === undefined ? colorLevel : options.level;
	};

	class ChalkClass {
		constructor(options) {
			// eslint-disable-next-line no-constructor-return
			return chalkFactory(options);
		}
	}

	const chalkFactory = options => {
		const chalk = {};
		applyOptions(chalk, options);

		chalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);

		Object.setPrototypeOf(chalk, Chalk.prototype);
		Object.setPrototypeOf(chalk.template, chalk);

		chalk.template.constructor = () => {
			throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');
		};

		chalk.template.Instance = ChalkClass;

		return chalk.template;
	};

	function Chalk(options) {
		return chalkFactory(options);
	}

	for (const [styleName, style] of Object.entries(ansiStyles)) {
		styles[styleName] = {
			get() {
				const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
				Object.defineProperty(this, styleName, {value: builder});
				return builder;
			}
		};
	}

	styles.visible = {
		get() {
			const builder = createBuilder(this, this._styler, true);
			Object.defineProperty(this, 'visible', {value: builder});
			return builder;
		}
	};

	const usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];

	for (const model of usedModels) {
		styles[model] = {
			get() {
				const {level} = this;
				return function (...arguments_) {
					const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
					return createBuilder(this, styler, this._isEmpty);
				};
			}
		};
	}

	for (const model of usedModels) {
		const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
		styles[bgModel] = {
			get() {
				const {level} = this;
				return function (...arguments_) {
					const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
					return createBuilder(this, styler, this._isEmpty);
				};
			}
		};
	}

	const proto = Object.defineProperties(() => {}, {
		...styles,
		level: {
			enumerable: true,
			get() {
				return this._generator.level;
			},
			set(level) {
				this._generator.level = level;
			}
		}
	});

	const createStyler = (open, close, parent) => {
		let openAll;
		let closeAll;
		if (parent === undefined) {
			openAll = open;
			closeAll = close;
		} else {
			openAll = parent.openAll + open;
			closeAll = close + parent.closeAll;
		}

		return {
			open,
			close,
			openAll,
			closeAll,
			parent
		};
	};

	const createBuilder = (self, _styler, _isEmpty) => {
		const builder = (...arguments_) => {
			if (isArray$2(arguments_[0]) && isArray$2(arguments_[0].raw)) {
				// Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`
				return applyStyle(builder, chalkTag(builder, ...arguments_));
			}

			// Single argument is hot path, implicit coercion is faster than anything
			// eslint-disable-next-line no-implicit-coercion
			return applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));
		};

		// We alter the prototype because we must return a function, but there is
		// no way to create a function with a different prototype
		Object.setPrototypeOf(builder, proto);

		builder._generator = self;
		builder._styler = _styler;
		builder._isEmpty = _isEmpty;

		return builder;
	};

	const applyStyle = (self, string) => {
		if (self.level <= 0 || !string) {
			return self._isEmpty ? '' : string;
		}

		let styler = self._styler;

		if (styler === undefined) {
			return string;
		}

		const {openAll, closeAll} = styler;
		if (string.indexOf('\u001B') !== -1) {
			while (styler !== undefined) {
				// Replace any instances already present with a re-opening code
				// otherwise only the part of the string until said closing code
				// will be colored, and the rest will simply be 'plain'.
				string = stringReplaceAll(string, styler.close, styler.open);

				styler = styler.parent;
			}
		}

		// We can move both next actions out of loop, because remaining actions in loop won't have
		// any/visible effect on parts we add here. Close the styling before a linebreak and reopen
		// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92
		const lfIndex = string.indexOf('\n');
		if (lfIndex !== -1) {
			string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
		}

		return openAll + string + closeAll;
	};

	let template;
	const chalkTag = (chalk, ...strings) => {
		const [firstString] = strings;

		if (!isArray$2(firstString) || !isArray$2(firstString.raw)) {
			// If chalk() was called by itself or with a string,
			// return the string itself as a string.
			return strings.join(' ');
		}

		const arguments_ = strings.slice(1);
		const parts = [firstString.raw[0]];

		for (let i = 1; i < firstString.length; i++) {
			parts.push(
				String(arguments_[i - 1]).replace(/[{}\\]/g, '\\$&'),
				String(firstString.raw[i])
			);
		}

		if (template === undefined) {
			template = templates;
		}

		return template(chalk, parts.join(''));
	};

	Object.defineProperties(Chalk.prototype, styles);

	const chalk = Chalk(); // eslint-disable-line new-cap
	chalk.supportsColor = stdoutColor;
	chalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0}); // eslint-disable-line new-cap
	chalk.stderr.supportsColor = stderrColor;

	var source = chalk;

	function noop(){}

	var console$1 = global.console ? global.console : {
	  log: noop,
	  info: noop,
	  warn: noop,
	  error: noop,
	  dir: noop,
	  assert: noop,
	  time: noop,
	  timeEnd: noop,
	  trace: noop
	};

	var console$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': console$1
	});

	var require$$2 = /*@__PURE__*/getAugmentedNamespace(console$2);

	var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(debug$1, "__esModule", { value: true });
	debug$1.DebugLogger = debug$1.newDebugLogger = void 0;
	const chalk_1 = __importDefault$2(source);
	const utils_1$1 = utils;
	function indentString(indentLevel) {
	    let str = "";
	    for (let i = 0; i < indentLevel; i++) {
	        str += chalk_1.default.blackBright("⎸ ");
	    }
	    return str;
	}
	function isEnabled(name) {
	    const v = process.env.APOLLO_FEDERATION_DEBUG;
	    const bool = (0, utils_1$1.validateStringContainsBoolean)(v);
	    if (bool !== undefined) {
	        return bool;
	    }
	    const enabledNames = v.split(',').map(n => n.trim());
	    return enabledNames.includes(name);
	}
	let currentIndentLevel = 0;
	let currentIndentation = '';
	let maxLoggerNameLength = 0;
	const createdLoggers = [];
	function newDebugLogger(name) {
	    const enabled = isEnabled(name);
	    const created = new DebugLogger(name, enabled);
	    if (enabled) {
	        commonjsGlobal.console = require$$2;
	        createdLoggers.push(created);
	        maxLoggerNameLength = Math.max(maxLoggerNameLength, name.length);
	        for (const logger of createdLoggers) {
	            DebugLogger.prototype['updateHeader'].call(logger, maxLoggerNameLength);
	        }
	    }
	    return created;
	}
	debug$1.newDebugLogger = newDebugLogger;
	function increaseIndentation() {
	    currentIndentLevel++;
	    currentIndentation = indentString(currentIndentLevel);
	}
	function decreaseIndentation() {
	    if (currentIndentLevel > 0) {
	        currentIndentLevel--;
	        currentIndentation = indentString(currentIndentLevel);
	    }
	}
	class DebugLogger {
	    constructor(name, enabled) {
	        this.name = name;
	        this.enabled = enabled;
	        this.header = chalk_1.default.blackBright(`[${name}] `);
	    }
	    updateHeader(maxLength) {
	        let padding = "";
	        if (maxLength > this.name.length) {
	            const toPad = maxLength - this.name.length;
	            for (let i = 0; i < toPad; i++) {
	                padding += " ";
	            }
	        }
	        this.header = chalk_1.default.blackBright('[' + padding + this.name + '] ');
	    }
	    doLog(str) {
	        const indent = this.header + currentIndentation;
	        const withIndentedNewlines = str.replace(/\n/g, '\n' + indent + '  ');
	        console.log(indent + withIndentedNewlines);
	    }
	    log(message, prefix = chalk_1.default.yellow('• ')) {
	        if (!this.enabled)
	            return this;
	        if (typeof message !== 'string') {
	            message = message();
	        }
	        this.doLog(prefix + message);
	        return this;
	    }
	    groupedValues(values, printFn, initialMessage) {
	        if (!this.enabled)
	            return this;
	        this.group(initialMessage);
	        for (const value of values) {
	            this.doLog('- ' + printFn(value));
	        }
	        return this.groupEnd();
	    }
	    groupedEntries(map, keyPrintFn, valuePrintFn) {
	        if (!this.enabled)
	            return this;
	        this.group();
	        for (const [k, v] of map.entries()) {
	            this.doLog('- ' + keyPrintFn(k) + ': ' + valuePrintFn(v));
	        }
	        return this.groupEnd();
	    }
	    group(openingMessage) {
	        if (this.enabled) {
	            if (openingMessage) {
	                this.log(openingMessage, chalk_1.default.blue('‣ '));
	            }
	            increaseIndentation();
	        }
	        return this;
	    }
	    groupEnd(closingMessage) {
	        if (!this.enabled) {
	            return this;
	        }
	        decreaseIndentation();
	        if (closingMessage) {
	            this.log(closingMessage, chalk_1.default.green('⇒ '));
	        }
	        return this;
	    }
	}
	debug$1.DebugLogger = DebugLogger;

	var joinSpec$1 = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JOIN_VERSIONS = exports.JoinSpecDefinition = exports.joinIdentity = void 0;
	const graphql_1 = require$$2$2;
	const coreSpec_1 = coreSpec$1;
	const definitions_1 = definitions;
	const utils_1 = utils;
	exports.joinIdentity = 'https://specs.apollo.dev/join';
	function sanitizeGraphQLName(name) {
	    const alphaNumericUnderscoreOnly = name.replace(/[\W]/g, '_');
	    const noNumericFirstChar = alphaNumericUnderscoreOnly.match(/^\d/)
	        ? '_' + alphaNumericUnderscoreOnly
	        : alphaNumericUnderscoreOnly;
	    const noUnderscoreNumericEnding = noNumericFirstChar.match(/_\d+$/)
	        ? noNumericFirstChar + '_'
	        : noNumericFirstChar;
	    const toUpper = noUnderscoreNumericEnding.toLocaleUpperCase();
	    return toUpper;
	}
	class JoinSpecDefinition extends coreSpec_1.FeatureDefinition {
	    constructor(version) {
	        super(new coreSpec_1.FeatureUrl(exports.joinIdentity, 'join', version));
	    }
	    isV01() {
	        return this.version.equals(new coreSpec_1.FeatureVersion(0, 1));
	    }
	    addElementsToSchema(schema) {
	        const joinGraph = this.addDirective(schema, 'graph').addLocations(graphql_1.DirectiveLocation.ENUM_VALUE);
	        joinGraph.addArgument('name', new definitions_1.NonNullType(schema.stringType()));
	        joinGraph.addArgument('url', new definitions_1.NonNullType(schema.stringType()));
	        const graphEnum = this.addEnumType(schema, 'Graph');
	        const joinFieldSet = this.addScalarType(schema, 'FieldSet');
	        const joinType = this.addDirective(schema, 'type').addLocations(graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE, graphql_1.DirectiveLocation.UNION, graphql_1.DirectiveLocation.ENUM, graphql_1.DirectiveLocation.INPUT_OBJECT, graphql_1.DirectiveLocation.SCALAR);
	        if (!this.isV01()) {
	            joinType.repeatable = true;
	        }
	        joinType.addArgument('graph', new definitions_1.NonNullType(graphEnum));
	        joinType.addArgument('key', joinFieldSet);
	        if (!this.isV01()) {
	            joinType.addArgument('extension', new definitions_1.NonNullType(schema.booleanType()), false);
	        }
	        const joinField = this.addDirective(schema, 'field').addLocations(graphql_1.DirectiveLocation.FIELD_DEFINITION, graphql_1.DirectiveLocation.INPUT_FIELD_DEFINITION);
	        joinField.repeatable = true;
	        joinField.addArgument('graph', new definitions_1.NonNullType(graphEnum));
	        joinField.addArgument('requires', joinFieldSet);
	        joinField.addArgument('provides', joinFieldSet);
	        if (!this.isV01()) {
	            joinField.addArgument('type', schema.stringType());
	            joinField.addArgument('external', schema.booleanType());
	        }
	        if (!this.isV01()) {
	            const joinImplements = this.addDirective(schema, 'implements').addLocations(graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE);
	            joinImplements.repeatable = true;
	            joinImplements.addArgument('graph', new definitions_1.NonNullType(graphEnum));
	            joinImplements.addArgument('interface', new definitions_1.NonNullType(schema.stringType()));
	        }
	        if (this.isV01()) {
	            const joinOwner = this.addDirective(schema, 'owner').addLocations(graphql_1.DirectiveLocation.OBJECT);
	            joinOwner.addArgument('graph', new definitions_1.NonNullType(graphEnum));
	        }
	    }
	    populateGraphEnum(schema, subgraphs) {
	        const sanitizedNameToSubgraphs = new utils_1.MultiMap();
	        for (const subgraph of subgraphs) {
	            const sanitized = sanitizeGraphQLName(subgraph.name);
	            sanitizedNameToSubgraphs.add(sanitized, subgraph);
	        }
	        const subgraphToEnumName = new Map();
	        for (const [sanitizedName, subgraphsForName] of sanitizedNameToSubgraphs) {
	            if (subgraphsForName.length === 1) {
	                subgraphToEnumName.set(subgraphsForName[0].name, sanitizedName);
	            }
	            else {
	                for (const [index, subgraph] of subgraphsForName.entries()) {
	                    subgraphToEnumName.set(subgraph.name, `${sanitizedName}_${index + 1}`);
	                }
	            }
	        }
	        const graphEnum = this.graphEnum(schema);
	        const graphDirective = this.graphDirective(schema);
	        for (const subgraph of subgraphs) {
	            const enumValue = graphEnum.addValue(subgraphToEnumName.get(subgraph.name));
	            enumValue.applyDirective(graphDirective, { name: subgraph.name, url: subgraph.url });
	        }
	        return subgraphToEnumName;
	    }
	    fieldSetScalar(schema) {
	        return this.type(schema, 'FieldSet');
	    }
	    graphEnum(schema) {
	        return this.type(schema, 'Graph');
	    }
	    graphDirective(schema) {
	        return this.directive(schema, 'graph');
	    }
	    typeDirective(schema) {
	        return this.directive(schema, 'type');
	    }
	    implementsDirective(schema) {
	        return this.directive(schema, 'implements');
	    }
	    fieldDirective(schema) {
	        return this.directive(schema, 'field');
	    }
	    ownerDirective(schema) {
	        return this.directive(schema, 'owner');
	    }
	}
	exports.JoinSpecDefinition = JoinSpecDefinition;
	exports.JOIN_VERSIONS = new coreSpec_1.FeatureDefinitions(exports.joinIdentity)
	    .add(new JoinSpecDefinition(new coreSpec_1.FeatureVersion(0, 1)))
	    .add(new JoinSpecDefinition(new coreSpec_1.FeatureVersion(0, 2)));

	}(joinSpec$1));

	var supergraphs = {};

	var extractSubgraphsFromSupergraph$1 = {};

	var empty = {};

	var empty$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': empty
	});

	var require$$10 = /*@__PURE__*/getAugmentedNamespace(empty$1);

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	function resolve() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : '/';

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	}
	// path.normalize(path)
	// posix version
	function normalize(path) {
	  var isPathAbsolute = isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isPathAbsolute).join('/');

	  if (!path && !isPathAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isPathAbsolute ? '/' : '') + path;
	}
	// posix version
	function isAbsolute(path) {
	  return path.charAt(0) === '/';
	}

	// posix version
	function join() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	}


	// path.relative(from, to)
	// posix version
	function relative(from, to) {
	  from = resolve(from).substr(1);
	  to = resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	}

	var sep = '/';
	var delimiter = ':';

	function dirname(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	}

	function basename(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	}


	function extname(path) {
	  return splitPath(path)[3];
	}
	var path = {
	  extname: extname,
	  basename: basename,
	  dirname: dirname,
	  sep: sep,
	  delimiter: delimiter,
	  relative: relative,
	  join: join,
	  isAbsolute: isAbsolute,
	  normalize: normalize,
	  resolve: resolve
	};
	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b' ?
	    function (str, start, len) { return str.substr(start, len) } :
	    function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	var path$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		resolve: resolve,
		normalize: normalize,
		isAbsolute: isAbsolute,
		join: join,
		relative: relative,
		sep: sep,
		delimiter: delimiter,
		dirname: dirname,
		basename: basename,
		extname: extname,
		'default': path
	});

	var require$$11 = /*@__PURE__*/getAugmentedNamespace(path$1);

	var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(extractSubgraphsFromSupergraph$1, "__esModule", { value: true });
	extractSubgraphsFromSupergraph$1.extractSubgraphsFromSupergraph = extractSubgraphsFromSupergraph$1.extractSubgraphsNamesAndUrlsFromSupergraph = void 0;
	const definitions_1$1 = definitions;
	const federation_1 = federation;
	const coreSpec_1$1 = coreSpec$1;
	const federation_2 = federation;
	const utils_1 = utils;
	const supergraphs_1 = supergraphs;
	const buildSchema_1$1 = buildSchema$1;
	const graphql_1$3 = require$$2$2;
	const operations_1 = operations;
	const types_1 = types;
	const print_1 = print;
	const fs_1 = __importDefault$1(require$$10);
	const path_1 = __importDefault$1(require$$11);
	const utils_2 = utils;
	function filteredTypes(supergraph, joinSpec, coreSpec) {
	    return supergraph.types().filter(t => !joinSpec.isSpecType(t) && !coreSpec.isSpecType(t));
	}
	function extractSubgraphsNamesAndUrlsFromSupergraph(supergraph) {
	    const [_, joinSpec] = (0, supergraphs_1.validateSupergraph)(supergraph);
	    const [subgraphs] = collectEmptySubgraphs(supergraph, joinSpec);
	    return subgraphs.values().map(subgraph => { return { name: subgraph.name, url: subgraph.url }; });
	}
	extractSubgraphsFromSupergraph$1.extractSubgraphsNamesAndUrlsFromSupergraph = extractSubgraphsNamesAndUrlsFromSupergraph;
	function collectEmptySubgraphs(supergraph, joinSpec) {
	    const subgraphs = new federation_2.Subgraphs();
	    const graphDirective = joinSpec.graphDirective(supergraph);
	    const graphEnum = joinSpec.graphEnum(supergraph);
	    const graphEnumNameToSubgraphName = new Map();
	    for (const value of graphEnum.values) {
	        const graphApplications = value.appliedDirectivesOf(graphDirective);
	        if (!graphApplications.length) {
	            throw new Error(`Value ${value} of join__Graph enum has no @join__graph directive`);
	        }
	        const info = graphApplications[0].arguments();
	        const subgraph = new federation_2.Subgraph(info.name, info.url, new definitions_1$1.Schema(federation_1.federationBuiltIns), false);
	        subgraphs.add(subgraph);
	        graphEnumNameToSubgraphName.set(value.name, info.name);
	    }
	    return [subgraphs, graphEnumNameToSubgraphName];
	}
	function extractSubgraphsFromSupergraph(supergraph) {
	    const [coreFeatures, joinSpec] = (0, supergraphs_1.validateSupergraph)(supergraph);
	    const isFed1 = joinSpec.version.equals(new coreSpec_1$1.FeatureVersion(0, 1));
	    const [subgraphs, graphEnumNameToSubgraphName] = collectEmptySubgraphs(supergraph, joinSpec);
	    const typeDirective = joinSpec.typeDirective(supergraph);
	    const implementsDirective = joinSpec.implementsDirective(supergraph);
	    for (const type of filteredTypes(supergraph, joinSpec, coreFeatures.coreDefinition)) {
	        const typeApplications = type.appliedDirectivesOf(typeDirective);
	        if (!typeApplications.length) {
	            subgraphs.values().map(sg => sg.schema).forEach(schema => schema.addType((0, definitions_1$1.newNamedType)(type.kind, type.name)));
	        }
	        else {
	            for (const application of typeApplications) {
	                const args = application.arguments();
	                const subgraphName = graphEnumNameToSubgraphName.get(args.graph);
	                const schema = subgraphs.get(subgraphName).schema;
	                let subgraphType = schema.type(type.name);
	                if (!subgraphType) {
	                    subgraphType = schema.addType((0, definitions_1$1.newNamedType)(type.kind, type.name));
	                }
	                if (args.key) {
	                    const directive = subgraphType.applyDirective('key', { 'fields': args.key });
	                    if (args.extension) {
	                        directive.setOfExtension(subgraphType.newExtension());
	                    }
	                }
	            }
	        }
	    }
	    const ownerDirective = joinSpec.ownerDirective(supergraph);
	    const fieldDirective = joinSpec.fieldDirective(supergraph);
	    for (const type of filteredTypes(supergraph, joinSpec, coreFeatures.coreDefinition)) {
	        switch (type.kind) {
	            case 'ObjectType':
	            case 'InterfaceType':
	                const addedInterfaces = [];
	                const implementsApplications = implementsDirective ? type.appliedDirectivesOf(implementsDirective) : [];
	                for (const application of implementsApplications) {
	                    const args = application.arguments();
	                    const subgraph = subgraphs.get(graphEnumNameToSubgraphName.get(args.graph));
	                    const schema = subgraph.schema;
	                    schema.type(type.name).addImplementedInterface(args.interface);
	                    addedInterfaces.push(args.interface);
	                }
	                for (const implementations of type.interfaceImplementations()) {
	                    const name = implementations.interface.name;
	                    if (!addedInterfaces.includes(name)) {
	                        for (const subgraph of subgraphs) {
	                            const subgraphType = subgraph.schema.type(type.name);
	                            const subgraphItf = subgraph.schema.type(name);
	                            if (subgraphType && subgraphItf) {
	                                subgraphType.addImplementedInterface(name);
	                            }
	                        }
	                    }
	                }
	            case 'InputObjectType':
	                for (const field of type.fields()) {
	                    const fieldApplications = field.appliedDirectivesOf(fieldDirective);
	                    if (!fieldApplications.length) {
	                        const ownerApplications = ownerDirective ? type.appliedDirectivesOf(ownerDirective) : [];
	                        if (!ownerApplications.length) {
	                            const fieldBaseType = (0, definitions_1$1.baseType)(field.type);
	                            for (const subgraph of subgraphs) {
	                                if (subgraph.schema.type(fieldBaseType.name)) {
	                                    addSubgraphField(field, subgraph);
	                                }
	                            }
	                        }
	                        else {
	                            (0, utils_1.assert)(ownerApplications.length == 1, () => `Found multiple join__owner directives on type ${type}`);
	                            const subgraph = subgraphs.get(graphEnumNameToSubgraphName.get(ownerApplications[0].arguments().graph));
	                            const subgraphField = addSubgraphField(field, subgraph);
	                            (0, utils_1.assert)(subgraphField, () => `Found join__owner directive on ${type} but no corresponding join__type`);
	                        }
	                    }
	                    else {
	                        for (const application of fieldApplications) {
	                            const args = application.arguments();
	                            const subgraph = subgraphs.get(graphEnumNameToSubgraphName.get(args.graph));
	                            const subgraphField = addSubgraphField(field, subgraph, args.type);
	                            (0, utils_1.assert)(subgraphField, () => `Found join__field directive for graph ${subgraph.name} on field ${field.coordinate} but no corresponding join__type on ${type}`);
	                            if (args.requires) {
	                                subgraphField.applyDirective('requires', { 'fields': args.requires });
	                            }
	                            if (args.provides) {
	                                subgraphField.applyDirective('provides', { 'fields': args.provides });
	                            }
	                            if (args.external) {
	                                subgraphField.applyDirective('external');
	                            }
	                        }
	                    }
	                }
	                break;
	            case 'EnumType':
	                for (const subgraph of subgraphs) {
	                    const subgraphEnum = subgraph.schema.type(type.name);
	                    if (!subgraphEnum) {
	                        continue;
	                    }
	                    (0, utils_1.assert)((0, definitions_1$1.isEnumType)(subgraphEnum), () => `${subgraphEnum} should be an enum but found a ${subgraphEnum.kind}`);
	                    for (const value of type.values) {
	                        subgraphEnum.addValue(value.name);
	                    }
	                }
	                break;
	            case 'UnionType':
	                for (const subgraph of subgraphs) {
	                    const subgraphUnion = subgraph.schema.type(type.name);
	                    if (!subgraphUnion) {
	                        continue;
	                    }
	                    (0, utils_1.assert)((0, definitions_1$1.isUnionType)(subgraphUnion), () => `${subgraphUnion} should be an enum but found a ${subgraphUnion.kind}`);
	                    for (const memberType of type.types()) {
	                        const subgraphType = subgraph.schema.type(memberType.name);
	                        if (subgraphType) {
	                            subgraphUnion.addType(subgraphType);
	                        }
	                    }
	                }
	                break;
	        }
	    }
	    for (const subgraph of subgraphs) {
	        if (isFed1) {
	            addExternalFields(subgraph, supergraph, isFed1);
	        }
	        removeNeedlessProvides(subgraph);
	        for (const type of subgraph.schema.types()) {
	            switch (type.kind) {
	                case 'ObjectType':
	                case 'InterfaceType':
	                case 'InputObjectType':
	                    if (!type.hasFields()) {
	                        type.removeRecursive();
	                    }
	                    break;
	                case 'UnionType':
	                    if (type.membersCount() === 0) {
	                        type.remove();
	                    }
	                    break;
	            }
	        }
	    }
	    if (isFed1) {
	        for (const subgraph of subgraphs) {
	            for (const itf of subgraph.schema.types('InterfaceType')) {
	                const implementations = itf.possibleRuntimeTypes();
	                for (const field of itf.fields()) {
	                    if (!implementations.every(implem => implem.field(field.name))) {
	                        field.remove();
	                    }
	                }
	                if (!itf.hasFields()) {
	                    itf.remove();
	                }
	            }
	        }
	    }
	    for (const subgraph of subgraphs) {
	        try {
	            subgraph.schema.validate();
	        }
	        catch (e) {
	            if (isFed1) {
	                const msg = `Error extracting subgraph ${subgraph.name} from the supergraph: this might due to errors in subgraphs that were mistakenly ignored by federation 0.x versions but are rejected by federation 2.\n`
	                    + 'Please try composing your subgraphs with federation 2: this should help precisely pinpoint the errors and generate a correct federation 2 supergraph.';
	                throw new Error(`${msg}.\n\nDetails:\n${errorToString(e, subgraph.name)}`);
	            }
	            else {
	                const msg = `Unexpected error extracting subgraph ${subgraph.name} from the supergraph: this is either a bug, or the supergraph has been corrupted.`;
	                const dumpMsg = maybeDumpSubgraphSchema(subgraph);
	                throw new Error(`${msg}.\n\nDetails:\n${errorToString(e, subgraph.name)}\n\n${dumpMsg}`);
	            }
	        }
	    }
	    return subgraphs;
	}
	extractSubgraphsFromSupergraph$1.extractSubgraphsFromSupergraph = extractSubgraphsFromSupergraph;
	const DEBUG_SUBGRAPHS_ENV_VARIABLE_NAME = 'APOLLO_FEDERATION_DEBUG_SUBGRAPHS';
	function maybeDumpSubgraphSchema(subgraph) {
	    const shouldDump = !!(0, utils_2.validateStringContainsBoolean)(process.env[DEBUG_SUBGRAPHS_ENV_VARIABLE_NAME]);
	    if (!shouldDump) {
	        return `Re-run with environment variable '${DEBUG_SUBGRAPHS_ENV_VARIABLE_NAME}' set to 'true' to extract the invalid subgraph`;
	    }
	    try {
	        const filename = `extracted-subgraph-${subgraph.name}-${Date.now()}.graphql`;
	        const file = path_1.default.resolve(filename);
	        if (fs_1.default.existsSync(file)) {
	            throw new Error(`candidate file ${filename} already existed`);
	        }
	        fs_1.default.writeFileSync(file, (0, print_1.printSchema)(subgraph.schema));
	        return `The (invalid) extracted subgraph has been written in: ${file}.`;
	    }
	    catch (e2) {
	        return `Was not able to print generated subgraph because: ${errorToString(e2, subgraph.name)}`;
	    }
	}
	function errorToString(e, subgraphName) {
	    return e instanceof graphql_1$3.GraphQLError ? (0, federation_1.addSubgraphToError)(e, subgraphName).toString() : String(e);
	}
	function addSubgraphField(supergraphField, subgraph, encodedType) {
	    if (supergraphField instanceof definitions_1$1.FieldDefinition) {
	        return addSubgraphObjectOrInterfaceField(supergraphField, subgraph, encodedType);
	    }
	    else {
	        return addSubgraphInputField(supergraphField, subgraph, encodedType);
	    }
	}
	function addSubgraphObjectOrInterfaceField(supergraphField, subgraph, encodedType) {
	    const subgraphType = subgraph.schema.type(supergraphField.parent.name);
	    if (subgraphType) {
	        const copiedType = encodedType
	            ? decodeType(encodedType, subgraph.schema, subgraph.name)
	            : copyType(supergraphField.type, subgraph.schema, subgraph.name);
	        const field = subgraphType.addField(supergraphField.name, copiedType);
	        for (const arg of supergraphField.arguments()) {
	            field.addArgument(arg.name, copyType(arg.type, subgraph.schema, subgraph.name), arg.defaultValue);
	        }
	        return field;
	    }
	    else {
	        return undefined;
	    }
	}
	function addSubgraphInputField(supergraphField, subgraph, encodedType) {
	    const subgraphType = subgraph.schema.type(supergraphField.parent.name);
	    if (subgraphType) {
	        const copiedType = encodedType
	            ? decodeType(encodedType, subgraph.schema, subgraph.name)
	            : copyType(supergraphField.type, subgraph.schema, subgraph.name);
	        return subgraphType.addField(supergraphField.name, copiedType);
	    }
	    else {
	        return undefined;
	    }
	}
	function decodeType(encodedType, subgraph, subgraphName) {
	    try {
	        return (0, buildSchema_1$1.builtTypeReference)(encodedType, subgraph);
	    }
	    catch (e) {
	        (0, utils_1.assert)(false, () => `Cannot parse type "${encodedType}" in subgraph ${subgraphName}: ${e}`);
	    }
	}
	function copyType(type, subgraph, subgraphName) {
	    switch (type.kind) {
	        case 'ListType':
	            return new definitions_1$1.ListType(copyType(type.ofType, subgraph, subgraphName));
	        case 'NonNullType':
	            return new definitions_1$1.NonNullType(copyType(type.ofType, subgraph, subgraphName));
	        default:
	            const subgraphType = subgraph.type(type.name);
	            (0, utils_1.assert)(subgraphType, () => `Cannot find type ${type.name} in subgraph ${subgraphName}`);
	            return subgraphType;
	    }
	}
	function addExternalFields(subgraph, supergraph, isFed1) {
	    for (const type of subgraph.schema.types()) {
	        if (!(0, definitions_1$1.isObjectType)(type) && !(0, definitions_1$1.isInterfaceType)(type)) {
	            continue;
	        }
	        for (const keyApplication of type.appliedDirectivesOf(federation_1.federationBuiltIns.keyDirective(subgraph.schema))) {
	            const forceNonExternal = isFed1 || !!keyApplication.ofExtension();
	            addExternalFieldsFromDirectiveFieldSet(subgraph, type, keyApplication, supergraph, forceNonExternal);
	        }
	        for (const field of type.fields()) {
	            for (const requiresApplication of field.appliedDirectivesOf(federation_1.federationBuiltIns.requiresDirective(subgraph.schema))) {
	                addExternalFieldsFromDirectiveFieldSet(subgraph, type, requiresApplication, supergraph);
	            }
	            const fieldBaseType = (0, definitions_1$1.baseType)(field.type);
	            for (const providesApplication of field.appliedDirectivesOf(federation_1.federationBuiltIns.providesDirective(subgraph.schema))) {
	                (0, utils_1.assert)((0, definitions_1$1.isObjectType)(fieldBaseType) || (0, definitions_1$1.isInterfaceType)(fieldBaseType), () => `Found @provides on field ${field.coordinate} whose type ${field.type} (${fieldBaseType.kind}) is not an object or interface `);
	                addExternalFieldsFromDirectiveFieldSet(subgraph, fieldBaseType, providesApplication, supergraph);
	            }
	        }
	        addExternalFieldsFromInterface(type);
	    }
	}
	function addExternalFieldsFromDirectiveFieldSet(subgraph, parentType, directive, supergraph, forceNonExternal = false) {
	    const external = federation_1.federationBuiltIns.externalDirective(subgraph.schema);
	    const accessor = function (type, fieldName) {
	        const field = type.field(fieldName);
	        if (field) {
	            if (forceNonExternal && field.hasAppliedDirective(external)) {
	                field.appliedDirectivesOf(external).forEach(d => d.remove());
	            }
	            return field;
	        }
	        (0, utils_1.assert)(!(0, definitions_1$1.isUnionType)(type), () => `Shouldn't select field ${fieldName} from union type ${type}`);
	        const supergraphType = supergraph.type(type.name);
	        const supergraphField = supergraphType.field(fieldName);
	        (0, utils_1.assert)(supergraphField, () => `No field named ${fieldName} found on type ${type.name} in the supergraph`);
	        const created = addSubgraphObjectOrInterfaceField(supergraphField, subgraph);
	        if (!forceNonExternal) {
	            created.applyDirective(external);
	        }
	        return created;
	    };
	    (0, federation_1.parseFieldSetArgument)(parentType, directive, accessor);
	}
	function addExternalFieldsFromInterface(type) {
	    for (const itf of type.interfaces()) {
	        for (const field of itf.fields()) {
	            const typeField = type.field(field.name);
	            if (!typeField) {
	                copyFieldAsExternal(field, type);
	            }
	            else if (typeField.hasAppliedDirective(federation_1.externalDirectiveName)) {
	                maybeUpdateFieldForInterface(typeField, field);
	            }
	        }
	    }
	}
	function copyFieldAsExternal(field, type) {
	    const newField = type.addField(field.name, field.type);
	    for (const arg of field.arguments()) {
	        newField.addArgument(arg.name, arg.type, arg.defaultValue);
	    }
	    newField.applyDirective(federation_1.externalDirectiveName);
	}
	function maybeUpdateFieldForInterface(toModify, itfField) {
	    if (!(0, types_1.isSubtype)(itfField.type, toModify.type)) {
	        (0, utils_1.assert)((0, types_1.isSubtype)(toModify.type, itfField.type), () => `For ${toModify.coordinate}, expected ${itfField.type} and ${toModify.type} to be in a subtyping relationship`);
	        toModify.type = itfField.type;
	    }
	}
	function removeNeedlessProvides(subgraph) {
	    for (const type of subgraph.schema.types()) {
	        if (!(0, definitions_1$1.isObjectType)(type) && !(0, definitions_1$1.isInterfaceType)(type)) {
	            continue;
	        }
	        const providesDirective = federation_1.federationBuiltIns.providesDirective(subgraph.schema);
	        for (const field of type.fields()) {
	            const fieldBaseType = (0, definitions_1$1.baseType)(field.type);
	            for (const providesApplication of field.appliedDirectivesOf(providesDirective)) {
	                const selection = (0, federation_1.parseFieldSetArgument)(fieldBaseType, providesApplication);
	                if (selectsNonExternalLeafField(selection)) {
	                    providesApplication.remove();
	                    const updated = withoutNonExternalLeafFields(selection);
	                    if (!updated.isEmpty()) {
	                        field.applyDirective(providesDirective, { fields: updated.toString(true, false) });
	                    }
	                }
	            }
	        }
	    }
	}
	function isExternalOrHasExternalImplementations(field) {
	    if (field.hasAppliedDirective(federation_1.externalDirectiveName)) {
	        return true;
	    }
	    const parentType = field.parent;
	    if ((0, definitions_1$1.isInterfaceType)(parentType)) {
	        for (const implem of parentType.possibleRuntimeTypes()) {
	            const fieldInImplem = implem.field(field.name);
	            if (fieldInImplem && fieldInImplem.hasAppliedDirective(federation_1.externalDirectiveName)) {
	                return true;
	            }
	        }
	    }
	    return false;
	}
	function selectsNonExternalLeafField(selection) {
	    return selection.selections().some(s => {
	        if (s.kind === 'FieldSelection') {
	            if (isExternalOrHasExternalImplementations(s.field.definition)) {
	                return false;
	            }
	            return !s.selectionSet || selectsNonExternalLeafField(s.selectionSet);
	        }
	        else {
	            return selectsNonExternalLeafField(s.selectionSet);
	        }
	    });
	}
	function withoutNonExternalLeafFields(selectionSet) {
	    const newSelectionSet = new operations_1.SelectionSet(selectionSet.parentType);
	    for (const selection of selectionSet.selections()) {
	        if (selection.kind === 'FieldSelection') {
	            if (isExternalOrHasExternalImplementations(selection.field.definition)) {
	                newSelectionSet.add(selection);
	                continue;
	            }
	        }
	        if (selection.selectionSet) {
	            const updated = withoutNonExternalLeafFields(selection.selectionSet);
	            if (!updated.isEmpty()) {
	                newSelectionSet.add((0, operations_1.selectionOfElement)(selection.element(), updated));
	            }
	        }
	    }
	    return newSelectionSet;
	}

	Object.defineProperty(supergraphs, "__esModule", { value: true });
	supergraphs.isFed1Supergraph = supergraphs.validateSupergraph = supergraphs.buildSupergraphSchema = supergraphs.ErrForUnsupported = supergraphs.ErrUnsupportedFeature = void 0;
	const graphql_1$2 = require$$2$2;
	const core_schema_1 = dist$1;
	const coreSpec_1 = coreSpec$1;
	const definitions_1 = definitions;
	const joinSpec_1 = joinSpec$1;
	const buildSchema_1 = buildSchema$1;
	const extractSubgraphsFromSupergraph_1 = extractSubgraphsFromSupergraph$1;
	const SUPPORTED_FEATURES = new Set([
	    'https://specs.apollo.dev/core/v0.1',
	    'https://specs.apollo.dev/core/v0.2',
	    'https://specs.apollo.dev/join/v0.1',
	    'https://specs.apollo.dev/join/v0.2',
	    'https://specs.apollo.dev/tag/v0.1',
	    'https://specs.apollo.dev/inaccessible/v0.1',
	]);
	function ErrUnsupportedFeature(feature) {
	    return (0, core_schema_1.err)('UnsupportedFeature', {
	        message: `feature ${feature.url} is for: ${feature.purpose} but is unsupported`,
	        feature,
	        nodes: feature.directive.sourceAST,
	    });
	}
	supergraphs.ErrUnsupportedFeature = ErrUnsupportedFeature;
	function ErrForUnsupported(core, ...features) {
	    return (0, core_schema_1.err)('ForUnsupported', {
	        message: `the \`for:\` argument is unsupported by version ${core.url.version} ` +
	            `of the core spec. Please upgrade to at least @core v0.2 (https://specs.apollo.dev/core/v0.2).`,
	        features,
	        nodes: [core.directive.sourceAST, ...features.map(f => f.directive.sourceAST)].filter(n => !!n)
	    });
	}
	supergraphs.ErrForUnsupported = ErrForUnsupported;
	const coreVersionZeroDotOneUrl = coreSpec_1.FeatureUrl.parse('https://specs.apollo.dev/core/v0.1');
	function buildSupergraphSchema(supergraphSdl) {
	    const schema = typeof supergraphSdl === 'string'
	        ? (0, buildSchema_1.buildSchema)(supergraphSdl, definitions_1.graphQLBuiltIns, false)
	        : (0, buildSchema_1.buildSchemaFromAST)(supergraphSdl, definitions_1.graphQLBuiltIns, false);
	    const [coreFeatures] = validateSupergraph(schema);
	    checkFeatureSupport(coreFeatures);
	    schema.validate();
	    return [schema, (0, extractSubgraphsFromSupergraph_1.extractSubgraphsNamesAndUrlsFromSupergraph)(schema)];
	}
	supergraphs.buildSupergraphSchema = buildSupergraphSchema;
	function checkFeatureSupport(coreFeatures) {
	    const errors = [];
	    if (coreFeatures.coreItself.url.equals(coreVersionZeroDotOneUrl)) {
	        const purposefulFeatures = [...coreFeatures.allFeatures()].filter(f => f.purpose);
	        if (purposefulFeatures.length > 0) {
	            errors.push(ErrForUnsupported(coreFeatures.coreItself, ...purposefulFeatures));
	        }
	    }
	    for (const feature of coreFeatures.allFeatures()) {
	        if (feature.url.equals(coreVersionZeroDotOneUrl) || feature.purpose === 'EXECUTION' || feature.purpose === 'SECURITY') {
	            if (!SUPPORTED_FEATURES.has(feature.url.base.toString())) {
	                errors.push(ErrUnsupportedFeature(feature));
	            }
	        }
	    }
	    if (errors.length > 0) {
	        throw (0, coreSpec_1.ErrCoreCheckFailed)(errors);
	    }
	}
	function validateSupergraph(supergraph) {
	    const coreFeatures = supergraph.coreFeatures;
	    if (!coreFeatures) {
	        throw new graphql_1$2.GraphQLError("Invalid supergraph: must be a core schema");
	    }
	    const joinFeature = coreFeatures.getByIdentity(joinSpec_1.joinIdentity);
	    if (!joinFeature) {
	        throw new graphql_1$2.GraphQLError("Invalid supergraph: must use the join spec");
	    }
	    const joinSpec = joinSpec_1.JOIN_VERSIONS.find(joinFeature.url.version);
	    if (!joinSpec) {
	        throw new graphql_1$2.GraphQLError(`Invalid supergraph: uses unsupported join spec version ${joinFeature.url.version} (supported versions: ${joinSpec_1.JOIN_VERSIONS.versions().join(', ')})`);
	    }
	    return [coreFeatures, joinSpec];
	}
	supergraphs.validateSupergraph = validateSupergraph;
	function isFed1Supergraph(supergraph) {
	    return validateSupergraph(supergraph)[1].version.equals(new coreSpec_1.FeatureVersion(0, 1));
	}
	supergraphs.isFed1Supergraph = isFed1Supergraph;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(definitions, exports);
	__exportStar(buildSchema$1, exports);
	__exportStar(print, exports);
	__exportStar(values, exports);
	__exportStar(federation, exports);
	__exportStar(types, exports);
	__exportStar(operations, exports);
	__exportStar(utils, exports);
	__exportStar(debug$1, exports);
	__exportStar(coreSpec$1, exports);
	__exportStar(joinSpec$1, exports);
	__exportStar(tagSpec$1, exports);
	__exportStar(supergraphs, exports);
	__exportStar(extractSubgraphsFromSupergraph$1, exports);
	__exportStar(error, exports);

	}(dist$2));

	var dist = {};

	var querygraph = {};

	var transition = {};

	Object.defineProperty(transition, "__esModule", { value: true });
	transition.subgraphEnteringTransition = transition.SubgraphEnteringTransition = transition.DownCast = transition.FieldCollection = transition.RootTypeResolution = transition.KeyResolution = void 0;
	class KeyResolution {
	    constructor() {
	        this.kind = 'KeyResolution';
	        this.collectOperationElements = false;
	    }
	    toString() {
	        return 'key()';
	    }
	}
	transition.KeyResolution = KeyResolution;
	class RootTypeResolution {
	    constructor(rootKind) {
	        this.rootKind = rootKind;
	        this.kind = 'RootTypeResolution';
	        this.collectOperationElements = false;
	    }
	    toString() {
	        return this.rootKind + '()';
	    }
	}
	transition.RootTypeResolution = RootTypeResolution;
	class FieldCollection {
	    constructor(definition, isPartOfProvide = false) {
	        this.definition = definition;
	        this.isPartOfProvide = isPartOfProvide;
	        this.kind = 'FieldCollection';
	        this.collectOperationElements = true;
	    }
	    toString() {
	        return this.definition.name;
	    }
	}
	transition.FieldCollection = FieldCollection;
	class DownCast {
	    constructor(sourceType, castedType) {
	        this.sourceType = sourceType;
	        this.castedType = castedType;
	        this.kind = 'DownCast';
	        this.collectOperationElements = true;
	    }
	    toString() {
	        return '... on ' + this.castedType.name;
	    }
	}
	transition.DownCast = DownCast;
	class SubgraphEnteringTransition {
	    constructor() {
	        this.kind = 'SubgraphEnteringTransition';
	        this.collectOperationElements = false;
	    }
	    toString() {
	        return '∅';
	    }
	}
	transition.SubgraphEnteringTransition = SubgraphEnteringTransition;
	transition.subgraphEnteringTransition = new SubgraphEnteringTransition();

	var structuralSubtyping = {};

	Object.defineProperty(structuralSubtyping, "__esModule", { value: true });
	structuralSubtyping.isStructuralFieldSubtype = structuralSubtyping.isStructuralInputSubType = void 0;
	const federation_internals_1$7 = dist$2;
	function typeComparison(t1, t2, typeTest, test) {
	    if (typeTest(t1)) {
	        return typeTest(t2) ? test(t1, t2) : false;
	    }
	    return typeTest(t2) ? false : undefined;
	}
	function isSubset(set, maybeSubset) {
	    return maybeSubset.every(v => set.includes(v));
	}
	function isAccessible(element) {
	    return element.hasAppliedDirective('inaccessible');
	}
	function accessibleEnumValues(enumType) {
	    return enumType
	        .values
	        .filter(v => isAccessible(v))
	        .map(v => v.name);
	}
	function isEnumInputSubtype(enumType, maybeSubType) {
	    if (enumType.name != maybeSubType.name) {
	        return false;
	    }
	    return isSubset(accessibleEnumValues(maybeSubType), accessibleEnumValues(enumType));
	}
	function isObjectInputSubtype(objectInputType, maybeSubType) {
	    if (objectInputType.name != maybeSubType.name) {
	        return false;
	    }
	    return maybeSubType.fields()
	        .filter(isAccessible)
	        .every(subtypeField => {
	        const field = objectInputType.field(subtypeField.name);
	        return field && isAccessible(field) ? isStructuralInputSubType(field.type, subtypeField.type) : false;
	    });
	}
	function isStructuralInputSubType(inputType, maybeSubType) {
	    if ((0, federation_internals_1$7.isNonNullType)(inputType)) {
	        return (0, federation_internals_1$7.isNonNullType)(maybeSubType) ? isStructuralInputSubType(inputType.ofType, maybeSubType.ofType) : false;
	    }
	    if ((0, federation_internals_1$7.isNonNullType)(maybeSubType)) {
	        return isStructuralInputSubType(inputType, maybeSubType.ofType);
	    }
	    let c = typeComparison(inputType, maybeSubType, federation_internals_1$7.isListType, (l1, l2) => isStructuralInputSubType(l1.ofType, l2.ofType));
	    if (c != undefined) {
	        return c;
	    }
	    c = typeComparison(inputType, maybeSubType, federation_internals_1$7.isScalarType, (l1, l2) => l1.name == l2.name);
	    if (c != undefined) {
	        return c;
	    }
	    c = typeComparison(inputType, maybeSubType, federation_internals_1$7.isEnumType, (l1, l2) => isEnumInputSubtype(l1, l2));
	    if (c != undefined) {
	        return c;
	    }
	    c = typeComparison(inputType, maybeSubType, federation_internals_1$7.isInputObjectType, (l1, l2) => isObjectInputSubtype(l1, l2));
	    return c !== null && c !== void 0 ? c : false;
	}
	structuralSubtyping.isStructuralInputSubType = isStructuralInputSubType;
	function getArg(field, argName) {
	    const arg = field.argument(argName);
	    return arg && isAccessible(arg) ? arg : undefined;
	}
	function isStructuralFieldSubtype(fieldDef, maybeSubType, allowedRules = federation_internals_1$7.DEFAULT_SUBTYPING_RULES, unionMembershipTester = (u, m) => u.hasTypeMember(m), implementsInterfaceTester = (m, i) => m.implementsInterface(i)) {
	    if (fieldDef.name !== maybeSubType.name) {
	        return false;
	    }
	    if (!(0, federation_internals_1$7.isSubtype)(maybeSubType.type, fieldDef.type, allowedRules, unionMembershipTester, implementsInterfaceTester)) {
	        return false;
	    }
	    for (const argDef of maybeSubType.arguments().filter(isAccessible)) {
	        const providedArgDef = getArg(fieldDef, argDef.name);
	        if (!providedArgDef || !isStructuralInputSubType(providedArgDef.type, argDef.type)) {
	            return false;
	        }
	    }
	    return true;
	}
	structuralSubtyping.isStructuralFieldSubtype = isStructuralFieldSubtype;

	Object.defineProperty(querygraph, "__esModule", { value: true });
	querygraph.simpleTraversal = querygraph.buildFederatedQueryGraph = querygraph.buildSupergraphAPIQueryGraph = querygraph.buildQueryGraph = querygraph.QueryGraphState = querygraph.QueryGraph = querygraph.Edge = querygraph.isRootVertex = querygraph.RootVertex = querygraph.Vertex = querygraph.isFederatedGraphRootType = querygraph.federatedGraphRootTypeName = void 0;
	const federation_internals_1$6 = dist$2;
	const util_1 = require$$0$1;
	const transition_1 = transition;
	const structuralSubtyping_1 = structuralSubtyping;
	const FEDERATED_GRAPH_ROOT_SOURCE = federation_internals_1$6.FEDERATION_RESERVED_SUBGRAPH_NAME;
	const FEDERATED_GRAPH_ROOT_SCHEMA = new federation_internals_1$6.Schema();
	function federatedGraphRootTypeName(rootKind) {
	    return `[${rootKind}]`;
	}
	querygraph.federatedGraphRootTypeName = federatedGraphRootTypeName;
	function isFederatedGraphRootType(type) {
	    return type.name.startsWith('[') && type.name.endsWith(']');
	}
	querygraph.isFederatedGraphRootType = isFederatedGraphRootType;
	class Vertex {
	    constructor(index, type, source) {
	        this.index = index;
	        this.type = type;
	        this.source = source;
	    }
	    toString() {
	        return `${this.type}(${this.source})`;
	    }
	}
	querygraph.Vertex = Vertex;
	class RootVertex extends Vertex {
	    constructor(rootKind, index, type, source) {
	        super(index, type, source);
	        this.rootKind = rootKind;
	    }
	    toString() {
	        return super.toString() + '*';
	    }
	}
	querygraph.RootVertex = RootVertex;
	function toRootVertex(vertex, rootKind) {
	    return new RootVertex(rootKind, vertex.index, vertex.type, vertex.source);
	}
	function isRootVertex(vertex) {
	    return vertex instanceof RootVertex;
	}
	querygraph.isRootVertex = isRootVertex;
	class Edge {
	    constructor(index, head, tail, transition, conditions) {
	        this.index = index;
	        this.head = head;
	        this.tail = tail;
	        this.transition = transition;
	        this._conditions = conditions;
	    }
	    get conditions() {
	        return this._conditions;
	    }
	    isEdgeForField(name) {
	        return this.transition.kind === 'FieldCollection' && this.transition.definition.name === name;
	    }
	    matchesSupergraphTransition(supergraph, otherTransition) {
	        const transition = this.transition;
	        switch (transition.kind) {
	            case 'FieldCollection':
	                if (otherTransition.kind === 'FieldCollection') {
	                    return (0, structuralSubtyping_1.isStructuralFieldSubtype)(transition.definition, otherTransition.definition, federation_internals_1$6.ALL_SUBTYPING_RULES, (union, maybeMember) => supergraph.type(union.name).hasTypeMember(maybeMember.name), (maybeImplementer, itf) => supergraph.type(maybeImplementer.name).implementsInterface(itf));
	                }
	                else {
	                    return false;
	                }
	            case 'DownCast':
	                return otherTransition.kind === 'DownCast' && transition.castedType.name === otherTransition.castedType.name;
	            default:
	                return transition.kind === otherTransition.kind;
	        }
	    }
	    label() {
	        if (this.transition instanceof transition_1.SubgraphEnteringTransition && !this._conditions) {
	            return "";
	        }
	        return this._conditions ? `${this._conditions} ⊢ ${this.transition}` : this.transition.toString();
	    }
	    withNewHead(newHead) {
	        return new Edge(this.index, newHead, this.tail, this.transition, this._conditions);
	    }
	    addToConditions(newConditions) {
	        if (!this._conditions) {
	            this._conditions = new federation_internals_1$6.SelectionSet(this.head.type);
	        }
	        this._conditions.mergeIn(newConditions);
	    }
	    toString() {
	        return `${this.head} -> ${this.tail} (${this.label()})`;
	    }
	}
	querygraph.Edge = Edge;
	class QueryGraph {
	    constructor(name, vertices, adjacencies, typesToVertices, rootVertices, sources) {
	        this.name = name;
	        this.vertices = vertices;
	        this.adjacencies = adjacencies;
	        this.typesToVertices = typesToVertices;
	        this.rootVertices = rootVertices;
	        this.sources = sources;
	        this.externalTesters = new Map();
	    }
	    verticesCount() {
	        return this.vertices.length;
	    }
	    edgesCount() {
	        return this.adjacencies.reduce((acc, v) => acc + v.length, 0);
	    }
	    rootKinds() {
	        return this.rootVertices.keys();
	    }
	    roots() {
	        return this.rootVertices.values();
	    }
	    root(kind) {
	        return this.rootVertices.get(kind);
	    }
	    outEdges(vertex) {
	        return this.adjacencies[vertex.index];
	    }
	    outEdge(vertex, edgeIndex) {
	        return this.adjacencies[vertex.index][edgeIndex];
	    }
	    isTerminal(vertex) {
	        return this.outEdges(vertex).length == 0;
	    }
	    verticesForType(typeName) {
	        const indexes = this.typesToVertices.get(typeName);
	        return indexes == undefined ? [] : indexes.map(i => this.vertices[i]);
	    }
	    externalTester(source) {
	        let tester = this.externalTesters.get(source);
	        if (!tester) {
	            const schema = this.sources.get(source);
	            (0, federation_internals_1$6.assert)(schema, () => `Unknown source: ${source}`);
	            tester = new federation_internals_1$6.ExternalTester(schema);
	        }
	        return tester;
	    }
	}
	querygraph.QueryGraph = QueryGraph;
	class QueryGraphState {
	    constructor(graph) {
	        this.graph = graph;
	        this.verticesStates = new Array(graph.verticesCount());
	        this.adjacenciesStates = new Array(graph.verticesCount());
	    }
	    setVertexState(vertex, state) {
	        this.verticesStates[vertex.index] = state;
	    }
	    removeVertexState(vertex) {
	        this.verticesStates[vertex.index] = undefined;
	    }
	    getVertexState(vertex) {
	        return this.verticesStates[vertex.index];
	    }
	    setEdgeState(edge, state) {
	        if (!this.adjacenciesStates[edge.head.index]) {
	            this.adjacenciesStates[edge.head.index] = new Array(this.graph.outEdges(edge.head).length);
	        }
	        this.adjacenciesStates[edge.head.index][edge.index] = state;
	    }
	    removeEdgeState(edge) {
	        this.adjacenciesStates[edge.head.index][edge.index] = undefined;
	    }
	    getEdgeState(edge) {
	        const forEdge = this.adjacenciesStates[edge.head.index];
	        return forEdge ? forEdge[edge.index] : undefined;
	    }
	    toDebugString(vertexMapper, edgeMapper) {
	        const vs = this.verticesStates.map((state, idx) => ` ${idx}: ${!state ? "<null>" : vertexMapper(state)}`).join("\n");
	        const es = this.adjacenciesStates.map((adj, vIdx) => adj.map((state, eIdx) => ` ${vIdx}[${eIdx}]: ${!state ? "<null>" : edgeMapper(state)}`).join("\n")).join("\n");
	        return `vertices = {${vs}\n}, edges = {${es}\n}`;
	    }
	}
	querygraph.QueryGraphState = QueryGraphState;
	function buildQueryGraph(name, schema) {
	    return buildGraphInternal(name, schema, false);
	}
	querygraph.buildQueryGraph = buildQueryGraph;
	function buildGraphInternal(name, schema, addAdditionalAbstractTypeEdges, supergraphSchema) {
	    const builder = new GraphBuilderFromSchema(name, schema, supergraphSchema);
	    for (const rootType of schema.schemaDefinition.roots()) {
	        builder.addRecursivelyFromRoot(rootType.rootKind, rootType.type);
	    }
	    if (addAdditionalAbstractTypeEdges) {
	        builder.addAdditionalAbstractTypeEdges();
	    }
	    return builder.build();
	}
	function buildSupergraphAPIQueryGraph(supergraph) {
	    return buildQueryGraph("supergraph", supergraph);
	}
	querygraph.buildSupergraphAPIQueryGraph = buildSupergraphAPIQueryGraph;
	function buildFederatedQueryGraph(supergraph, forQueryPlanning) {
	    const subgraphs = (0, federation_internals_1$6.extractSubgraphsFromSupergraph)(supergraph);
	    const graphs = [];
	    for (const subgraph of subgraphs) {
	        graphs.push(buildGraphInternal(subgraph.name, subgraph.schema, forQueryPlanning, supergraph));
	    }
	    return federateSubgraphs(graphs);
	}
	querygraph.buildFederatedQueryGraph = buildFederatedQueryGraph;
	function federatedProperties(subgraphs) {
	    let vertices = 0;
	    const rootKinds = new Set();
	    const schemas = [];
	    for (const subgraph of subgraphs) {
	        vertices += subgraph.verticesCount();
	        subgraph.rootKinds().forEach(k => rootKinds.add(k));
	        (0, federation_internals_1$6.assert)(subgraph.sources.size === 1, () => `Subgraphs should only have one sources, got ${subgraph.sources.size} ([${(0, federation_internals_1$6.mapKeys)(subgraph.sources).join(', ')}])`);
	        schemas.push((0, federation_internals_1$6.firstOf)(subgraph.sources.values()));
	    }
	    return [vertices + rootKinds.size, rootKinds, schemas];
	}
	function federateSubgraphs(subgraphs) {
	    const [verticesCount, rootKinds, schemas] = federatedProperties(subgraphs);
	    const builder = new GraphBuilder(verticesCount);
	    rootKinds.forEach(k => builder.createRootVertex(k, new federation_internals_1$6.ObjectType(federatedGraphRootTypeName(k)), FEDERATED_GRAPH_ROOT_SOURCE, FEDERATED_GRAPH_ROOT_SCHEMA));
	    const copyPointers = new Array(subgraphs.length);
	    for (const [i, subgraph] of subgraphs.entries()) {
	        copyPointers[i] = builder.copyGraph(subgraph);
	    }
	    for (const [i, subgraph] of subgraphs.entries()) {
	        const copyPointer = copyPointers[i];
	        for (const rootKind of subgraph.rootKinds()) {
	            const rootVertex = copyPointer.copiedVertex(subgraph.root(rootKind));
	            builder.addEdge(builder.root(rootKind), rootVertex, transition_1.subgraphEnteringTransition);
	            for (const [j, otherSubgraph] of subgraphs.entries()) {
	                if (i === j) {
	                    continue;
	                }
	                const otherRootVertex = otherSubgraph.root(rootKind);
	                if (otherRootVertex) {
	                    const otherCopyPointer = copyPointers[j];
	                    builder.addEdge(rootVertex, otherCopyPointer.copiedVertex(otherRootVertex), new transition_1.RootTypeResolution(rootKind));
	                }
	            }
	        }
	    }
	    for (const [i, subgraph] of subgraphs.entries()) {
	        const subgraphSchema = schemas[i];
	        const keyDirective = federation_internals_1$6.federationBuiltIns.keyDirective(subgraphSchema);
	        const requireDirective = federation_internals_1$6.federationBuiltIns.requiresDirective(subgraphSchema);
	        simpleTraversal(subgraph, v => {
	            const type = v.type;
	            for (const keyApplication of type.appliedDirectivesOf(keyDirective)) {
	                (0, federation_internals_1$6.assert)((0, federation_internals_1$6.isInterfaceType)(type) || (0, federation_internals_1$6.isObjectType)(type), () => `Invalid "@key" application on non Object || Interface type "${type}"`);
	                const conditions = (0, federation_internals_1$6.parseFieldSetArgument)(type, keyApplication);
	                for (const [j, otherSubgraph] of subgraphs.entries()) {
	                    if (i == j) {
	                        continue;
	                    }
	                    const otherVertices = otherSubgraph.verticesForType(type.name);
	                    if (otherVertices.length == 0) {
	                        continue;
	                    }
	                    (0, federation_internals_1$6.assert)(otherVertices.length == 1, () => `Subgraph ${j} should have a single vertex for type ${type.name} but got ${otherVertices.length}: ${(0, util_1.inspect)(otherVertices)}`);
	                    const head = copyPointers[j].copiedVertex(otherVertices[0]);
	                    const tail = copyPointers[i].copiedVertex(v);
	                    builder.addEdge(head, tail, new transition_1.KeyResolution(), conditions);
	                }
	            }
	        }, e => {
	            if (e.transition.kind === 'FieldCollection') {
	                const type = e.head.type;
	                const field = e.transition.definition;
	                (0, federation_internals_1$6.assert)((0, federation_internals_1$6.isCompositeType)(type), () => `Non composite type "${type}" should not have field collection edge ${e}`);
	                for (const requiresApplication of field.appliedDirectivesOf(requireDirective)) {
	                    const conditions = (0, federation_internals_1$6.parseFieldSetArgument)(type, requiresApplication);
	                    const head = copyPointers[i].copiedVertex(e.head);
	                    const copiedEdge = builder.edge(head, e.index);
	                    copiedEdge.addToConditions(conditions);
	                }
	            }
	            return true;
	        });
	    }
	    for (const [i, subgraph] of subgraphs.entries()) {
	        const subgraphSchema = schemas[i];
	        const providesDirective = federation_internals_1$6.federationBuiltIns.providesDirective(subgraphSchema);
	        simpleTraversal(subgraph, _ => undefined, e => {
	            if (e.transition.kind === 'FieldCollection') {
	                const type = e.head.type;
	                const field = e.transition.definition;
	                (0, federation_internals_1$6.assert)((0, federation_internals_1$6.isCompositeType)(type), () => `Non composite type "${type}" should not have field collection edge ${e}`);
	                for (const providesApplication of field.appliedDirectivesOf(providesDirective)) {
	                    const fieldType = (0, federation_internals_1$6.baseType)(field.type);
	                    (0, federation_internals_1$6.assert)((0, federation_internals_1$6.isCompositeType)(fieldType), () => `Invalid @provide on field "${field}" whose type "${fieldType}" is not a composite type`);
	                    const provided = (0, federation_internals_1$6.parseFieldSetArgument)(fieldType, providesApplication);
	                    const head = copyPointers[i].copiedVertex(e.head);
	                    const tail = copyPointers[i].copiedVertex(e.tail);
	                    const copiedEdge = builder.edge(head, e.index);
	                    const copiedTail = builder.makeCopy(tail);
	                    builder.updateEdgeTail(copiedEdge, copiedTail);
	                    addProvidesEdges(subgraphSchema, builder, copiedTail, provided);
	                }
	            }
	            return true;
	        });
	    }
	    return builder.build(FEDERATED_GRAPH_ROOT_SOURCE);
	}
	function addProvidesEdges(schema, builder, from, provided) {
	    const stack = [[from, provided]];
	    const source = from.source;
	    while (stack.length > 0) {
	        const [v, selectionSet] = stack.pop();
	        for (const selection of selectionSet.selections(true)) {
	            const element = selection.element();
	            if (element.kind == 'Field') {
	                const fieldDef = element.definition;
	                const existingEdge = builder.edges(v).find(e => e.transition.kind === 'FieldCollection' && e.transition.definition.name === fieldDef.name);
	                if (existingEdge) {
	                    if (selection.selectionSet) {
	                        const copiedTail = builder.makeCopy(existingEdge.tail);
	                        builder.updateEdgeTail(existingEdge, copiedTail);
	                        stack.push([copiedTail, selection.selectionSet]);
	                    }
	                }
	                else {
	                    const fieldType = (0, federation_internals_1$6.baseType)(fieldDef.type);
	                    const existingTail = builder.verticesForType(fieldType.name).find(v => v.source === source);
	                    const newTail = existingTail ? existingTail : builder.createNewVertex(fieldType, v.source, schema);
	                    if (selection.selectionSet) {
	                        const copiedTail = existingTail ? builder.makeCopy(existingTail) : newTail;
	                        builder.addEdge(v, copiedTail, new transition_1.FieldCollection(fieldDef, true));
	                        stack.push([copiedTail, selection.selectionSet]);
	                    }
	                    else {
	                        builder.addEdge(v, newTail, new transition_1.FieldCollection(fieldDef, true));
	                    }
	                }
	            }
	            else {
	                const typeCondition = element.typeCondition;
	                if (typeCondition) {
	                    const existingEdge = builder.edges(v).find(e => e.transition.kind === 'DownCast' && e.transition.castedType.name === typeCondition.name);
	                    (0, federation_internals_1$6.assert)(existingEdge, () => `Shouldn't have ${selection} with no corresponding edge on ${v}`);
	                    const copiedTail = builder.makeCopy(existingEdge.tail);
	                    builder.updateEdgeTail(existingEdge, copiedTail);
	                    stack.push([copiedTail, selection.selectionSet]);
	                }
	                else {
	                    stack.push([v, selection.selectionSet]);
	                }
	            }
	        }
	    }
	}
	class GraphBuilder {
	    constructor(verticesCount) {
	        this.nextIndex = 0;
	        this.typesToVertices = new federation_internals_1$6.MultiMap();
	        this.rootVertices = new federation_internals_1$6.MapWithCachedArrays();
	        this.sources = new Map();
	        this.vertices = verticesCount ? new Array(verticesCount) : [];
	        this.adjacencies = verticesCount ? new Array(verticesCount) : [];
	    }
	    verticesForType(typeName) {
	        const indexes = this.typesToVertices.get(typeName);
	        return indexes == undefined ? [] : indexes.map(i => this.vertices[i]);
	    }
	    root(kind) {
	        return this.rootVertices.get(kind);
	    }
	    addEdge(head, tail, transition, conditions) {
	        const edges = this.adjacencies[head.index];
	        const edge = new Edge(edges.length, head, tail, transition, conditions);
	        edges.push(edge);
	    }
	    createNewVertex(type, source, schema, index) {
	        if (!index) {
	            index = this.nextIndex++;
	        }
	        const vertex = new Vertex(index, type, source);
	        const previous = this.vertices[index];
	        (0, federation_internals_1$6.assert)(!previous, () => `Overriding existing vertex ${previous} with ${vertex}`);
	        this.vertices[index] = vertex;
	        this.typesToVertices.add(type.name, index);
	        this.adjacencies[index] = [];
	        if (!this.sources.has(source)) {
	            this.sources.set(source, schema);
	        }
	        return vertex;
	    }
	    createRootVertex(kind, type, source, schema) {
	        const vertex = this.createNewVertex(type, source, schema);
	        (0, federation_internals_1$6.assert)(!this.rootVertices.has(kind), () => `Root vertex for ${kind} (${this.rootVertices.get(kind)}) already exists: cannot replace by ${vertex}`);
	        this.setAsRoot(kind, vertex.index);
	    }
	    setAsRoot(kind, index) {
	        const vertex = this.vertices[index];
	        (0, federation_internals_1$6.assert)(vertex, () => `Cannot set non-existing vertex at index ${index} as root ${kind}`);
	        const rootVertex = toRootVertex(vertex, kind);
	        this.vertices[vertex.index] = rootVertex;
	        this.rootVertices.set(kind, rootVertex);
	        const rootEdges = this.adjacencies[vertex.index];
	        for (let i = 0; i < rootEdges.length; i++) {
	            rootEdges[i] = rootEdges[i].withNewHead(rootVertex);
	        }
	    }
	    copyGraph(graph) {
	        const offset = this.nextIndex;
	        simpleTraversal(graph, v => {
	            this.getOrCopyVertex(v, offset, graph);
	        }, e => {
	            const newHead = this.getOrCopyVertex(e.head, offset, graph);
	            const newTail = this.getOrCopyVertex(e.tail, offset, graph);
	            this.addEdge(newHead, newTail, e.transition, e.conditions);
	            return true;
	        });
	        this.nextIndex += graph.verticesCount();
	        const that = this;
	        return {
	            copiedVertex(original) {
	                const vertex = that.vertices[original.index + offset];
	                (0, federation_internals_1$6.assert)(vertex, () => `Vertex ${original} has no copy for offset ${offset}`);
	                return vertex;
	            }
	        };
	    }
	    vertex(index) {
	        return this.vertices[index];
	    }
	    edge(head, index) {
	        return this.adjacencies[head.index][index];
	    }
	    edges(head) {
	        return this.adjacencies[head.index];
	    }
	    makeCopy(vertex) {
	        const newVertex = this.createNewVertex(vertex.type, vertex.source, this.sources.get(vertex.source));
	        for (const edge of this.adjacencies[vertex.index]) {
	            this.addEdge(newVertex, edge.tail, edge.transition, edge.conditions);
	        }
	        return newVertex;
	    }
	    updateEdgeTail(edge, newTail) {
	        const newEdge = new Edge(edge.index, edge.head, newTail, edge.transition, edge.conditions);
	        this.adjacencies[edge.head.index][edge.index] = newEdge;
	        return newEdge;
	    }
	    getOrCopyVertex(toCopy, indexOffset, graph) {
	        const index = toCopy.index + indexOffset;
	        let v = this.vertices[index];
	        if (!v) {
	            v = this.createNewVertex(toCopy.type, toCopy.source, graph.sources.get(toCopy.source), index);
	        }
	        return v;
	    }
	    build(name) {
	        return new QueryGraph(name, this.vertices, this.adjacencies, this.typesToVertices, this.rootVertices, this.sources);
	    }
	}
	class GraphBuilderFromSchema extends GraphBuilder {
	    constructor(name, schema, supergraphSchema) {
	        super();
	        this.name = name;
	        this.schema = schema;
	        this.supergraphSchema = supergraphSchema;
	        this.isFederatedSubgraph = (0, federation_internals_1$6.isFederationSubgraphSchema)(schema);
	        (0, federation_internals_1$6.assert)(!this.isFederatedSubgraph || supergraphSchema, `Missing supergraph schema for building the federated subgraph graph`);
	        this.forceTypeExplosion = supergraphSchema !== undefined && (0, federation_internals_1$6.isFed1Supergraph)(supergraphSchema);
	    }
	    addRecursivelyFromRoot(kind, root) {
	        this.setAsRoot(kind, this.addTypeRecursively(root).index);
	    }
	    addTypeRecursively(type) {
	        const namedType = (0, federation_internals_1$6.baseType)(type);
	        const existing = this.verticesForType(namedType.name);
	        if (existing.length > 0) {
	            (0, federation_internals_1$6.assert)(existing.length == 1, () => `Only one vertex should have been created for type ${namedType.name}, got ${existing.length}: ${(0, util_1.inspect)(this)}`);
	            return existing[0];
	        }
	        const vertex = this.createNewVertex(namedType, this.name, this.schema);
	        if ((0, federation_internals_1$6.isObjectType)(namedType)) {
	            this.addObjectTypeEdges(namedType, vertex);
	        }
	        else if ((0, federation_internals_1$6.isInterfaceType)(namedType)) {
	            if (this.isFederatedSubgraph && !this.forceTypeExplosion) {
	                this.maybeAddInterfaceFieldsEdges(namedType, vertex);
	            }
	            this.addAbstractTypeEdges(namedType, vertex);
	        }
	        else if ((0, federation_internals_1$6.isUnionType)(namedType)) {
	            this.addEdgeForField(namedType.typenameField(), vertex);
	            this.addAbstractTypeEdges(namedType, vertex);
	        }
	        return vertex;
	    }
	    addObjectTypeEdges(type, head) {
	        for (const field of type.allFields()) {
	            if (field.isSchemaIntrospectionField() || field.hasAppliedDirective(federation_internals_1$6.externalDirectiveName)) {
	                continue;
	            }
	            this.addEdgeForField(field, head);
	        }
	    }
	    addEdgeForField(field, head) {
	        const tail = this.addTypeRecursively(field.type);
	        this.addEdge(head, tail, new transition_1.FieldCollection(field));
	    }
	    isDirectlyProvidedByType(type, fieldName) {
	        const field = type.field(fieldName);
	        return field && !field.hasAppliedDirective(federation_internals_1$6.externalDirectiveName) && !field.hasAppliedDirective(federation_internals_1$6.requiresDirectiveName);
	    }
	    maybeAddInterfaceFieldsEdges(type, head) {
	        (0, federation_internals_1$6.assert)(this.supergraphSchema, 'Missing supergraph schema when building a subgraph');
	        const supergraphType = this.supergraphSchema.type(type.name);
	        if (!supergraphType) {
	            return;
	        }
	        const supergraphRuntimeTypes = supergraphType.possibleRuntimeTypes().map(t => t.name);
	        const localRuntimeTypes = supergraphRuntimeTypes.map(t => this.schema.type(t)).filter(t => t !== undefined);
	        for (const field of type.allFields()) {
	            if (field.hasAppliedDirective(federation_internals_1$6.externalDirectiveName) || localRuntimeTypes.some(t => !this.isDirectlyProvidedByType(t, field.name))) {
	                continue;
	            }
	            this.addEdgeForField(field, head);
	        }
	    }
	    addAbstractTypeEdges(type, head) {
	        const implementations = (0, federation_internals_1$6.isInterfaceType)(type) ? type.possibleRuntimeTypes() : type.types();
	        for (const implementationType of implementations) {
	            const tail = this.addTypeRecursively(implementationType);
	            this.addEdge(head, tail, new transition_1.DownCast(type, implementationType));
	        }
	    }
	    addAdditionalAbstractTypeEdges() {
	        const abstractTypesWithTheirRuntimeTypes = [];
	        for (const type of this.schema.types()) {
	            if ((0, federation_internals_1$6.isAbstractType)(type)) {
	                abstractTypesWithTheirRuntimeTypes.push([type, (0, federation_internals_1$6.possibleRuntimeTypes)(type)]);
	            }
	        }
	        for (let i = 0; i < abstractTypesWithTheirRuntimeTypes.length - 1; i++) {
	            const [t1, t1Runtimes] = abstractTypesWithTheirRuntimeTypes[i];
	            const t1Vertex = this.addTypeRecursively(t1);
	            for (let j = i; j < abstractTypesWithTheirRuntimeTypes.length; j++) {
	                const [t2, t2Runtimes] = abstractTypesWithTheirRuntimeTypes[j];
	                if ((0, federation_internals_1$6.isInterfaceType)(t1) && (0, federation_internals_1$6.isInterfaceType)(t2) && (t1.implementsInterface(t2) || t2.implementsInterface(t1))) {
	                    continue;
	                }
	                const intersecting = t1Runtimes.filter(o1 => t2Runtimes.includes(o1));
	                if (intersecting.length >= 2) {
	                    const t2Vertex = this.addTypeRecursively(t2);
	                    this.addEdge(t1Vertex, t2Vertex, new transition_1.DownCast(t1, t2));
	                    this.addEdge(t2Vertex, t1Vertex, new transition_1.DownCast(t2, t1));
	                }
	            }
	        }
	    }
	    build() {
	        return super.build(this.name);
	    }
	}
	function simpleTraversal(graph, onVertex, onEdges) {
	    const marked = new Array(graph.verticesCount());
	    const stack = [];
	    const maybeAdd = function (vertex) {
	        if (!marked[vertex.index]) {
	            stack.push(vertex);
	            marked[vertex.index] = true;
	        }
	    };
	    graph.roots().forEach(maybeAdd);
	    while (stack.length > 0) {
	        const vertex = stack.pop();
	        onVertex(vertex);
	        for (const edge of graph.outEdges(vertex)) {
	            const shouldTraverse = onEdges(edge);
	            if (shouldTraverse) {
	                maybeAdd(edge.tail);
	            }
	        }
	    }
	}
	querygraph.simpleTraversal = simpleTraversal;

	var graphPath = {};

	var pathTree = {};

	var pathContext = {};

	var toStr$8 = Object.prototype.toString;

	var isArguments$2 = function isArguments(value) {
		var str = toStr$8.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr$8.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};

	var keysShim$1;
	if (!Object.keys) {
		// modified from https://github.com/es-shims/es5-shim
		var has$2 = Object.prototype.hasOwnProperty;
		var toStr$7 = Object.prototype.toString;
		var isArgs$1 = isArguments$2; // eslint-disable-line global-require
		var isEnumerable$1 = Object.prototype.propertyIsEnumerable;
		var hasDontEnumBug = !isEnumerable$1.call({ toString: null }, 'toString');
		var hasProtoEnumBug = isEnumerable$1.call(function () {}, 'prototype');
		var dontEnums = [
			'toString',
			'toLocaleString',
			'valueOf',
			'hasOwnProperty',
			'isPrototypeOf',
			'propertyIsEnumerable',
			'constructor'
		];
		var equalsConstructorPrototype = function (o) {
			var ctor = o.constructor;
			return ctor && ctor.prototype === o;
		};
		var excludedKeys = {
			$applicationCache: true,
			$console: true,
			$external: true,
			$frame: true,
			$frameElement: true,
			$frames: true,
			$innerHeight: true,
			$innerWidth: true,
			$onmozfullscreenchange: true,
			$onmozfullscreenerror: true,
			$outerHeight: true,
			$outerWidth: true,
			$pageXOffset: true,
			$pageYOffset: true,
			$parent: true,
			$scrollLeft: true,
			$scrollTop: true,
			$scrollX: true,
			$scrollY: true,
			$self: true,
			$webkitIndexedDB: true,
			$webkitStorageInfo: true,
			$window: true
		};
		var hasAutomationEqualityBug = (function () {
			/* global window */
			if (typeof window === 'undefined') { return false; }
			for (var k in window) {
				try {
					if (!excludedKeys['$' + k] && has$2.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
						try {
							equalsConstructorPrototype(window[k]);
						} catch (e) {
							return true;
						}
					}
				} catch (e) {
					return true;
				}
			}
			return false;
		}());
		var equalsConstructorPrototypeIfNotBuggy = function (o) {
			/* global window */
			if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
				return equalsConstructorPrototype(o);
			}
			try {
				return equalsConstructorPrototype(o);
			} catch (e) {
				return false;
			}
		};

		keysShim$1 = function keys(object) {
			var isObject = object !== null && typeof object === 'object';
			var isFunction = toStr$7.call(object) === '[object Function]';
			var isArguments = isArgs$1(object);
			var isString = isObject && toStr$7.call(object) === '[object String]';
			var theKeys = [];

			if (!isObject && !isFunction && !isArguments) {
				throw new TypeError('Object.keys called on a non-object');
			}

			var skipProto = hasProtoEnumBug && isFunction;
			if (isString && object.length > 0 && !has$2.call(object, 0)) {
				for (var i = 0; i < object.length; ++i) {
					theKeys.push(String(i));
				}
			}

			if (isArguments && object.length > 0) {
				for (var j = 0; j < object.length; ++j) {
					theKeys.push(String(j));
				}
			} else {
				for (var name in object) {
					if (!(skipProto && name === 'prototype') && has$2.call(object, name)) {
						theKeys.push(String(name));
					}
				}
			}

			if (hasDontEnumBug) {
				var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

				for (var k = 0; k < dontEnums.length; ++k) {
					if (!(skipConstructor && dontEnums[k] === 'constructor') && has$2.call(object, dontEnums[k])) {
						theKeys.push(dontEnums[k]);
					}
				}
			}
			return theKeys;
		};
	}
	var implementation$b = keysShim$1;

	var slice$1 = Array.prototype.slice;
	var isArgs = isArguments$2;

	var origKeys = Object.keys;
	var keysShim = origKeys ? function keys(o) { return origKeys(o); } : implementation$b;

	var originalKeys = Object.keys;

	keysShim.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				var args = Object.keys(arguments);
				return args && args.length === arguments.length;
			}(1, 2));
			if (!keysWorksWithArguments) {
				Object.keys = function keys(object) { // eslint-disable-line func-name-matching
					if (isArgs(object)) {
						return originalKeys(slice$1.call(object));
					}
					return originalKeys(object);
				};
			}
		} else {
			Object.keys = keysShim;
		}
		return Object.keys || keysShim;
	};

	var objectKeys$1 = keysShim;

	/* eslint complexity: [2, 18], max-statements: [2, 33] */
	var shams$1 = function hasSymbols() {
		if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
		if (typeof Symbol.iterator === 'symbol') { return true; }

		var obj = {};
		var sym = Symbol('test');
		var symObj = Object(sym);
		if (typeof sym === 'string') { return false; }

		if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
		if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

		// temp disabled per https://github.com/ljharb/object.assign/issues/17
		// if (sym instanceof Symbol) { return false; }
		// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
		// if (!(symObj instanceof Symbol)) { return false; }

		// if (typeof Symbol.prototype.toString !== 'function') { return false; }
		// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

		var symVal = 42;
		obj[sym] = symVal;
		for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
		if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

		if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

		var syms = Object.getOwnPropertySymbols(obj);
		if (syms.length !== 1 || syms[0] !== sym) { return false; }

		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

		if (typeof Object.getOwnPropertyDescriptor === 'function') {
			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
			if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
		}

		return true;
	};

	var hasSymbols$5 = shams$1;

	var shams = function hasToStringTagShams() {
		return hasSymbols$5() && !!Symbol.toStringTag;
	};

	var origSymbol = typeof Symbol !== 'undefined' && Symbol;
	var hasSymbolSham = shams$1;

	var hasSymbols$4 = function hasNativeSymbols() {
		if (typeof origSymbol !== 'function') { return false; }
		if (typeof Symbol !== 'function') { return false; }
		if (typeof origSymbol('foo') !== 'symbol') { return false; }
		if (typeof Symbol('bar') !== 'symbol') { return false; }

		return hasSymbolSham();
	};

	/* eslint no-invalid-this: 1 */

	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var slice = Array.prototype.slice;
	var toStr$6 = Object.prototype.toString;
	var funcType = '[object Function]';

	var implementation$a = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr$6.call(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slice.call(arguments, 1);

	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                args.concat(slice.call(arguments))
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        } else {
	            return target.apply(
	                that,
	                args.concat(slice.call(arguments))
	            );
	        }
	    };

	    var boundLength = Math.max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs.push('$' + i);
	    }

	    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }

	    return bound;
	};

	var implementation$9 = implementation$a;

	var functionBind = Function.prototype.bind || implementation$9;

	var bind$1 = functionBind;

	var src = bind$1.call(Function.call, Object.prototype.hasOwnProperty);

	var undefined$1;

	var $SyntaxError = SyntaxError;
	var $Function = Function;
	var $TypeError$3 = TypeError;

	// eslint-disable-next-line consistent-return
	var getEvalledConstructor = function (expressionSyntax) {
		try {
			return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
		} catch (e) {}
	};

	var $gOPD$2 = Object.getOwnPropertyDescriptor;
	if ($gOPD$2) {
		try {
			$gOPD$2({}, '');
		} catch (e) {
			$gOPD$2 = null; // this is IE 8, which has a broken gOPD
		}
	}

	var throwTypeError = function () {
		throw new $TypeError$3();
	};
	var ThrowTypeError = $gOPD$2
		? (function () {
			try {
				// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
				arguments.callee; // IE 8 does not throw here
				return throwTypeError;
			} catch (calleeThrows) {
				try {
					// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
					return $gOPD$2(arguments, 'callee').get;
				} catch (gOPDthrows) {
					return throwTypeError;
				}
			}
		}())
		: throwTypeError;

	var hasSymbols$3 = hasSymbols$4();

	var getProto$1 = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

	var needsEval = {};

	var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto$1(Uint8Array);

	var INTRINSICS = {
		'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
		'%Array%': Array,
		'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
		'%ArrayIteratorPrototype%': hasSymbols$3 ? getProto$1([][Symbol.iterator]()) : undefined$1,
		'%AsyncFromSyncIteratorPrototype%': undefined$1,
		'%AsyncFunction%': needsEval,
		'%AsyncGenerator%': needsEval,
		'%AsyncGeneratorFunction%': needsEval,
		'%AsyncIteratorPrototype%': needsEval,
		'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
		'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
		'%Boolean%': Boolean,
		'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
		'%Date%': Date,
		'%decodeURI%': decodeURI,
		'%decodeURIComponent%': decodeURIComponent,
		'%encodeURI%': encodeURI,
		'%encodeURIComponent%': encodeURIComponent,
		'%Error%': Error,
		'%eval%': eval, // eslint-disable-line no-eval
		'%EvalError%': EvalError,
		'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
		'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
		'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
		'%Function%': $Function,
		'%GeneratorFunction%': needsEval,
		'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
		'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
		'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
		'%isFinite%': isFinite,
		'%isNaN%': isNaN,
		'%IteratorPrototype%': hasSymbols$3 ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$1,
		'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
		'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
		'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$3 ? undefined$1 : getProto$1(new Map()[Symbol.iterator]()),
		'%Math%': Math,
		'%Number%': Number,
		'%Object%': Object,
		'%parseFloat%': parseFloat,
		'%parseInt%': parseInt,
		'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
		'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
		'%RangeError%': RangeError,
		'%ReferenceError%': ReferenceError,
		'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
		'%RegExp%': RegExp,
		'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
		'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$3 ? undefined$1 : getProto$1(new Set()[Symbol.iterator]()),
		'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
		'%String%': String,
		'%StringIteratorPrototype%': hasSymbols$3 ? getProto$1(''[Symbol.iterator]()) : undefined$1,
		'%Symbol%': hasSymbols$3 ? Symbol : undefined$1,
		'%SyntaxError%': $SyntaxError,
		'%ThrowTypeError%': ThrowTypeError,
		'%TypedArray%': TypedArray,
		'%TypeError%': $TypeError$3,
		'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
		'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
		'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
		'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
		'%URIError%': URIError,
		'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
		'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
		'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
	};

	var doEval = function doEval(name) {
		var value;
		if (name === '%AsyncFunction%') {
			value = getEvalledConstructor('async function () {}');
		} else if (name === '%GeneratorFunction%') {
			value = getEvalledConstructor('function* () {}');
		} else if (name === '%AsyncGeneratorFunction%') {
			value = getEvalledConstructor('async function* () {}');
		} else if (name === '%AsyncGenerator%') {
			var fn = doEval('%AsyncGeneratorFunction%');
			if (fn) {
				value = fn.prototype;
			}
		} else if (name === '%AsyncIteratorPrototype%') {
			var gen = doEval('%AsyncGenerator%');
			if (gen) {
				value = getProto$1(gen.prototype);
			}
		}

		INTRINSICS[name] = value;

		return value;
	};

	var LEGACY_ALIASES = {
		'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
		'%ArrayPrototype%': ['Array', 'prototype'],
		'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
		'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
		'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
		'%ArrayProto_values%': ['Array', 'prototype', 'values'],
		'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
		'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
		'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
		'%BooleanPrototype%': ['Boolean', 'prototype'],
		'%DataViewPrototype%': ['DataView', 'prototype'],
		'%DatePrototype%': ['Date', 'prototype'],
		'%ErrorPrototype%': ['Error', 'prototype'],
		'%EvalErrorPrototype%': ['EvalError', 'prototype'],
		'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
		'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
		'%FunctionPrototype%': ['Function', 'prototype'],
		'%Generator%': ['GeneratorFunction', 'prototype'],
		'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
		'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
		'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
		'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
		'%JSONParse%': ['JSON', 'parse'],
		'%JSONStringify%': ['JSON', 'stringify'],
		'%MapPrototype%': ['Map', 'prototype'],
		'%NumberPrototype%': ['Number', 'prototype'],
		'%ObjectPrototype%': ['Object', 'prototype'],
		'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
		'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
		'%PromisePrototype%': ['Promise', 'prototype'],
		'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
		'%Promise_all%': ['Promise', 'all'],
		'%Promise_reject%': ['Promise', 'reject'],
		'%Promise_resolve%': ['Promise', 'resolve'],
		'%RangeErrorPrototype%': ['RangeError', 'prototype'],
		'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
		'%RegExpPrototype%': ['RegExp', 'prototype'],
		'%SetPrototype%': ['Set', 'prototype'],
		'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
		'%StringPrototype%': ['String', 'prototype'],
		'%SymbolPrototype%': ['Symbol', 'prototype'],
		'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
		'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
		'%TypeErrorPrototype%': ['TypeError', 'prototype'],
		'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
		'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
		'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
		'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
		'%URIErrorPrototype%': ['URIError', 'prototype'],
		'%WeakMapPrototype%': ['WeakMap', 'prototype'],
		'%WeakSetPrototype%': ['WeakSet', 'prototype']
	};

	var bind = functionBind;
	var hasOwn$2 = src;
	var $concat$1 = bind.call(Function.call, Array.prototype.concat);
	var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
	var $replace$1 = bind.call(Function.call, String.prototype.replace);
	var $strSlice = bind.call(Function.call, String.prototype.slice);

	/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
	var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
	var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
	var stringToPath = function stringToPath(string) {
		var first = $strSlice(string, 0, 1);
		var last = $strSlice(string, -1);
		if (first === '%' && last !== '%') {
			throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
		} else if (last === '%' && first !== '%') {
			throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
		}
		var result = [];
		$replace$1(string, rePropName, function (match, number, quote, subString) {
			result[result.length] = quote ? $replace$1(subString, reEscapeChar, '$1') : number || match;
		});
		return result;
	};
	/* end adaptation */

	var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
		var intrinsicName = name;
		var alias;
		if (hasOwn$2(LEGACY_ALIASES, intrinsicName)) {
			alias = LEGACY_ALIASES[intrinsicName];
			intrinsicName = '%' + alias[0] + '%';
		}

		if (hasOwn$2(INTRINSICS, intrinsicName)) {
			var value = INTRINSICS[intrinsicName];
			if (value === needsEval) {
				value = doEval(intrinsicName);
			}
			if (typeof value === 'undefined' && !allowMissing) {
				throw new $TypeError$3('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
			}

			return {
				alias: alias,
				name: intrinsicName,
				value: value
			};
		}

		throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
	};

	var getIntrinsic = function GetIntrinsic(name, allowMissing) {
		if (typeof name !== 'string' || name.length === 0) {
			throw new $TypeError$3('intrinsic name must be a non-empty string');
		}
		if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
			throw new $TypeError$3('"allowMissing" argument must be a boolean');
		}

		var parts = stringToPath(name);
		var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

		var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
		var intrinsicRealName = intrinsic.name;
		var value = intrinsic.value;
		var skipFurtherCaching = false;

		var alias = intrinsic.alias;
		if (alias) {
			intrinsicBaseName = alias[0];
			$spliceApply(parts, $concat$1([0, 1], alias));
		}

		for (var i = 1, isOwn = true; i < parts.length; i += 1) {
			var part = parts[i];
			var first = $strSlice(part, 0, 1);
			var last = $strSlice(part, -1);
			if (
				(
					(first === '"' || first === "'" || first === '`')
					|| (last === '"' || last === "'" || last === '`')
				)
				&& first !== last
			) {
				throw new $SyntaxError('property names with quotes must have matching quotes');
			}
			if (part === 'constructor' || !isOwn) {
				skipFurtherCaching = true;
			}

			intrinsicBaseName += '.' + part;
			intrinsicRealName = '%' + intrinsicBaseName + '%';

			if (hasOwn$2(INTRINSICS, intrinsicRealName)) {
				value = INTRINSICS[intrinsicRealName];
			} else if (value != null) {
				if (!(part in value)) {
					if (!allowMissing) {
						throw new $TypeError$3('base intrinsic for ' + name + ' exists, but the property is not available.');
					}
					return void undefined$1;
				}
				if ($gOPD$2 && (i + 1) >= parts.length) {
					var desc = $gOPD$2(value, part);
					isOwn = !!desc;

					// By convention, when a data property is converted to an accessor
					// property to emulate a data property that does not suffer from
					// the override mistake, that accessor's getter is marked with
					// an `originalValue` property. Here, when we detect this, we
					// uphold the illusion by pretending to see that original data
					// property, i.e., returning the value rather than the getter
					// itself.
					if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
						value = desc.get;
					} else {
						value = value[part];
					}
				} else {
					isOwn = hasOwn$2(value, part);
					value = value[part];
				}

				if (isOwn && !skipFurtherCaching) {
					INTRINSICS[intrinsicRealName] = value;
				}
			}
		}
		return value;
	};

	var callBind$4 = {exports: {}};

	(function (module) {

	var bind = functionBind;
	var GetIntrinsic = getIntrinsic;

	var $apply = GetIntrinsic('%Function.prototype.apply%');
	var $call = GetIntrinsic('%Function.prototype.call%');
	var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

	var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
	var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
	var $max = GetIntrinsic('%Math.max%');

	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
		} catch (e) {
			// IE 8 has a broken defineProperty
			$defineProperty = null;
		}
	}

	module.exports = function callBind(originalFunction) {
		var func = $reflectApply(bind, $call, arguments);
		if ($gOPD && $defineProperty) {
			var desc = $gOPD(func, 'length');
			if (desc.configurable) {
				// original length, plus the receiver, minus any additional arguments (after the receiver)
				$defineProperty(
					func,
					'length',
					{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
				);
			}
		}
		return func;
	};

	var applyBind = function applyBind() {
		return $reflectApply(bind, $apply, arguments);
	};

	if ($defineProperty) {
		$defineProperty(module.exports, 'apply', { value: applyBind });
	} else {
		module.exports.apply = applyBind;
	}
	}(callBind$4));

	var GetIntrinsic$4 = getIntrinsic;

	var callBind$3 = callBind$4.exports;

	var $indexOf$1 = callBind$3(GetIntrinsic$4('String.prototype.indexOf'));

	var callBound$9 = function callBoundIntrinsic(name, allowMissing) {
		var intrinsic = GetIntrinsic$4(name, !!allowMissing);
		if (typeof intrinsic === 'function' && $indexOf$1(name, '.prototype.') > -1) {
			return callBind$3(intrinsic);
		}
		return intrinsic;
	};

	var hasToStringTag$7 = shams();
	var callBound$8 = callBound$9;

	var $toString$4 = callBound$8('Object.prototype.toString');

	var isStandardArguments = function isArguments(value) {
		if (hasToStringTag$7 && value && typeof value === 'object' && Symbol.toStringTag in value) {
			return false;
		}
		return $toString$4(value) === '[object Arguments]';
	};

	var isLegacyArguments = function isArguments(value) {
		if (isStandardArguments(value)) {
			return true;
		}
		return value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			$toString$4(value) !== '[object Array]' &&
			$toString$4(value.callee) === '[object Function]';
	};

	var supportsStandardArguments = (function () {
		return isStandardArguments(arguments);
	}());

	isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

	var isArguments$1 = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

	var keys$1 = objectKeys$1;
	var hasSymbols$2 = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

	var toStr$5 = Object.prototype.toString;
	var concat = Array.prototype.concat;
	var origDefineProperty = Object.defineProperty;

	var isFunction = function (fn) {
		return typeof fn === 'function' && toStr$5.call(fn) === '[object Function]';
	};

	var arePropertyDescriptorsSupported = function () {
		var obj = {};
		try {
			origDefineProperty(obj, 'x', { enumerable: false, value: obj });
			// eslint-disable-next-line no-unused-vars, no-restricted-syntax
			for (var _ in obj) { // jscs:ignore disallowUnusedVariables
				return false;
			}
			return obj.x === obj;
		} catch (e) { /* this is IE 8. */
			return false;
		}
	};
	var supportsDescriptors$2 = origDefineProperty && arePropertyDescriptorsSupported();

	var defineProperty$1 = function (object, name, value, predicate) {
		if (name in object && (!isFunction(predicate) || !predicate())) {
			return;
		}
		if (supportsDescriptors$2) {
			origDefineProperty(object, name, {
				configurable: true,
				enumerable: false,
				value: value,
				writable: true
			});
		} else {
			object[name] = value;
		}
	};

	var defineProperties$1 = function (object, map) {
		var predicates = arguments.length > 2 ? arguments[2] : {};
		var props = keys$1(map);
		if (hasSymbols$2) {
			props = concat.call(props, Object.getOwnPropertySymbols(map));
		}
		for (var i = 0; i < props.length; i += 1) {
			defineProperty$1(object, props[i], map[props[i]], predicates[props[i]]);
		}
	};

	defineProperties$1.supportsDescriptors = !!supportsDescriptors$2;

	var defineProperties_1 = defineProperties$1;

	var numberIsNaN = function (value) {
		return value !== value;
	};

	var implementation$8 = function is(a, b) {
		if (a === 0 && b === 0) {
			return 1 / a === 1 / b;
		}
		if (a === b) {
			return true;
		}
		if (numberIsNaN(a) && numberIsNaN(b)) {
			return true;
		}
		return false;
	};

	var implementation$7 = implementation$8;

	var polyfill$4 = function getPolyfill() {
		return typeof Object.is === 'function' ? Object.is : implementation$7;
	};

	var getPolyfill$5 = polyfill$4;
	var define$3 = defineProperties_1;

	var shim$5 = function shimObjectIs() {
		var polyfill = getPolyfill$5();
		define$3(Object, { is: polyfill }, {
			is: function testObjectIs() {
				return Object.is !== polyfill;
			}
		});
		return polyfill;
	};

	var define$2 = defineProperties_1;
	var callBind$2 = callBind$4.exports;

	var implementation$6 = implementation$8;
	var getPolyfill$4 = polyfill$4;
	var shim$4 = shim$5;

	var polyfill$3 = callBind$2(getPolyfill$4(), Object);

	define$2(polyfill$3, {
		getPolyfill: getPolyfill$4,
		implementation: implementation$6,
		shim: shim$4
	});

	var objectIs = polyfill$3;

	var callBound$7 = callBound$9;
	var hasToStringTag$6 = shams();
	var has$1;
	var $exec;
	var isRegexMarker;
	var badStringifier;

	if (hasToStringTag$6) {
		has$1 = callBound$7('Object.prototype.hasOwnProperty');
		$exec = callBound$7('RegExp.prototype.exec');
		isRegexMarker = {};

		var throwRegexMarker = function () {
			throw isRegexMarker;
		};
		badStringifier = {
			toString: throwRegexMarker,
			valueOf: throwRegexMarker
		};

		if (typeof Symbol.toPrimitive === 'symbol') {
			badStringifier[Symbol.toPrimitive] = throwRegexMarker;
		}
	}

	var $toString$3 = callBound$7('Object.prototype.toString');
	var gOPD$3 = Object.getOwnPropertyDescriptor;
	var regexClass = '[object RegExp]';

	var isRegex$1 = hasToStringTag$6
		// eslint-disable-next-line consistent-return
		? function isRegex(value) {
			if (!value || typeof value !== 'object') {
				return false;
			}

			var descriptor = gOPD$3(value, 'lastIndex');
			var hasLastIndexDataProperty = descriptor && has$1(descriptor, 'value');
			if (!hasLastIndexDataProperty) {
				return false;
			}

			try {
				$exec(value, badStringifier);
			} catch (e) {
				return e === isRegexMarker;
			}
		}
		: function isRegex(value) {
			// In older browsers, typeof regex incorrectly returns 'function'
			if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
				return false;
			}

			return $toString$3(value) === regexClass;
		};

	var $Object = Object;
	var $TypeError$2 = TypeError;

	var implementation$5 = function flags() {
		if (this != null && this !== $Object(this)) {
			throw new $TypeError$2('RegExp.prototype.flags getter called on non-object');
		}
		var result = '';
		if (this.global) {
			result += 'g';
		}
		if (this.ignoreCase) {
			result += 'i';
		}
		if (this.multiline) {
			result += 'm';
		}
		if (this.dotAll) {
			result += 's';
		}
		if (this.unicode) {
			result += 'u';
		}
		if (this.sticky) {
			result += 'y';
		}
		return result;
	};

	var implementation$4 = implementation$5;

	var supportsDescriptors$1 = defineProperties_1.supportsDescriptors;
	var $gOPD$1 = Object.getOwnPropertyDescriptor;
	var $TypeError$1 = TypeError;

	var polyfill$2 = function getPolyfill() {
		if (!supportsDescriptors$1) {
			throw new $TypeError$1('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
		}
		if ((/a/mig).flags === 'gim') {
			var descriptor = $gOPD$1(RegExp.prototype, 'flags');
			if (descriptor && typeof descriptor.get === 'function' && typeof (/a/).dotAll === 'boolean') {
				return descriptor.get;
			}
		}
		return implementation$4;
	};

	var supportsDescriptors = defineProperties_1.supportsDescriptors;
	var getPolyfill$3 = polyfill$2;
	var gOPD$2 = Object.getOwnPropertyDescriptor;
	var defineProperty = Object.defineProperty;
	var TypeErr = TypeError;
	var getProto = Object.getPrototypeOf;
	var regex = /a/;

	var shim$3 = function shimFlags() {
		if (!supportsDescriptors || !getProto) {
			throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
		}
		var polyfill = getPolyfill$3();
		var proto = getProto(regex);
		var descriptor = gOPD$2(proto, 'flags');
		if (!descriptor || descriptor.get !== polyfill) {
			defineProperty(proto, 'flags', {
				configurable: true,
				enumerable: false,
				get: polyfill
			});
		}
		return polyfill;
	};

	var define$1 = defineProperties_1;
	var callBind$1 = callBind$4.exports;

	var implementation$3 = implementation$5;
	var getPolyfill$2 = polyfill$2;
	var shim$2 = shim$3;

	var flagsBound = callBind$1(implementation$3);

	define$1(flagsBound, {
		getPolyfill: getPolyfill$2,
		implementation: implementation$3,
		shim: shim$2
	});

	var regexp_prototype_flags = flagsBound;

	var toString$1 = {}.toString;

	var isarray = Array.isArray || function (arr) {
	  return toString$1.call(arr) == '[object Array]';
	};

	var getDay = Date.prototype.getDay;
	var tryDateObject = function tryDateGetDayCall(value) {
		try {
			getDay.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};

	var toStr$4 = Object.prototype.toString;
	var dateClass = '[object Date]';
	var hasToStringTag$5 = shams();

	var isDateObject = function isDateObject(value) {
		if (typeof value !== 'object' || value === null) {
			return false;
		}
		return hasToStringTag$5 ? tryDateObject(value) : toStr$4.call(value) === dateClass;
	};

	var strValue = String.prototype.valueOf;
	var tryStringObject = function tryStringObject(value) {
		try {
			strValue.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};
	var toStr$3 = Object.prototype.toString;
	var strClass = '[object String]';
	var hasToStringTag$4 = shams();

	var isString$2 = function isString(value) {
		if (typeof value === 'string') {
			return true;
		}
		if (typeof value !== 'object') {
			return false;
		}
		return hasToStringTag$4 ? tryStringObject(value) : toStr$3.call(value) === strClass;
	};

	var numToStr = Number.prototype.toString;
	var tryNumberObject = function tryNumberObject(value) {
		try {
			numToStr.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};
	var toStr$2 = Object.prototype.toString;
	var numClass = '[object Number]';
	var hasToStringTag$3 = shams();

	var isNumberObject = function isNumberObject(value) {
		if (typeof value === 'number') {
			return true;
		}
		if (typeof value !== 'object') {
			return false;
		}
		return hasToStringTag$3 ? tryNumberObject(value) : toStr$2.call(value) === numClass;
	};

	var callBound$6 = callBound$9;
	var $boolToStr = callBound$6('Boolean.prototype.toString');
	var $toString$2 = callBound$6('Object.prototype.toString');

	var tryBooleanObject = function booleanBrandCheck(value) {
		try {
			$boolToStr(value);
			return true;
		} catch (e) {
			return false;
		}
	};
	var boolClass = '[object Boolean]';
	var hasToStringTag$2 = shams();

	var isBooleanObject = function isBoolean(value) {
		if (typeof value === 'boolean') {
			return true;
		}
		if (value === null || typeof value !== 'object') {
			return false;
		}
		return hasToStringTag$2 && Symbol.toStringTag in value ? tryBooleanObject(value) : $toString$2(value) === boolClass;
	};

	var isSymbol$2 = {exports: {}};

	var toStr$1 = Object.prototype.toString;
	var hasSymbols$1 = hasSymbols$4();

	if (hasSymbols$1) {
		var symToStr = Symbol.prototype.toString;
		var symStringRegex = /^Symbol\(.*\)$/;
		var isSymbolObject = function isRealSymbolObject(value) {
			if (typeof value.valueOf() !== 'symbol') {
				return false;
			}
			return symStringRegex.test(symToStr.call(value));
		};

		isSymbol$2.exports = function isSymbol(value) {
			if (typeof value === 'symbol') {
				return true;
			}
			if (toStr$1.call(value) !== '[object Symbol]') {
				return false;
			}
			try {
				return isSymbolObject(value);
			} catch (e) {
				return false;
			}
		};
	} else {

		isSymbol$2.exports = function isSymbol(value) {
			// this environment does not support Symbols.
			return false ;
		};
	}

	var isBigint = {exports: {}};

	var $BigInt = commonjsGlobal.BigInt;

	var hasBigints = function hasNativeBigInts() {
		return typeof $BigInt === 'function'
			&& typeof BigInt === 'function'
			&& typeof $BigInt(42) === 'bigint' // eslint-disable-line no-magic-numbers
			&& typeof BigInt(42) === 'bigint'; // eslint-disable-line no-magic-numbers
	};

	var hasBigInts = hasBigints();

	if (hasBigInts) {
		var bigIntValueOf$1 = BigInt.prototype.valueOf;
		var tryBigInt = function tryBigIntObject(value) {
			try {
				bigIntValueOf$1.call(value);
				return true;
			} catch (e) {
			}
			return false;
		};

		isBigint.exports = function isBigInt(value) {
			if (
				value === null
				|| typeof value === 'undefined'
				|| typeof value === 'boolean'
				|| typeof value === 'string'
				|| typeof value === 'number'
				|| typeof value === 'symbol'
				|| typeof value === 'function'
			) {
				return false;
			}
			if (typeof value === 'bigint') {
				return true;
			}

			return tryBigInt(value);
		};
	} else {
		isBigint.exports = function isBigInt(value) {
			return false ;
		};
	}

	var isString$1 = isString$2;
	var isNumber$1 = isNumberObject;
	var isBoolean$1 = isBooleanObject;
	var isSymbol$1 = isSymbol$2.exports;
	var isBigInt$1 = isBigint.exports;

	// eslint-disable-next-line consistent-return
	var whichBoxedPrimitive$1 = function whichBoxedPrimitive(value) {
		// eslint-disable-next-line eqeqeq
		if (value == null || (typeof value !== 'object' && typeof value !== 'function')) {
			return null;
		}
		if (isString$1(value)) {
			return 'String';
		}
		if (isNumber$1(value)) {
			return 'Number';
		}
		if (isBoolean$1(value)) {
			return 'Boolean';
		}
		if (isSymbol$1(value)) {
			return 'Symbol';
		}
		if (isBigInt$1(value)) {
			return 'BigInt';
		}
	};

	var $Map$2 = typeof Map === 'function' && Map.prototype ? Map : null;
	var $Set$2 = typeof Set === 'function' && Set.prototype ? Set : null;

	var exported$2;

	if (!$Map$2) {
		// eslint-disable-next-line no-unused-vars
		exported$2 = function isMap(x) {
			// `Map` is not present in this environment.
			return false;
		};
	}

	var $mapHas$5 = $Map$2 ? Map.prototype.has : null;
	var $setHas$4 = $Set$2 ? Set.prototype.has : null;
	if (!exported$2 && !$mapHas$5) {
		// eslint-disable-next-line no-unused-vars
		exported$2 = function isMap(x) {
			// `Map` does not have a `has` method
			return false;
		};
	}

	var isMap$2 = exported$2 || function isMap(x) {
		if (!x || typeof x !== 'object') {
			return false;
		}
		try {
			$mapHas$5.call(x);
			if ($setHas$4) {
				try {
					$setHas$4.call(x);
				} catch (e) {
					return true;
				}
			}
			return x instanceof $Map$2; // core-js workaround, pre-v2.5.0
		} catch (e) {}
		return false;
	};

	var $Map$1 = typeof Map === 'function' && Map.prototype ? Map : null;
	var $Set$1 = typeof Set === 'function' && Set.prototype ? Set : null;

	var exported$1;

	if (!$Set$1) {
		// eslint-disable-next-line no-unused-vars
		exported$1 = function isSet(x) {
			// `Set` is not present in this environment.
			return false;
		};
	}

	var $mapHas$4 = $Map$1 ? Map.prototype.has : null;
	var $setHas$3 = $Set$1 ? Set.prototype.has : null;
	if (!exported$1 && !$setHas$3) {
		// eslint-disable-next-line no-unused-vars
		exported$1 = function isSet(x) {
			// `Set` does not have a `has` method
			return false;
		};
	}

	var isSet$2 = exported$1 || function isSet(x) {
		if (!x || typeof x !== 'object') {
			return false;
		}
		try {
			$setHas$3.call(x);
			if ($mapHas$4) {
				try {
					$mapHas$4.call(x);
				} catch (e) {
					return true;
				}
			}
			return x instanceof $Set$1; // core-js workaround, pre-v2.5.0
		} catch (e) {}
		return false;
	};

	var $WeakMap$1 = typeof WeakMap === 'function' && WeakMap.prototype ? WeakMap : null;
	var $WeakSet$1 = typeof WeakSet === 'function' && WeakSet.prototype ? WeakSet : null;

	var exported;

	if (!$WeakMap$1) {
		// eslint-disable-next-line no-unused-vars
		exported = function isWeakMap(x) {
			// `WeakMap` is not present in this environment.
			return false;
		};
	}

	var $mapHas$3 = $WeakMap$1 ? $WeakMap$1.prototype.has : null;
	var $setHas$2 = $WeakSet$1 ? $WeakSet$1.prototype.has : null;
	if (!exported && !$mapHas$3) {
		// eslint-disable-next-line no-unused-vars
		exported = function isWeakMap(x) {
			// `WeakMap` does not have a `has` method
			return false;
		};
	}

	var isWeakmap = exported || function isWeakMap(x) {
		if (!x || typeof x !== 'object') {
			return false;
		}
		try {
			$mapHas$3.call(x, $mapHas$3);
			if ($setHas$2) {
				try {
					$setHas$2.call(x, $setHas$2);
				} catch (e) {
					return true;
				}
			}
			return x instanceof $WeakMap$1; // core-js workaround, pre-v3
		} catch (e) {}
		return false;
	};

	var isWeakset = {exports: {}};

	var GetIntrinsic$3 = getIntrinsic;
	var callBound$5 = callBound$9;

	var $WeakSet = GetIntrinsic$3('%WeakSet%', true);

	var $setHas$1 = callBound$5('WeakSet.prototype.has', true);

	if ($setHas$1) {
		var $mapHas$2 = callBound$5('WeakMap.prototype.has', true);

		isWeakset.exports = function isWeakSet(x) {
			if (!x || typeof x !== 'object') {
				return false;
			}
			try {
				$setHas$1(x, $setHas$1);
				if ($mapHas$2) {
					try {
						$mapHas$2(x, $mapHas$2);
					} catch (e) {
						return true;
					}
				}
				return x instanceof $WeakSet; // core-js workaround, pre-v3
			} catch (e) {}
			return false;
		};
	} else {
		// eslint-disable-next-line no-unused-vars
		isWeakset.exports = function isWeakSet(x) {
			// `WeakSet` does not exist, or does not have a `has` method
			return false;
		};
	}

	var isMap$1 = isMap$2;
	var isSet$1 = isSet$2;
	var isWeakMap$1 = isWeakmap;
	var isWeakSet$1 = isWeakset.exports;

	var whichCollection$1 = function whichCollection(value) {
		if (value && typeof value === 'object') {
			if (isMap$1(value)) {
				return 'Map';
			}
			if (isSet$1(value)) {
				return 'Set';
			}
			if (isWeakMap$1(value)) {
				return 'WeakMap';
			}
			if (isWeakSet$1(value)) {
				return 'WeakSet';
			}
		}
		return false;
	};

	// this should only run in node >= 13.2, so it
	// does not need any of the intense fallbacks that old node/browsers do

	var $iterator = Symbol.iterator;
	var node = function getIterator(iterable) {
		// alternatively, `iterable[$iterator]?.()`
		if (iterable != null && typeof iterable[$iterator] !== 'undefined') {
			return iterable[$iterator]();
		}
	};

	var util_inspect = require$$0$1.inspect;

	var hasMap = typeof Map === 'function' && Map.prototype;
	var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
	var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
	var mapForEach = hasMap && Map.prototype.forEach;
	var hasSet = typeof Set === 'function' && Set.prototype;
	var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
	var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
	var setForEach = hasSet && Set.prototype.forEach;
	var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
	var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
	var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
	var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
	var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
	var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
	var booleanValueOf = Boolean.prototype.valueOf;
	var objectToString = Object.prototype.toString;
	var functionToString = Function.prototype.toString;
	var $match = String.prototype.match;
	var $slice$2 = String.prototype.slice;
	var $replace = String.prototype.replace;
	var $toUpperCase = String.prototype.toUpperCase;
	var $toLowerCase = String.prototype.toLowerCase;
	var $test = RegExp.prototype.test;
	var $concat = Array.prototype.concat;
	var $join = Array.prototype.join;
	var $arrSlice = Array.prototype.slice;
	var $floor = Math.floor;
	var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
	var gOPS = Object.getOwnPropertySymbols;
	var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
	var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
	// ie, `has-tostringtag/shams
	var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
	    ? Symbol.toStringTag
	    : null;
	var isEnumerable = Object.prototype.propertyIsEnumerable;

	var gPO$1 = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
	    [].__proto__ === Array.prototype // eslint-disable-line no-proto
	        ? function (O) {
	            return O.__proto__; // eslint-disable-line no-proto
	        }
	        : null
	);

	function addNumericSeparator(num, str) {
	    if (
	        num === Infinity
	        || num === -Infinity
	        || num !== num
	        || (num && num > -1000 && num < 1000)
	        || $test.call(/e/, str)
	    ) {
	        return str;
	    }
	    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
	    if (typeof num === 'number') {
	        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
	        if (int !== num) {
	            var intStr = String(int);
	            var dec = $slice$2.call(str, intStr.length + 1);
	            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
	        }
	    }
	    return $replace.call(str, sepRegex, '$&_');
	}

	var inspectCustom = util_inspect.custom;
	var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;

	var objectInspect = function inspect_(obj, options, depth, seen) {
	    var opts = options || {};

	    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
	        throw new TypeError('option "quoteStyle" must be "single" or "double"');
	    }
	    if (
	        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
	            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
	            : opts.maxStringLength !== null
	        )
	    ) {
	        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
	    }
	    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
	    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
	        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
	    }

	    if (
	        has(opts, 'indent')
	        && opts.indent !== null
	        && opts.indent !== '\t'
	        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
	    ) {
	        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
	    }
	    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
	        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
	    }
	    var numericSeparator = opts.numericSeparator;

	    if (typeof obj === 'undefined') {
	        return 'undefined';
	    }
	    if (obj === null) {
	        return 'null';
	    }
	    if (typeof obj === 'boolean') {
	        return obj ? 'true' : 'false';
	    }

	    if (typeof obj === 'string') {
	        return inspectString(obj, opts);
	    }
	    if (typeof obj === 'number') {
	        if (obj === 0) {
	            return Infinity / obj > 0 ? '0' : '-0';
	        }
	        var str = String(obj);
	        return numericSeparator ? addNumericSeparator(obj, str) : str;
	    }
	    if (typeof obj === 'bigint') {
	        var bigIntStr = String(obj) + 'n';
	        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
	    }

	    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
	    if (typeof depth === 'undefined') { depth = 0; }
	    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
	        return isArray$1(obj) ? '[Array]' : '[Object]';
	    }

	    var indent = getIndent(opts, depth);

	    if (typeof seen === 'undefined') {
	        seen = [];
	    } else if (indexOf(seen, obj) >= 0) {
	        return '[Circular]';
	    }

	    function inspect(value, from, noIndent) {
	        if (from) {
	            seen = $arrSlice.call(seen);
	            seen.push(from);
	        }
	        if (noIndent) {
	            var newOpts = {
	                depth: opts.depth
	            };
	            if (has(opts, 'quoteStyle')) {
	                newOpts.quoteStyle = opts.quoteStyle;
	            }
	            return inspect_(value, newOpts, depth + 1, seen);
	        }
	        return inspect_(value, opts, depth + 1, seen);
	    }

	    if (typeof obj === 'function') {
	        var name = nameOf(obj);
	        var keys = arrObjKeys(obj, inspect);
	        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
	    }
	    if (isSymbol(obj)) {
	        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
	        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
	    }
	    if (isElement(obj)) {
	        var s = '<' + $toLowerCase.call(String(obj.nodeName));
	        var attrs = obj.attributes || [];
	        for (var i = 0; i < attrs.length; i++) {
	            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
	        }
	        s += '>';
	        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
	        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
	        return s;
	    }
	    if (isArray$1(obj)) {
	        if (obj.length === 0) { return '[]'; }
	        var xs = arrObjKeys(obj, inspect);
	        if (indent && !singleLineValues(xs)) {
	            return '[' + indentedJoin(xs, indent) + ']';
	        }
	        return '[ ' + $join.call(xs, ', ') + ' ]';
	    }
	    if (isError(obj)) {
	        var parts = arrObjKeys(obj, inspect);
	        if ('cause' in obj && !isEnumerable.call(obj, 'cause')) {
	            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
	        }
	        if (parts.length === 0) { return '[' + String(obj) + ']'; }
	        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
	    }
	    if (typeof obj === 'object' && customInspect) {
	        if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {
	            return obj[inspectSymbol]();
	        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
	            return obj.inspect();
	        }
	    }
	    if (isMap(obj)) {
	        var mapParts = [];
	        mapForEach.call(obj, function (value, key) {
	            mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
	        });
	        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
	    }
	    if (isSet(obj)) {
	        var setParts = [];
	        setForEach.call(obj, function (value) {
	            setParts.push(inspect(value, obj));
	        });
	        return collectionOf('Set', setSize.call(obj), setParts, indent);
	    }
	    if (isWeakMap(obj)) {
	        return weakCollectionOf('WeakMap');
	    }
	    if (isWeakSet(obj)) {
	        return weakCollectionOf('WeakSet');
	    }
	    if (isWeakRef(obj)) {
	        return weakCollectionOf('WeakRef');
	    }
	    if (isNumber(obj)) {
	        return markBoxed(inspect(Number(obj)));
	    }
	    if (isBigInt(obj)) {
	        return markBoxed(inspect(bigIntValueOf.call(obj)));
	    }
	    if (isBoolean(obj)) {
	        return markBoxed(booleanValueOf.call(obj));
	    }
	    if (isString(obj)) {
	        return markBoxed(inspect(String(obj)));
	    }
	    if (!isDate$1(obj) && !isRegExp(obj)) {
	        var ys = arrObjKeys(obj, inspect);
	        var isPlainObject = gPO$1 ? gPO$1(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
	        var protoTag = obj instanceof Object ? '' : 'null prototype';
	        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice$2.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
	        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
	        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
	        if (ys.length === 0) { return tag + '{}'; }
	        if (indent) {
	            return tag + '{' + indentedJoin(ys, indent) + '}';
	        }
	        return tag + '{ ' + $join.call(ys, ', ') + ' }';
	    }
	    return String(obj);
	};

	function wrapQuotes(s, defaultStyle, opts) {
	    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
	    return quoteChar + s + quoteChar;
	}

	function quote(s) {
	    return $replace.call(String(s), /"/g, '&quot;');
	}

	function isArray$1(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isDate$1(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
	function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

	// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
	function isSymbol(obj) {
	    if (hasShammedSymbols) {
	        return obj && typeof obj === 'object' && obj instanceof Symbol;
	    }
	    if (typeof obj === 'symbol') {
	        return true;
	    }
	    if (!obj || typeof obj !== 'object' || !symToString) {
	        return false;
	    }
	    try {
	        symToString.call(obj);
	        return true;
	    } catch (e) {}
	    return false;
	}

	function isBigInt(obj) {
	    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
	        return false;
	    }
	    try {
	        bigIntValueOf.call(obj);
	        return true;
	    } catch (e) {}
	    return false;
	}

	var hasOwn$1 = Object.prototype.hasOwnProperty || function (key) { return key in this; };
	function has(obj, key) {
	    return hasOwn$1.call(obj, key);
	}

	function toStr(obj) {
	    return objectToString.call(obj);
	}

	function nameOf(f) {
	    if (f.name) { return f.name; }
	    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
	    if (m) { return m[1]; }
	    return null;
	}

	function indexOf(xs, x) {
	    if (xs.indexOf) { return xs.indexOf(x); }
	    for (var i = 0, l = xs.length; i < l; i++) {
	        if (xs[i] === x) { return i; }
	    }
	    return -1;
	}

	function isMap(x) {
	    if (!mapSize || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        mapSize.call(x);
	        try {
	            setSize.call(x);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof Map; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isWeakMap(x) {
	    if (!weakMapHas || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        weakMapHas.call(x, weakMapHas);
	        try {
	            weakSetHas.call(x, weakSetHas);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isWeakRef(x) {
	    if (!weakRefDeref || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        weakRefDeref.call(x);
	        return true;
	    } catch (e) {}
	    return false;
	}

	function isSet(x) {
	    if (!setSize || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        setSize.call(x);
	        try {
	            mapSize.call(x);
	        } catch (m) {
	            return true;
	        }
	        return x instanceof Set; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isWeakSet(x) {
	    if (!weakSetHas || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        weakSetHas.call(x, weakSetHas);
	        try {
	            weakMapHas.call(x, weakMapHas);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isElement(x) {
	    if (!x || typeof x !== 'object') { return false; }
	    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
	        return true;
	    }
	    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
	}

	function inspectString(str, opts) {
	    if (str.length > opts.maxStringLength) {
	        var remaining = str.length - opts.maxStringLength;
	        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
	        return inspectString($slice$2.call(str, 0, opts.maxStringLength), opts) + trailer;
	    }
	    // eslint-disable-next-line no-control-regex
	    var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
	    return wrapQuotes(s, 'single', opts);
	}

	function lowbyte(c) {
	    var n = c.charCodeAt(0);
	    var x = {
	        8: 'b',
	        9: 't',
	        10: 'n',
	        12: 'f',
	        13: 'r'
	    }[n];
	    if (x) { return '\\' + x; }
	    return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
	}

	function markBoxed(str) {
	    return 'Object(' + str + ')';
	}

	function weakCollectionOf(type) {
	    return type + ' { ? }';
	}

	function collectionOf(type, size, entries, indent) {
	    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
	    return type + ' (' + size + ') {' + joinedEntries + '}';
	}

	function singleLineValues(xs) {
	    for (var i = 0; i < xs.length; i++) {
	        if (indexOf(xs[i], '\n') >= 0) {
	            return false;
	        }
	    }
	    return true;
	}

	function getIndent(opts, depth) {
	    var baseIndent;
	    if (opts.indent === '\t') {
	        baseIndent = '\t';
	    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
	        baseIndent = $join.call(Array(opts.indent + 1), ' ');
	    } else {
	        return null;
	    }
	    return {
	        base: baseIndent,
	        prev: $join.call(Array(depth + 1), baseIndent)
	    };
	}

	function indentedJoin(xs, indent) {
	    if (xs.length === 0) { return ''; }
	    var lineJoiner = '\n' + indent.prev + indent.base;
	    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
	}

	function arrObjKeys(obj, inspect) {
	    var isArr = isArray$1(obj);
	    var xs = [];
	    if (isArr) {
	        xs.length = obj.length;
	        for (var i = 0; i < obj.length; i++) {
	            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
	        }
	    }
	    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
	    var symMap;
	    if (hasShammedSymbols) {
	        symMap = {};
	        for (var k = 0; k < syms.length; k++) {
	            symMap['$' + syms[k]] = syms[k];
	        }
	    }

	    for (var key in obj) { // eslint-disable-line no-restricted-syntax
	        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
	        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
	        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
	            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
	            continue; // eslint-disable-line no-restricted-syntax, no-continue
	        } else if ($test.call(/[^\w$]/, key)) {
	            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
	        } else {
	            xs.push(key + ': ' + inspect(obj[key], obj));
	        }
	    }
	    if (typeof gOPS === 'function') {
	        for (var j = 0; j < syms.length; j++) {
	            if (isEnumerable.call(obj, syms[j])) {
	                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
	            }
	        }
	    }
	    return xs;
	}

	var GetIntrinsic$2 = getIntrinsic;
	var callBound$4 = callBound$9;
	var inspect = objectInspect;

	var $TypeError = GetIntrinsic$2('%TypeError%');
	var $WeakMap = GetIntrinsic$2('%WeakMap%', true);
	var $Map = GetIntrinsic$2('%Map%', true);

	var $weakMapGet = callBound$4('WeakMap.prototype.get', true);
	var $weakMapSet = callBound$4('WeakMap.prototype.set', true);
	var $weakMapHas = callBound$4('WeakMap.prototype.has', true);
	var $mapGet$1 = callBound$4('Map.prototype.get', true);
	var $mapSet = callBound$4('Map.prototype.set', true);
	var $mapHas$1 = callBound$4('Map.prototype.has', true);

	/*
	 * This function traverses the list returning the node corresponding to the
	 * given key.
	 *
	 * That node is also moved to the head of the list, so that if it's accessed
	 * again we don't need to traverse the whole list. By doing so, all the recently
	 * used nodes can be accessed relatively quickly.
	 */
	var listGetNode = function (list, key) { // eslint-disable-line consistent-return
		for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
			if (curr.key === key) {
				prev.next = curr.next;
				curr.next = list.next;
				list.next = curr; // eslint-disable-line no-param-reassign
				return curr;
			}
		}
	};

	var listGet = function (objects, key) {
		var node = listGetNode(objects, key);
		return node && node.value;
	};
	var listSet = function (objects, key, value) {
		var node = listGetNode(objects, key);
		if (node) {
			node.value = value;
		} else {
			// Prepend the new node to the beginning of the list
			objects.next = { // eslint-disable-line no-param-reassign
				key: key,
				next: objects.next,
				value: value
			};
		}
	};
	var listHas = function (objects, key) {
		return !!listGetNode(objects, key);
	};

	var sideChannel = function getSideChannel() {
		var $wm;
		var $m;
		var $o;
		var channel = {
			assert: function (key) {
				if (!channel.has(key)) {
					throw new $TypeError('Side channel does not contain ' + inspect(key));
				}
			},
			get: function (key) { // eslint-disable-line consistent-return
				if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
					if ($wm) {
						return $weakMapGet($wm, key);
					}
				} else if ($Map) {
					if ($m) {
						return $mapGet$1($m, key);
					}
				} else {
					if ($o) { // eslint-disable-line no-lonely-if
						return listGet($o, key);
					}
				}
			},
			has: function (key) {
				if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
					if ($wm) {
						return $weakMapHas($wm, key);
					}
				} else if ($Map) {
					if ($m) {
						return $mapHas$1($m, key);
					}
				} else {
					if ($o) { // eslint-disable-line no-lonely-if
						return listHas($o, key);
					}
				}
				return false;
			},
			set: function (key, value) {
				if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
					if (!$wm) {
						$wm = new $WeakMap();
					}
					$weakMapSet($wm, key, value);
				} else if ($Map) {
					if (!$m) {
						$m = new $Map();
					}
					$mapSet($m, key, value);
				} else {
					if (!$o) {
						/*
						 * Initialize the linked list as an empty node, so that we don't have
						 * to special-case handling of the first node: we can always refer to
						 * it as (previous node).next, instead of something like (list).head
						 */
						$o = { key: {}, next: null };
					}
					listSet($o, key, value);
				}
			}
		};
		return channel;
	};

	var hasOwn = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;

	var foreach = function forEach (obj, fn, ctx) {
	    if (toString.call(fn) !== '[object Function]') {
	        throw new TypeError('iterator must be a function');
	    }
	    var l = obj.length;
	    if (l === +l) {
	        for (var i = 0; i < l; i++) {
	            fn.call(ctx, obj[i], i, obj);
	        }
	    } else {
	        for (var k in obj) {
	            if (hasOwn.call(obj, k)) {
	                fn.call(ctx, obj[k], k, obj);
	            }
	        }
	    }
	};

	var possibleNames = [
		'BigInt64Array',
		'BigUint64Array',
		'Float32Array',
		'Float64Array',
		'Int16Array',
		'Int32Array',
		'Int8Array',
		'Uint16Array',
		'Uint32Array',
		'Uint8Array',
		'Uint8ClampedArray'
	];

	var g$2 = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;

	var availableTypedArrays$2 = function availableTypedArrays() {
		var out = [];
		for (var i = 0; i < possibleNames.length; i++) {
			if (typeof g$2[possibleNames[i]] === 'function') {
				out[out.length] = possibleNames[i];
			}
		}
		return out;
	};

	var GetIntrinsic$1 = getIntrinsic;

	var $gOPD = GetIntrinsic$1('%Object.getOwnPropertyDescriptor%', true);
	if ($gOPD) {
		try {
			$gOPD([], 'length');
		} catch (e) {
			// IE 8 has a broken gOPD
			$gOPD = null;
		}
	}

	var getOwnPropertyDescriptor = $gOPD;

	var forEach$1 = foreach;
	var availableTypedArrays$1 = availableTypedArrays$2;
	var callBound$3 = callBound$9;

	var $toString$1 = callBound$3('Object.prototype.toString');
	var hasToStringTag$1 = shams();

	var g$1 = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;
	var typedArrays$1 = availableTypedArrays$1();

	var $indexOf = callBound$3('Array.prototype.indexOf', true) || function indexOf(array, value) {
		for (var i = 0; i < array.length; i += 1) {
			if (array[i] === value) {
				return i;
			}
		}
		return -1;
	};
	var $slice$1 = callBound$3('String.prototype.slice');
	var toStrTags$1 = {};
	var gOPD$1 = getOwnPropertyDescriptor;
	var getPrototypeOf$1 = Object.getPrototypeOf; // require('getprototypeof');
	if (hasToStringTag$1 && gOPD$1 && getPrototypeOf$1) {
		forEach$1(typedArrays$1, function (typedArray) {
			var arr = new g$1[typedArray]();
			if (Symbol.toStringTag in arr) {
				var proto = getPrototypeOf$1(arr);
				var descriptor = gOPD$1(proto, Symbol.toStringTag);
				if (!descriptor) {
					var superProto = getPrototypeOf$1(proto);
					descriptor = gOPD$1(superProto, Symbol.toStringTag);
				}
				toStrTags$1[typedArray] = descriptor.get;
			}
		});
	}

	var tryTypedArrays$1 = function tryAllTypedArrays(value) {
		var anyTrue = false;
		forEach$1(toStrTags$1, function (getter, typedArray) {
			if (!anyTrue) {
				try {
					anyTrue = getter.call(value) === typedArray;
				} catch (e) { /**/ }
			}
		});
		return anyTrue;
	};

	var isTypedArray$1 = function isTypedArray(value) {
		if (!value || typeof value !== 'object') { return false; }
		if (!hasToStringTag$1 || !(Symbol.toStringTag in value)) {
			var tag = $slice$1($toString$1(value), 8, -1);
			return $indexOf(typedArrays$1, tag) > -1;
		}
		if (!gOPD$1) { return false; }
		return tryTypedArrays$1(value);
	};

	var forEach = foreach;
	var availableTypedArrays = availableTypedArrays$2;
	var callBound$2 = callBound$9;

	var $toString = callBound$2('Object.prototype.toString');
	var hasToStringTag = shams();

	var g = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;
	var typedArrays = availableTypedArrays();

	var $slice = callBound$2('String.prototype.slice');
	var toStrTags = {};
	var gOPD = getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
	if (hasToStringTag && gOPD && getPrototypeOf) {
		forEach(typedArrays, function (typedArray) {
			if (typeof g[typedArray] === 'function') {
				var arr = new g[typedArray]();
				if (Symbol.toStringTag in arr) {
					var proto = getPrototypeOf(arr);
					var descriptor = gOPD(proto, Symbol.toStringTag);
					if (!descriptor) {
						var superProto = getPrototypeOf(proto);
						descriptor = gOPD(superProto, Symbol.toStringTag);
					}
					toStrTags[typedArray] = descriptor.get;
				}
			}
		});
	}

	var tryTypedArrays = function tryAllTypedArrays(value) {
		var foundName = false;
		forEach(toStrTags, function (getter, typedArray) {
			if (!foundName) {
				try {
					var name = getter.call(value);
					if (name === typedArray) {
						foundName = name;
					}
				} catch (e) {}
			}
		});
		return foundName;
	};

	var isTypedArray = isTypedArray$1;

	var whichTypedArray$1 = function whichTypedArray(value) {
		if (!isTypedArray(value)) { return false; }
		if (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }
		return tryTypedArrays(value);
	};

	// modified from https://github.com/es-shims/es6-shim
	var keys = objectKeys$1;
	var canBeObject = function (obj) {
		return typeof obj !== 'undefined' && obj !== null;
	};
	var hasSymbols = shams$1();
	var callBound$1 = callBound$9;
	var toObject = Object;
	var $push = callBound$1('Array.prototype.push');
	var $propIsEnumerable = callBound$1('Object.prototype.propertyIsEnumerable');
	var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;

	// eslint-disable-next-line no-unused-vars
	var implementation$2 = function assign(target, source1) {
		if (!canBeObject(target)) { throw new TypeError('target must be an object'); }
		var objTarget = toObject(target);
		var s, source, i, props, syms, value, key;
		for (s = 1; s < arguments.length; ++s) {
			source = toObject(arguments[s]);
			props = keys(source);
			var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
			if (getSymbols) {
				syms = getSymbols(source);
				for (i = 0; i < syms.length; ++i) {
					key = syms[i];
					if ($propIsEnumerable(source, key)) {
						$push(props, key);
					}
				}
			}
			for (i = 0; i < props.length; ++i) {
				key = props[i];
				value = source[key];
				if ($propIsEnumerable(source, key)) {
					objTarget[key] = value;
				}
			}
		}
		return objTarget;
	};

	var implementation$1 = implementation$2;

	var lacksProperEnumerationOrder = function () {
		if (!Object.assign) {
			return false;
		}
		/*
		 * v8, specifically in node 4.x, has a bug with incorrect property enumeration order
		 * note: this does not detect the bug unless there's 20 characters
		 */
		var str = 'abcdefghijklmnopqrst';
		var letters = str.split('');
		var map = {};
		for (var i = 0; i < letters.length; ++i) {
			map[letters[i]] = letters[i];
		}
		var obj = Object.assign({}, map);
		var actual = '';
		for (var k in obj) {
			actual += k;
		}
		return str !== actual;
	};

	var assignHasPendingExceptions = function () {
		if (!Object.assign || !Object.preventExtensions) {
			return false;
		}
		/*
		 * Firefox 37 still has "pending exception" logic in its Object.assign implementation,
		 * which is 72% slower than our shim, and Firefox 40's native implementation.
		 */
		var thrower = Object.preventExtensions({ 1: 2 });
		try {
			Object.assign(thrower, 'xy');
		} catch (e) {
			return thrower[1] === 'y';
		}
		return false;
	};

	var polyfill$1 = function getPolyfill() {
		if (!Object.assign) {
			return implementation$1;
		}
		if (lacksProperEnumerationOrder()) {
			return implementation$1;
		}
		if (assignHasPendingExceptions()) {
			return implementation$1;
		}
		return Object.assign;
	};

	var define = defineProperties_1;
	var getPolyfill$1 = polyfill$1;

	var shim$1 = function shimAssign() {
		var polyfill = getPolyfill$1();
		define(
			Object,
			{ assign: polyfill },
			{ assign: function () { return Object.assign !== polyfill; } }
		);
		return polyfill;
	};

	var defineProperties = defineProperties_1;
	var callBind = callBind$4.exports;

	var implementation = implementation$2;
	var getPolyfill = polyfill$1;
	var shim = shim$1;

	var polyfill = callBind.apply(getPolyfill());
	// eslint-disable-next-line no-unused-vars
	var bound = function assign(target, source1) {
		return polyfill(Object, arguments);
	};

	defineProperties(bound, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	var object_assign = bound;

	var objectKeys = objectKeys$1;
	var isArguments = isArguments$1;
	var is = objectIs;
	var isRegex = isRegex$1;
	var flags = regexp_prototype_flags;
	var isArray = isarray;
	var isDate = isDateObject;
	var whichBoxedPrimitive = whichBoxedPrimitive$1;
	var GetIntrinsic = getIntrinsic;
	var callBound = callBound$9;
	var whichCollection = whichCollection$1;
	var getIterator = node;
	var getSideChannel = sideChannel;
	var whichTypedArray = whichTypedArray$1;
	var assign = object_assign;

	var $getTime = callBound('Date.prototype.getTime');
	var gPO = Object.getPrototypeOf;
	var $objToString = callBound('Object.prototype.toString');

	var $Set = GetIntrinsic('%Set%', true);
	var $mapHas = callBound('Map.prototype.has', true);
	var $mapGet = callBound('Map.prototype.get', true);
	var $mapSize = callBound('Map.prototype.size', true);
	var $setAdd = callBound('Set.prototype.add', true);
	var $setDelete = callBound('Set.prototype.delete', true);
	var $setHas = callBound('Set.prototype.has', true);
	var $setSize = callBound('Set.prototype.size', true);

	// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L401-L414
	function setHasEqualElement(set, val1, opts, channel) {
	  var i = getIterator(set);
	  var result;
	  while ((result = i.next()) && !result.done) {
	    if (internalDeepEqual(val1, result.value, opts, channel)) { // eslint-disable-line no-use-before-define
	      // Remove the matching element to make sure we do not check that again.
	      $setDelete(set, result.value);
	      return true;
	    }
	  }

	  return false;
	}

	// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L416-L439
	function findLooseMatchingPrimitives(prim) {
	  if (typeof prim === 'undefined') {
	    return null;
	  }
	  if (typeof prim === 'object') { // Only pass in null as object!
	    return void 0;
	  }
	  if (typeof prim === 'symbol') {
	    return false;
	  }
	  if (typeof prim === 'string' || typeof prim === 'number') {
	    // Loose equal entries exist only if the string is possible to convert to a regular number and not NaN.
	    return +prim === +prim; // eslint-disable-line no-implicit-coercion
	  }
	  return true;
	}

	// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L449-L460
	function mapMightHaveLoosePrim(a, b, prim, item, opts, channel) {
	  var altValue = findLooseMatchingPrimitives(prim);
	  if (altValue != null) {
	    return altValue;
	  }
	  var curB = $mapGet(b, altValue);
	  var looseOpts = assign({}, opts, { strict: false });
	  if (
	    (typeof curB === 'undefined' && !$mapHas(b, altValue))
	    // eslint-disable-next-line no-use-before-define
	    || !internalDeepEqual(item, curB, looseOpts, channel)
	  ) {
	    return false;
	  }
	  // eslint-disable-next-line no-use-before-define
	  return !$mapHas(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
	}

	// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L441-L447
	function setMightHaveLoosePrim(a, b, prim) {
	  var altValue = findLooseMatchingPrimitives(prim);
	  if (altValue != null) {
	    return altValue;
	  }

	  return $setHas(b, altValue) && !$setHas(a, altValue);
	}

	// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L518-L533
	function mapHasEqualEntry(set, map, key1, item1, opts, channel) {
	  var i = getIterator(set);
	  var result;
	  var key2;
	  while ((result = i.next()) && !result.done) {
	    key2 = result.value;
	    if (
	      // eslint-disable-next-line no-use-before-define
	      internalDeepEqual(key1, key2, opts, channel)
	      // eslint-disable-next-line no-use-before-define
	      && internalDeepEqual(item1, $mapGet(map, key2), opts, channel)
	    ) {
	      $setDelete(set, key2);
	      return true;
	    }
	  }

	  return false;
	}

	function internalDeepEqual(actual, expected, options, channel) {
	  var opts = options || {};

	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (opts.strict ? is(actual, expected) : actual === expected) {
	    return true;
	  }

	  var actualBoxed = whichBoxedPrimitive(actual);
	  var expectedBoxed = whichBoxedPrimitive(expected);
	  if (actualBoxed !== expectedBoxed) {
	    return false;
	  }

	  // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.
	  if (!actual || !expected || (typeof actual !== 'object' && typeof expected !== 'object')) {
	    return opts.strict ? is(actual, expected) : actual == expected; // eslint-disable-line eqeqeq
	  }

	  /*
	   * 7.4. For all other Object pairs, including Array objects, equivalence is
	   * determined by having the same number of owned properties (as verified
	   * with Object.prototype.hasOwnProperty.call), the same set of keys
	   * (although not necessarily the same order), equivalent values for every
	   * corresponding key, and an identical 'prototype' property. Note: this
	   * accounts for both named and indexed properties on Arrays.
	   */
	  // see https://github.com/nodejs/node/commit/d3aafd02efd3a403d646a3044adcf14e63a88d32 for memos/channel inspiration

	  var hasActual = channel.has(actual);
	  var hasExpected = channel.has(expected);
	  var sentinel;
	  if (hasActual && hasExpected) {
	    if (channel.get(actual) === channel.get(expected)) {
	      return true;
	    }
	  } else {
	    sentinel = {};
	  }
	  if (!hasActual) { channel.set(actual, sentinel); }
	  if (!hasExpected) { channel.set(expected, sentinel); }

	  // eslint-disable-next-line no-use-before-define
	  return objEquiv(actual, expected, opts, channel);
	}

	function isBuffer(x) {
	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') {
	    return false;
	  }
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') {
	    return false;
	  }

	  return !!(x.constructor && x.constructor.isBuffer && x.constructor.isBuffer(x));
	}

	function setEquiv(a, b, opts, channel) {
	  if ($setSize(a) !== $setSize(b)) {
	    return false;
	  }
	  var iA = getIterator(a);
	  var iB = getIterator(b);
	  var resultA;
	  var resultB;
	  var set;
	  while ((resultA = iA.next()) && !resultA.done) {
	    if (resultA.value && typeof resultA.value === 'object') {
	      if (!set) { set = new $Set(); }
	      $setAdd(set, resultA.value);
	    } else if (!$setHas(b, resultA.value)) {
	      if (opts.strict) { return false; }
	      if (!setMightHaveLoosePrim(a, b, resultA.value)) {
	        return false;
	      }
	      if (!set) { set = new $Set(); }
	      $setAdd(set, resultA.value);
	    }
	  }
	  if (set) {
	    while ((resultB = iB.next()) && !resultB.done) {
	      // We have to check if a primitive value is already matching and only if it's not, go hunting for it.
	      if (resultB.value && typeof resultB.value === 'object') {
	        if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {
	          return false;
	        }
	      } else if (
	        !opts.strict
	        && !$setHas(a, resultB.value)
	        && !setHasEqualElement(set, resultB.value, opts.strict, channel)
	      ) {
	        return false;
	      }
	    }
	    return $setSize(set) === 0;
	  }
	  return true;
	}

	function mapEquiv(a, b, opts, channel) {
	  if ($mapSize(a) !== $mapSize(b)) {
	    return false;
	  }
	  var iA = getIterator(a);
	  var iB = getIterator(b);
	  var resultA;
	  var resultB;
	  var set;
	  var key;
	  var item1;
	  var item2;
	  while ((resultA = iA.next()) && !resultA.done) {
	    key = resultA.value[0];
	    item1 = resultA.value[1];
	    if (key && typeof key === 'object') {
	      if (!set) { set = new $Set(); }
	      $setAdd(set, key);
	    } else {
	      item2 = $mapGet(b, key);
	      if ((typeof item2 === 'undefined' && !$mapHas(b, key)) || !internalDeepEqual(item1, item2, opts, channel)) {
	        if (opts.strict) {
	          return false;
	        }
	        if (!mapMightHaveLoosePrim(a, b, key, item1, opts, channel)) {
	          return false;
	        }
	        if (!set) { set = new $Set(); }
	        $setAdd(set, key);
	      }
	    }
	  }

	  if (set) {
	    while ((resultB = iB.next()) && !resultB.done) {
	      key = resultB.value[0];
	      item2 = resultB.value[1];
	      if (key && typeof key === 'object') {
	        if (!mapHasEqualEntry(set, a, key, item2, opts, channel)) {
	          return false;
	        }
	      } else if (
	        !opts.strict
	        && (!a.has(key) || !internalDeepEqual($mapGet(a, key), item2, opts, channel))
	        && !mapHasEqualEntry(set, a, key, item2, assign({}, opts, { strict: false }), channel)
	      ) {
	        return false;
	      }
	    }
	    return $setSize(set) === 0;
	  }
	  return true;
	}

	function objEquiv(a, b, opts, channel) {
	  /* eslint max-statements: [2, 100], max-lines-per-function: [2, 120], max-depth: [2, 5] */
	  var i, key;

	  if (typeof a !== typeof b) { return false; }
	  if (a == null || b == null) { return false; }

	  if ($objToString(a) !== $objToString(b)) { return false; }

	  if (isArguments(a) !== isArguments(b)) { return false; }

	  var aIsArray = isArray(a);
	  var bIsArray = isArray(b);
	  if (aIsArray !== bIsArray) { return false; }

	  // TODO: replace when a cross-realm brand check is available
	  var aIsError = a instanceof Error;
	  var bIsError = b instanceof Error;
	  if (aIsError !== bIsError) { return false; }
	  if (aIsError || bIsError) {
	    if (a.name !== b.name || a.message !== b.message) { return false; }
	  }

	  var aIsRegex = isRegex(a);
	  var bIsRegex = isRegex(b);
	  if (aIsRegex !== bIsRegex) { return false; }
	  if ((aIsRegex || bIsRegex) && (a.source !== b.source || flags(a) !== flags(b))) {
	    return false;
	  }

	  var aIsDate = isDate(a);
	  var bIsDate = isDate(b);
	  if (aIsDate !== bIsDate) { return false; }
	  if (aIsDate || bIsDate) { // && would work too, because both are true or both false here
	    if ($getTime(a) !== $getTime(b)) { return false; }
	  }
	  if (opts.strict && gPO && gPO(a) !== gPO(b)) { return false; }

	  if (whichTypedArray(a) !== whichTypedArray(b)) {
	    return false;
	  }

	  var aIsBuffer = isBuffer(a);
	  var bIsBuffer = isBuffer(b);
	  if (aIsBuffer !== bIsBuffer) { return false; }
	  if (aIsBuffer || bIsBuffer) { // && would work too, because both are true or both false here
	    if (a.length !== b.length) { return false; }
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) { return false; }
	    }
	    return true;
	  }

	  if (typeof a !== typeof b) { return false; }

	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  // having the same number of owned properties (keys incorporates hasOwnProperty)
	  if (ka.length !== kb.length) { return false; }

	  // the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  // ~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i]) { return false; } // eslint-disable-line eqeqeq
	  }

	  // equivalent values for every corresponding key, and ~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!internalDeepEqual(a[key], b[key], opts, channel)) { return false; }
	  }

	  var aCollection = whichCollection(a);
	  var bCollection = whichCollection(b);
	  if (aCollection !== bCollection) {
	    return false;
	  }
	  if (aCollection === 'Set' || bCollection === 'Set') { // aCollection === bCollection
	    return setEquiv(a, b, opts, channel);
	  }
	  if (aCollection === 'Map') { // aCollection === bCollection
	    return mapEquiv(a, b, opts, channel);
	  }

	  return true;
	}

	var deepEqual = function deepEqual(a, b, opts) {
	  return internalDeepEqual(a, b, opts, getSideChannel());
	};

	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(pathContext, "__esModule", { value: true });
	pathContext.emptyContext = pathContext.PathContext = pathContext.isPathContext = void 0;
	const federation_internals_1$5 = dist$2;
	const deep_equal_1 = __importDefault(deepEqual);
	function isPathContext(v) {
	    return v instanceof PathContext;
	}
	pathContext.isPathContext = isPathContext;
	function addExtractedDirective(operation, directiveName, addTo) {
	    const applied = operation.appliedDirectivesOf(directiveName);
	    if (applied.length > 0) {
	        (0, federation_internals_1$5.assert)(applied.length === 1, () => `${directiveName} shouldn't be repeated on ${operation}`);
	        const value = applied[0].arguments()['if'];
	        addTo.push([directiveName, value]);
	    }
	}
	class PathContext {
	    constructor(directives) {
	        this.directives = directives;
	    }
	    isEmpty() {
	        return this.directives.length === 0;
	    }
	    size() {
	        return this.directives.length;
	    }
	    withContextOf(operation) {
	        if (operation.appliedDirectives.length === 0) {
	            return this;
	        }
	        const newDirectives = [];
	        addExtractedDirective(operation, 'skip', newDirectives);
	        addExtractedDirective(operation, 'include', newDirectives);
	        return newDirectives.length === 0
	            ? this
	            : new PathContext(newDirectives.concat(this.directives));
	    }
	    equals(that) {
	        return (0, deep_equal_1.default)(this.directives, that.directives);
	    }
	    toString() {
	        return '[' + this.directives.map(([name, cond]) => `@${name}(if: ${cond})`).join(', ') + ']';
	    }
	}
	pathContext.PathContext = PathContext;
	pathContext.emptyContext = new PathContext([]);

	Object.defineProperty(pathTree, "__esModule", { value: true });
	pathTree.traversePathTree = pathTree.isRootPathTree = pathTree.PathTree = void 0;
	const federation_internals_1$4 = dist$2;
	const querygraph_1$2 = querygraph;
	const pathContext_1 = pathContext;
	function opTriggerEquality(t1, t2) {
	    if (t1 === t2) {
	        return true;
	    }
	    if ((0, pathContext_1.isPathContext)(t1)) {
	        return (0, pathContext_1.isPathContext)(t2) && t1.equals(t2);
	    }
	    if ((0, pathContext_1.isPathContext)(t2)) {
	        return false;
	    }
	    return t1.equals(t2);
	}
	function findTriggerIdx(triggerEquality, forIndex, trigger) {
	    for (let i = 0; i < forIndex.length; i++) {
	        if (triggerEquality(forIndex[i][0], trigger)) {
	            return i;
	        }
	    }
	    return -1;
	}
	class PathTree {
	    constructor(graph, vertex, triggerEquality, childs) {
	        this.graph = graph;
	        this.vertex = vertex;
	        this.triggerEquality = triggerEquality;
	        this.childs = childs;
	    }
	    static create(graph, root, triggerEquality) {
	        return new PathTree(graph, root, triggerEquality, []);
	    }
	    static createOp(graph, root) {
	        return this.create(graph, root, opTriggerEquality);
	    }
	    static createFromOpPaths(graph, root, paths) {
	        (0, federation_internals_1$4.assert)(paths.length > 0, `Should compute on empty paths`);
	        return this.createFromPaths(graph, opTriggerEquality, root, paths.map(p => p[Symbol.iterator]()));
	    }
	    static createFromPaths(graph, triggerEquality, currentVertex, paths) {
	        const maxEdges = graph.outEdges(currentVertex).length;
	        const forEdgeIndex = new Array(maxEdges + 1);
	        const newVertices = new Array(maxEdges);
	        const order = new Array(maxEdges + 1);
	        let currentOrder = 0;
	        let totalChilds = 0;
	        for (const path of paths) {
	            const iterResult = path.next();
	            if (iterResult.done) {
	                continue;
	            }
	            const [edge, trigger, conditions] = iterResult.value;
	            const idx = edge ? edge.index : maxEdges;
	            if (edge) {
	                newVertices[idx] = edge.tail;
	            }
	            const forIndex = forEdgeIndex[idx];
	            if (forIndex) {
	                const triggerIdx = findTriggerIdx(triggerEquality, forIndex, trigger);
	                if (triggerIdx < 0) {
	                    forIndex.push([trigger, conditions, [path]]);
	                    totalChilds++;
	                }
	                else {
	                    const existing = forIndex[triggerIdx];
	                    const existingCond = existing[1];
	                    const mergedConditions = existingCond ? (conditions ? existingCond.mergeIfNotEqual(conditions) : existingCond) : conditions;
	                    const newPaths = existing[2];
	                    newPaths.push(path);
	                    forIndex[triggerIdx] = [trigger, mergedConditions, newPaths];
	                }
	            }
	            else {
	                order[currentOrder++] = idx;
	                forEdgeIndex[idx] = [[trigger, conditions, [path]]];
	                totalChilds++;
	            }
	        }
	        const childs = new Array(totalChilds);
	        let idx = 0;
	        for (let i = 0; i < currentOrder; i++) {
	            const edgeIndex = order[i];
	            const index = (edgeIndex === maxEdges ? null : edgeIndex);
	            const newVertex = index === null ? currentVertex : newVertices[edgeIndex];
	            const values = forEdgeIndex[edgeIndex];
	            for (const [trigger, conditions, subPaths] of values) {
	                childs[idx++] = {
	                    index,
	                    trigger,
	                    conditions,
	                    tree: this.createFromPaths(graph, triggerEquality, newVertex, subPaths)
	                };
	            }
	        }
	        (0, federation_internals_1$4.assert)(idx === totalChilds, () => `Expected to have ${totalChilds} childs but only ${idx} added`);
	        return new PathTree(graph, currentVertex, triggerEquality, childs);
	    }
	    static mergeAllOpTrees(graph, root, trees) {
	        return this.mergeAllTreesInternal(graph, opTriggerEquality, root, trees);
	    }
	    static mergeAllTreesInternal(graph, triggerEquality, currentVertex, trees) {
	        const maxEdges = graph.outEdges(currentVertex).length;
	        const forEdgeIndex = new Array(maxEdges + 1);
	        const newVertices = new Array(maxEdges);
	        const order = new Array(maxEdges + 1);
	        let currentOrder = 0;
	        let totalChilds = 0;
	        for (const tree of trees) {
	            for (const child of tree.childs) {
	                const idx = child.index === null ? maxEdges : child.index;
	                if (!newVertices[idx]) {
	                    newVertices[idx] = child.tree.vertex;
	                }
	                const forIndex = forEdgeIndex[idx];
	                if (forIndex) {
	                    const triggerIdx = findTriggerIdx(triggerEquality, forIndex, child.trigger);
	                    if (triggerIdx < 0) {
	                        forIndex.push([child.trigger, child.conditions, [child.tree]]);
	                        totalChilds++;
	                    }
	                    else {
	                        const existing = forIndex[triggerIdx];
	                        const existingCond = existing[1];
	                        const mergedConditions = existingCond ? (child.conditions ? existingCond.mergeIfNotEqual(child.conditions) : existingCond) : child.conditions;
	                        const newTrees = existing[2];
	                        newTrees.push(child.tree);
	                        forIndex[triggerIdx] = [child.trigger, mergedConditions, newTrees];
	                    }
	                }
	                else {
	                    order[currentOrder++] = idx;
	                    forEdgeIndex[idx] = [[child.trigger, child.conditions, [child.tree]]];
	                    totalChilds++;
	                }
	            }
	        }
	        const childs = new Array(totalChilds);
	        let idx = 0;
	        for (let i = 0; i < currentOrder; i++) {
	            const edgeIndex = order[i];
	            const index = (edgeIndex === maxEdges ? null : edgeIndex);
	            const newVertex = index === null ? currentVertex : newVertices[edgeIndex];
	            const values = forEdgeIndex[edgeIndex];
	            for (const [trigger, conditions, subTrees] of values) {
	                childs[idx++] = {
	                    index,
	                    trigger,
	                    conditions,
	                    tree: this.mergeAllTreesInternal(graph, triggerEquality, newVertex, subTrees)
	                };
	            }
	        }
	        (0, federation_internals_1$4.assert)(idx === totalChilds, () => `Expected to have ${totalChilds} childs but only ${idx} added`);
	        return new PathTree(graph, currentVertex, triggerEquality, childs);
	    }
	    childCount() {
	        return this.childs.length;
	    }
	    isLeaf() {
	        return this.childCount() === 0;
	    }
	    *childElements(reverseOrder = false) {
	        if (reverseOrder) {
	            for (let i = this.childs.length - 1; i >= 0; i--) {
	                yield this.element(i);
	            }
	        }
	        else {
	            for (let i = 0; i < this.childs.length; i++) {
	                yield this.element(i);
	            }
	        }
	    }
	    element(i) {
	        const child = this.childs[i];
	        return [
	            (child.index === null ? null : this.graph.outEdge(this.vertex, child.index)),
	            child.trigger,
	            child.conditions,
	            child.tree
	        ];
	    }
	    mergeChilds(c1, c2) {
	        const cond1 = c1.conditions;
	        const cond2 = c2.conditions;
	        return {
	            index: c1.index,
	            trigger: c1.trigger,
	            conditions: cond1 ? (cond2 ? cond1.mergeIfNotEqual(cond2) : cond1) : cond2,
	            tree: c1.tree.merge(c2.tree)
	        };
	    }
	    mergeIfNotEqual(other) {
	        if (this.equalsSameRoot(other)) {
	            return this;
	        }
	        return this.merge(other);
	    }
	    merge(other) {
	        if (this === other) {
	            return this;
	        }
	        (0, federation_internals_1$4.assert)(other.graph === this.graph, 'Cannot merge path tree build on another graph');
	        (0, federation_internals_1$4.assert)(other.vertex.index === this.vertex.index, () => `Cannot merge path tree rooted at vertex ${other.vertex} into tree rooted at other vertex ${this.vertex}`);
	        if (!other.childs.length) {
	            return this;
	        }
	        if (!this.childs.length) {
	            return other;
	        }
	        const mergeIndexes = new Array(other.childs.length);
	        let countToAdd = 0;
	        for (let i = 0; i < other.childs.length; i++) {
	            const otherChild = other.childs[i];
	            const idx = this.findIndex(otherChild.trigger, otherChild.index);
	            mergeIndexes[i] = idx;
	            if (idx < 0) {
	                ++countToAdd;
	            }
	        }
	        const thisSize = this.childs.length;
	        const newSize = thisSize + countToAdd;
	        const newChilds = (0, federation_internals_1$4.copyWitNewLength)(this.childs, newSize);
	        let addIdx = thisSize;
	        for (let i = 0; i < other.childs.length; i++) {
	            const idx = mergeIndexes[i];
	            if (idx < 0) {
	                newChilds[addIdx++] = other.childs[i];
	            }
	            else {
	                newChilds[idx] = this.mergeChilds(newChilds[idx], other.childs[i]);
	            }
	        }
	        (0, federation_internals_1$4.assert)(addIdx === newSize, () => `Expected ${newSize} childs but only got ${addIdx}`);
	        return new PathTree(this.graph, this.vertex, this.triggerEquality, newChilds);
	    }
	    equalsSameRoot(that) {
	        if (this === that) {
	            return true;
	        }
	        return (0, federation_internals_1$4.arrayEquals)(this.childs, that.childs, (c1, c2) => {
	            return c1.index === c2.index
	                && c1.trigger === c2.trigger
	                && (c1.conditions ? (c2.conditions ? c1.conditions.equalsSameRoot(c2.conditions) : false) : !c2.conditions)
	                && c1.tree.equalsSameRoot(c2.tree);
	        });
	    }
	    concat(other) {
	        (0, federation_internals_1$4.assert)(other.graph === this.graph, 'Cannot concat path tree build on another graph');
	        (0, federation_internals_1$4.assert)(other.vertex.index === this.vertex.index, () => `Cannot concat path tree rooted at vertex ${other.vertex} into tree rooted at other vertex ${this.vertex}`);
	        if (!other.childs.length) {
	            return this;
	        }
	        if (!this.childs.length) {
	            return other;
	        }
	        const newChilds = this.childs.concat(other.childs);
	        return new PathTree(this.graph, this.vertex, this.triggerEquality, newChilds);
	    }
	    mergePath(path) {
	        (0, federation_internals_1$4.assert)(path.graph === this.graph, 'Cannot merge path build on another graph');
	        (0, federation_internals_1$4.assert)(path.root.index === this.vertex.index, () => `Cannot merge path rooted at vertex ${path.root} into tree rooted at other vertex ${this.vertex}`);
	        return this.mergePathInternal(path[Symbol.iterator]());
	    }
	    childsFromPathElements(currentVertex, elements) {
	        const iterResult = elements.next();
	        if (iterResult.done) {
	            return [];
	        }
	        const [edge, trigger, conditions] = iterResult.value;
	        const edgeIndex = (edge ? edge.index : null);
	        currentVertex = edge ? edge.tail : currentVertex;
	        return [{
	                index: edgeIndex,
	                trigger: trigger,
	                conditions: conditions,
	                tree: new PathTree(this.graph, currentVertex, this.triggerEquality, this.childsFromPathElements(currentVertex, elements))
	            }];
	    }
	    mergePathInternal(elements) {
	        const iterResult = elements.next();
	        if (iterResult.done) {
	            return this;
	        }
	        const [edge, trigger, conditions] = iterResult.value;
	        (0, federation_internals_1$4.assert)(!edge || edge.head.index === this.vertex.index, () => `Next element head of ${edge} is not equal to current tree vertex ${this.vertex}`);
	        const edgeIndex = (edge ? edge.index : null);
	        const idx = this.findIndex(trigger, edgeIndex);
	        if (idx < 0) {
	            const currentVertex = edge ? edge.tail : this.vertex;
	            return new PathTree(this.graph, this.vertex, this.triggerEquality, this.childs.concat({
	                index: edgeIndex,
	                trigger: trigger,
	                conditions: conditions,
	                tree: new PathTree(this.graph, currentVertex, this.triggerEquality, this.childsFromPathElements(currentVertex, elements))
	            }));
	        }
	        else {
	            const newChilds = this.childs.concat();
	            const existing = newChilds[idx];
	            newChilds[idx] = {
	                index: existing.index,
	                trigger: existing.trigger,
	                conditions: conditions ? (existing.conditions ? existing.conditions.merge(conditions) : conditions) : existing.conditions,
	                tree: existing.tree.mergePathInternal(elements)
	            };
	            return new PathTree(this.graph, this.vertex, this.triggerEquality, newChilds);
	        }
	    }
	    findIndex(trigger, edgeIndex) {
	        for (let i = 0; i < this.childs.length; i++) {
	            const child = this.childs[i];
	            if (child.index === edgeIndex && this.triggerEquality(child.trigger, trigger)) {
	                return i;
	            }
	        }
	        return -1;
	    }
	    isAllInSameSubgraph() {
	        return this.isAllInSameSubgraphInternal(this.vertex.source);
	    }
	    isAllInSameSubgraphInternal(target) {
	        return this.vertex.source === target
	            && this.childs.every(c => c.tree.isAllInSameSubgraphInternal(target));
	    }
	    toString(indent = "", includeConditions = false) {
	        return this.toStringInternal(indent, includeConditions);
	    }
	    toStringInternal(indent, includeConditions) {
	        if (this.isLeaf()) {
	            return this.vertex.toString();
	        }
	        return this.vertex + ':\n' +
	            this.childs.map(child => indent
	                + ` -> [${child.index}] `
	                + (includeConditions && child.conditions ? `!! {\n${indent + "  "}${child.conditions.toString(indent + "     ", true)}\n${indent} } ` : "")
	                + `${child.trigger} = `
	                + child.tree.toStringInternal(indent + "  ", includeConditions)).join('\n');
	    }
	}
	pathTree.PathTree = PathTree;
	function isRootPathTree(tree) {
	    return (0, querygraph_1$2.isRootVertex)(tree.vertex);
	}
	pathTree.isRootPathTree = isRootPathTree;
	function traversePathTree(pathTree, onEdges) {
	    for (const [edge, _, conditions, childTree] of pathTree.childElements()) {
	        if (edge) {
	            onEdges(edge);
	        }
	        if (conditions) {
	            traversePathTree(conditions, onEdges);
	        }
	        traversePathTree(childTree, onEdges);
	    }
	}
	pathTree.traversePathTree = traversePathTree;

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.advanceSimultaneousPathsWithOperation = exports.advanceOptionsToString = exports.simultaneousPathsToString = exports.SimultaneousPathsWithLazyIndirectPaths = exports.getLocallySatisfiableKey = exports.addConditionExclusion = exports.sameExcludedEdges = exports.advancePathWithTransition = exports.isUnadvanceable = exports.Unadvanceables = exports.UnadvanceableReason = exports.unsatisfiedConditionsResolution = exports.noConditionsResolution = exports.UnsatisfiedConditionReason = exports.traversePath = exports.terminateWithNonRequestedTypenameField = exports.isRootPath = exports.GraphPath = void 0;
	const federation_internals_1 = dist$2;
	const pathTree_1 = pathTree;
	const querygraph_1 = querygraph;
	const pathContext_1 = pathContext;
	const debug = (0, federation_internals_1.newDebugLogger)('path');
	function updateRuntimeTypes(currentRuntimeTypes, edge) {
	    var _a;
	    if (!edge) {
	        return currentRuntimeTypes;
	    }
	    switch (edge.transition.kind) {
	        case 'FieldCollection':
	            const field = edge.transition.definition;
	            if (!(0, federation_internals_1.isCompositeType)((0, federation_internals_1.baseType)(field.type))) {
	                return [];
	            }
	            const newRuntimeTypes = [];
	            for (const parentType of currentRuntimeTypes) {
	                const fieldType = (_a = parentType.field(field.name)) === null || _a === void 0 ? void 0 : _a.type;
	                if (fieldType) {
	                    for (const type of (0, federation_internals_1.possibleRuntimeTypes)((0, federation_internals_1.baseType)(fieldType))) {
	                        if (!newRuntimeTypes.includes(type)) {
	                            newRuntimeTypes.push(type);
	                        }
	                    }
	                }
	            }
	            return newRuntimeTypes;
	        case 'DownCast':
	            const castedType = edge.transition.castedType;
	            const castedRuntimeTypes = (0, federation_internals_1.possibleRuntimeTypes)(castedType);
	            return currentRuntimeTypes.filter(t => castedRuntimeTypes.includes(t));
	        case 'KeyResolution':
	            const currentType = edge.tail.type;
	            return (0, federation_internals_1.possibleRuntimeTypes)(currentType);
	        case 'RootTypeResolution':
	        case 'SubgraphEnteringTransition':
	            (0, federation_internals_1.assert)((0, federation_internals_1.isObjectType)(edge.tail.type), () => `Query edge should be between object type but got ${edge}`);
	            return [edge.tail.type];
	    }
	}
	function withReplacedLastElement(arr, newLast) {
	    (0, federation_internals_1.assert)(arr.length > 0, 'Should not have been called on empty array');
	    const newArr = new Array(arr.length);
	    for (let i = 0; i < arr.length - 1; i++) {
	        newArr[i] = arr[i];
	    }
	    newArr[arr.length - 1] = newLast;
	    return newArr;
	}
	class GraphPath {
	    constructor(graph, root, tail, edgeTriggers, edgeIndexes, edgeConditions, subgraphEnteringEdgeIndex, subgraphEnteringEdge, subgraphEnteringEdgeCost, edgeToTail, runtimeTypesOfTail, runtimeTypesBeforeTailIfLastIsCast) {
	        this.graph = graph;
	        this.root = root;
	        this.tail = tail;
	        this.edgeTriggers = edgeTriggers;
	        this.edgeIndexes = edgeIndexes;
	        this.edgeConditions = edgeConditions;
	        this.subgraphEnteringEdgeIndex = subgraphEnteringEdgeIndex;
	        this.subgraphEnteringEdge = subgraphEnteringEdge;
	        this.subgraphEnteringEdgeCost = subgraphEnteringEdgeCost;
	        this.edgeToTail = edgeToTail;
	        this.runtimeTypesOfTail = runtimeTypesOfTail;
	        this.runtimeTypesBeforeTailIfLastIsCast = runtimeTypesBeforeTailIfLastIsCast;
	    }
	    static create(graph, root) {
	        const runtimeTypes = (0, querygraph_1.isFederatedGraphRootType)(root.type) ? [] : (0, federation_internals_1.possibleRuntimeTypes)(root.type);
	        return new GraphPath(graph, root, root, [], [], [], -1, undefined, -1, undefined, runtimeTypes);
	    }
	    static fromGraphRoot(graph, rootKind) {
	        const root = graph.root(rootKind);
	        return root ? this.create(graph, root) : undefined;
	    }
	    get size() {
	        return this.edgeIndexes.length;
	    }
	    subgraphJumps() {
	        let jumps = 0;
	        let v = this.root;
	        for (let i = 0; i < this.size; i++) {
	            const edge = this.edgeAt(i, v);
	            if (!edge) {
	                continue;
	            }
	            if (edge.transition.kind === 'KeyResolution' || edge.transition.kind === 'RootTypeResolution') {
	                ++jumps;
	            }
	            v = edge.tail;
	        }
	        return jumps;
	    }
	    [Symbol.iterator]() {
	        const path = this;
	        return {
	            currentIndex: 0,
	            currentVertex: this.root,
	            next() {
	                if (this.currentIndex >= path.size) {
	                    return { done: true, value: undefined };
	                }
	                const idx = this.currentIndex++;
	                const edge = path.edgeAt(idx, this.currentVertex);
	                if (edge) {
	                    this.currentVertex = edge.tail;
	                }
	                return { done: false, value: [edge, path.edgeTriggers[idx], path.edgeConditions[idx]] };
	            }
	        };
	    }
	    lastEdge() {
	        return this.edgeToTail;
	    }
	    lastTrigger() {
	        return this.edgeTriggers[this.size - 1];
	    }
	    tailPossibleRuntimeTypes() {
	        return this.runtimeTypesOfTail;
	    }
	    add(trigger, edge, conditionsResolution) {
	        var _a, _b, _c;
	        (0, federation_internals_1.assert)(!edge || this.tail.index === edge.head.index, () => `Cannot add edge ${edge} to path ending at ${this.tail}`);
	        (0, federation_internals_1.assert)(conditionsResolution.satisfied, 'Should add to a path if the conditions cannot be satisfied');
	        (0, federation_internals_1.assert)(!edge || edge.conditions || !conditionsResolution.pathTree, () => `Shouldn't have conditions paths (got ${conditionsResolution.pathTree}) for edge without conditions (edge: ${edge})`);
	        if (edge && edge.transition.kind === 'DownCast' && this.edgeToTail) {
	            const previousOperation = this.lastTrigger();
	            if (previousOperation instanceof federation_internals_1.FragmentElement && previousOperation.appliedDirectives.length === 0) {
	                const runtimeTypesWithoutPreviousCast = updateRuntimeTypes(this.runtimeTypesBeforeTailIfLastIsCast, edge);
	                if (runtimeTypesWithoutPreviousCast.length > 0
	                    && runtimeTypesWithoutPreviousCast.every(t => this.runtimeTypesOfTail.includes(t))) {
	                    const updatedEdge = this.graph.outEdges(this.edgeToTail.head).find(e => e.tail.type === edge.tail.type);
	                    if (updatedEdge) {
	                        debug.log(() => `Previous cast ${previousOperation} is made obsolete by new cast ${trigger}, removing from path.`);
	                        return new GraphPath(this.graph, this.root, updatedEdge.tail, withReplacedLastElement(this.edgeTriggers, trigger), withReplacedLastElement(this.edgeIndexes, updatedEdge.index), withReplacedLastElement(this.edgeConditions, (_a = conditionsResolution.pathTree) !== null && _a !== void 0 ? _a : null), this.subgraphEnteringEdgeIndex, this.subgraphEnteringEdge, this.subgraphEnteringEdgeCost, updatedEdge, runtimeTypesWithoutPreviousCast, this.runtimeTypesBeforeTailIfLastIsCast);
	                    }
	                }
	            }
	        }
	        let subgraphEnteringEdgeIndex = this.subgraphEnteringEdgeIndex;
	        let subgraphEnteringEdge = this.subgraphEnteringEdge;
	        let subgraphEnteringEdgeCost = this.subgraphEnteringEdgeCost;
	        if (edge && edge.transition.kind === 'KeyResolution') {
	            subgraphEnteringEdgeIndex = this.size;
	            subgraphEnteringEdge = edge;
	            subgraphEnteringEdgeCost = conditionsResolution.cost;
	        }
	        return new GraphPath(this.graph, this.root, edge ? edge.tail : this.tail, this.edgeTriggers.concat(trigger), this.edgeIndexes.concat((edge ? edge.index : null)), this.edgeConditions.concat((_b = conditionsResolution.pathTree) !== null && _b !== void 0 ? _b : null), subgraphEnteringEdgeIndex, subgraphEnteringEdge, subgraphEnteringEdgeCost, edge, updateRuntimeTypes(this.runtimeTypesOfTail, edge), ((_c = edge === null || edge === void 0 ? void 0 : edge.transition) === null || _c === void 0 ? void 0 : _c.kind) === 'DownCast' ? this.runtimeTypesOfTail : undefined);
	    }
	    concat(tailPath) {
	        var _a, _b;
	        (0, federation_internals_1.assert)(this.tail.index === tailPath.root.index, () => `Cannot concat ${tailPath} after ${this}`);
	        if (tailPath.size === 0) {
	            return this;
	        }
	        let prevRuntimeTypes = this.runtimeTypesBeforeTailIfLastIsCast;
	        let runtimeTypes = this.runtimeTypesOfTail;
	        for (const [edge] of tailPath) {
	            prevRuntimeTypes = runtimeTypes;
	            runtimeTypes = updateRuntimeTypes(runtimeTypes, edge);
	        }
	        return new GraphPath(this.graph, this.root, tailPath.tail, this.edgeTriggers.concat(tailPath.edgeTriggers), this.edgeIndexes.concat(tailPath.edgeIndexes), this.edgeConditions.concat(tailPath.edgeConditions), tailPath.subgraphEnteringEdge ? tailPath.subgraphEnteringEdgeIndex : this.subgraphEnteringEdgeIndex, tailPath.subgraphEnteringEdge ? tailPath.subgraphEnteringEdge : this.subgraphEnteringEdge, tailPath.subgraphEnteringEdge ? tailPath.subgraphEnteringEdgeCost : this.subgraphEnteringEdgeCost, tailPath.edgeToTail, runtimeTypes, ((_b = (_a = tailPath.edgeToTail) === null || _a === void 0 ? void 0 : _a.transition) === null || _b === void 0 ? void 0 : _b.kind) === 'DownCast' ? prevRuntimeTypes : undefined);
	    }
	    checkDirectPathFomPreviousSubgraphTo(typeName, triggerToEdge) {
	        if (this.subgraphEnteringEdgeIndex < 0) {
	            return undefined;
	        }
	        (0, federation_internals_1.assert)(this.subgraphEnteringEdge, 'Should have an entering edge since the index is >= 0');
	        let prevSubgraphVertex = this.subgraphEnteringEdge.head;
	        for (let i = this.subgraphEnteringEdgeIndex + 1; i < this.size; i++) {
	            const triggerToMatch = this.edgeTriggers[i];
	            const prevSubgraphMatchingEdge = triggerToEdge(this.graph, prevSubgraphVertex, triggerToMatch);
	            if (prevSubgraphMatchingEdge === null) {
	                continue;
	            }
	            if (!prevSubgraphMatchingEdge || prevSubgraphMatchingEdge.conditions) {
	                return undefined;
	            }
	            prevSubgraphVertex = prevSubgraphMatchingEdge.tail;
	        }
	        return prevSubgraphVertex.type.name === typeName ? prevSubgraphVertex : undefined;
	    }
	    nextEdges() {
	        return this.graph.outEdges(this.tail);
	    }
	    isTerminal() {
	        return this.graph.isTerminal(this.tail);
	    }
	    isRootPath() {
	        return (0, querygraph_1.isRootVertex)(this.root);
	    }
	    mapMainPath(mapper) {
	        const result = new Array(this.size);
	        let v = this.root;
	        for (let i = 0; i < this.size; i++) {
	            const edge = this.edgeAt(i, v);
	            result[i] = mapper(edge, i);
	            if (edge) {
	                v = edge.tail;
	            }
	        }
	        return result;
	    }
	    edgeAt(index, v) {
	        const edgeIdx = this.edgeIndexes[index];
	        return (edgeIdx !== null ? this.graph.outEdge(v, edgeIdx) : null);
	    }
	    reduceMainPath(reducer, initialValue) {
	        let value = initialValue;
	        let v = this.root;
	        for (let i = 0; i < this.size; i++) {
	            const edge = this.edgeAt(i, v);
	            value = reducer(value, edge, i);
	            if (edge) {
	                v = edge.tail;
	            }
	        }
	        return value;
	    }
	    hasJustCycled() {
	        if (this.root.index == this.tail.index) {
	            return true;
	        }
	        let v = this.root;
	        for (let i = 0; i < this.size - 1; i++) {
	            const edge = this.edgeAt(i, v);
	            if (!edge) {
	                continue;
	            }
	            v = edge.tail;
	            if (v.index == this.tail.index) {
	                return true;
	            }
	        }
	        return false;
	    }
	    hasAnyEdgeConditions() {
	        return this.edgeConditions.some(c => c !== null);
	    }
	    isOnTopLevelQueryRoot() {
	        if (!(0, querygraph_1.isRootVertex)(this.root)) {
	            return false;
	        }
	        let vertex = this.root;
	        for (let i = 0; i < this.size; i++) {
	            const edge = this.edgeAt(i, vertex);
	            if (!edge) {
	                continue;
	            }
	            if (edge.transition.kind === 'FieldCollection' || edge.tail.type.name !== "Query") {
	                return false;
	            }
	            vertex = edge.tail;
	        }
	        return true;
	    }
	    truncateTrailingDowncasts() {
	        let lastNonDowncastIdx = -1;
	        let v = this.root;
	        let lastNonDowncastVertex = v;
	        let lastNonDowncastEdge;
	        let runtimeTypes = (0, querygraph_1.isFederatedGraphRootType)(this.root.type) ? [] : (0, federation_internals_1.possibleRuntimeTypes)(this.root.type);
	        let runtimeTypesAtLastNonDowncastEdge = runtimeTypes;
	        for (let i = 0; i < this.size; i++) {
	            const edge = this.edgeAt(i, v);
	            runtimeTypes = updateRuntimeTypes(runtimeTypes, edge);
	            if (edge) {
	                v = edge.tail;
	                if (edge.transition.kind !== 'DownCast') {
	                    lastNonDowncastIdx = i;
	                    lastNonDowncastVertex = v;
	                    lastNonDowncastEdge = edge;
	                    runtimeTypesAtLastNonDowncastEdge = runtimeTypes;
	                }
	            }
	        }
	        if (lastNonDowncastIdx < 0 || lastNonDowncastIdx === this.size - 1) {
	            return this;
	        }
	        const newSize = lastNonDowncastIdx + 1;
	        return new GraphPath(this.graph, this.root, lastNonDowncastVertex, this.edgeTriggers.slice(0, newSize), this.edgeIndexes.slice(0, newSize), this.edgeConditions.slice(0, newSize), this.subgraphEnteringEdgeIndex, this.subgraphEnteringEdge, this.subgraphEnteringEdgeCost, lastNonDowncastEdge, runtimeTypesAtLastNonDowncastEdge);
	    }
	    toString() {
	        const isRoot = (0, querygraph_1.isRootVertex)(this.root);
	        if (isRoot && this.size === 0) {
	            return '_';
	        }
	        const pathStr = this.mapMainPath((edge, idx) => {
	            if (edge) {
	                if (isRoot && idx == 0) {
	                    return edge.tail.toString();
	                }
	                const label = edge.label();
	                return ` -${label === "" ? "" : '-[' + label + ']-'}-> ${edge.tail}`;
	            }
	            return ` (${this.edgeTriggers[idx]}) `;
	        }).join('');
	        return `${isRoot ? '' : this.root}${pathStr} (types: [${this.runtimeTypesOfTail.join(', ')}])`;
	    }
	}
	exports.GraphPath = GraphPath;
	function isRootPath(path) {
	    return (0, querygraph_1.isRootVertex)(path.root);
	}
	exports.isRootPath = isRootPath;
	function terminateWithNonRequestedTypenameField(path) {
	    path = path.truncateTrailingDowncasts();
	    if (!(0, federation_internals_1.isCompositeType)(path.tail.type)) {
	        return path;
	    }
	    const typenameField = new federation_internals_1.Field(path.tail.type.typenameField());
	    const edge = edgeForField(path.graph, path.tail, typenameField);
	    (0, federation_internals_1.assert)(edge, () => `We should have an edge from ${path.tail} for ${typenameField}`);
	    return path.add(typenameField, edge, exports.noConditionsResolution);
	}
	exports.terminateWithNonRequestedTypenameField = terminateWithNonRequestedTypenameField;
	function traversePath(path, onEdges) {
	    for (const [edge, _, conditions] of path) {
	        if (conditions) {
	            (0, pathTree_1.traversePathTree)(conditions, onEdges);
	        }
	        onEdges(edge);
	    }
	}
	exports.traversePath = traversePath;
	var UnsatisfiedConditionReason;
	(function (UnsatisfiedConditionReason) {
	    UnsatisfiedConditionReason[UnsatisfiedConditionReason["NO_POST_REQUIRE_KEY"] = 0] = "NO_POST_REQUIRE_KEY";
	})(UnsatisfiedConditionReason = exports.UnsatisfiedConditionReason || (exports.UnsatisfiedConditionReason = {}));
	exports.noConditionsResolution = { satisfied: true, cost: 0 };
	exports.unsatisfiedConditionsResolution = { satisfied: false, cost: -1 };
	var UnadvanceableReason;
	(function (UnadvanceableReason) {
	    UnadvanceableReason[UnadvanceableReason["UNSATISFIABLE_KEY_CONDITION"] = 0] = "UNSATISFIABLE_KEY_CONDITION";
	    UnadvanceableReason[UnadvanceableReason["UNSATISFIABLE_REQUIRES_CONDITION"] = 1] = "UNSATISFIABLE_REQUIRES_CONDITION";
	    UnadvanceableReason[UnadvanceableReason["NO_MATCHING_TRANSITION"] = 2] = "NO_MATCHING_TRANSITION";
	    UnadvanceableReason[UnadvanceableReason["UNREACHABLE_TYPE"] = 3] = "UNREACHABLE_TYPE";
	    UnadvanceableReason[UnadvanceableReason["IGNORED_INDIRECT_PATH"] = 4] = "IGNORED_INDIRECT_PATH";
	})(UnadvanceableReason = exports.UnadvanceableReason || (exports.UnadvanceableReason = {}));
	class Unadvanceables {
	    constructor(reasons) {
	        this.reasons = reasons;
	    }
	}
	exports.Unadvanceables = Unadvanceables;
	function isUnadvanceable(result) {
	    return result instanceof Unadvanceables;
	}
	exports.isUnadvanceable = isUnadvanceable;
	function createPathTransitionToEdgeFct(supergraph) {
	    return (graph, vertex, transition) => {
	        for (const edge of graph.outEdges(vertex)) {
	            if (transition.collectOperationElements && edge.matchesSupergraphTransition(supergraph, transition)) {
	                return edge;
	            }
	        }
	        return undefined;
	    };
	}
	function advancePathWithTransition(supergraph, subgraphPath, transition, targetType, conditionResolver) {
	    if (transition.kind === 'DownCast') {
	        const supergraphRuntimeTypes = (0, federation_internals_1.possibleRuntimeTypes)(targetType);
	        const subgraphRuntimeTypes = subgraphPath.tailPossibleRuntimeTypes();
	        const intersection = supergraphRuntimeTypes.filter(t1 => subgraphRuntimeTypes.some(t2 => t1.name === t2.name)).map(t => t.name);
	        if (intersection.length === 0) {
	            debug.log(() => `No intersection between casted type ${targetType} and the possible types in this subgraph`);
	            return [];
	        }
	    }
	    debug.group(() => `Trying to advance ${subgraphPath} for ${transition}`);
	    debug.group('Direct options:');
	    const directOptions = advancePathWithDirectTransition(supergraph, subgraphPath, transition, conditionResolver);
	    let options;
	    const deadEnds = [];
	    if (isUnadvanceable(directOptions)) {
	        options = [];
	        debug.groupEnd(() => 'No direct options');
	        deadEnds.push(...directOptions.reasons);
	    }
	    else {
	        debug.groupEnd(() => advanceOptionsToString(directOptions));
	        if (directOptions.length > 0 && (0, federation_internals_1.isLeafType)(targetType)) {
	            debug.groupEnd(() => `reached leaf type ${targetType} so not trying indirect paths`);
	            return directOptions;
	        }
	        options = directOptions;
	    }
	    debug.group(`Computing indirect paths:`);
	    const pathTransitionToEdge = createPathTransitionToEdgeFct(supergraph);
	    const pathsWithNonCollecting = advancePathWithNonCollectingAndTypePreservingTransitions(subgraphPath, pathContext_1.emptyContext, conditionResolver, [], [], t => t, pathTransitionToEdge);
	    if (pathsWithNonCollecting.paths.length > 0) {
	        debug.groupEnd(() => `${pathsWithNonCollecting.paths.length} indirect paths`);
	        debug.group('Validating indirect options:');
	        for (const nonCollectingPath of pathsWithNonCollecting.paths) {
	            debug.group(() => `For indirect path ${nonCollectingPath}:`);
	            const pathsWithTransition = advancePathWithDirectTransition(supergraph, nonCollectingPath, transition, conditionResolver);
	            if (isUnadvanceable(pathsWithTransition)) {
	                debug.groupEnd(() => `Cannot be advanced with ${transition}`);
	                deadEnds.push(...pathsWithTransition.reasons);
	            }
	            else {
	                debug.groupEnd(() => `Adding valid option: ${pathsWithTransition}`);
	                options = options.concat(pathsWithTransition);
	            }
	        }
	        debug.groupEnd();
	    }
	    else {
	        debug.groupEnd('no indirect paths');
	    }
	    debug.groupEnd(() => options.length > 0 ? advanceOptionsToString(options) : `Cannot advance ${transition} for this path`);
	    if (options.length > 0) {
	        return options;
	    }
	    const allDeadEnds = deadEnds.concat(pathsWithNonCollecting.deadEnds.reasons);
	    if (transition.kind === 'FieldCollection') {
	        const typeName = transition.definition.parent.name;
	        const fieldName = transition.definition.name;
	        const subgraphsWithDeadEnd = new Set(allDeadEnds.map(e => e.destSubgraph));
	        for (const [subgraph, schema] of subgraphPath.graph.sources.entries()) {
	            if (subgraphsWithDeadEnd.has(subgraph)) {
	                continue;
	            }
	            const type = schema.type(typeName);
	            if (type && (0, federation_internals_1.isCompositeType)(type) && type.field(fieldName)) {
	                (0, federation_internals_1.assert)(!type.hasAppliedDirective(federation_internals_1.keyDirectiveName), () => `Expected type ${type} in ${subgraph} to not have keys`);
	                allDeadEnds.push({
	                    sourceSubgraph: subgraphPath.tail.source,
	                    destSubgraph: subgraph,
	                    reason: UnadvanceableReason.UNREACHABLE_TYPE,
	                    details: `cannot move to subgraph "${subgraph}", which has field "${transition.definition.coordinate}", because type "${typeName}" has no @key defined in subgraph "${subgraph}"`
	                });
	            }
	        }
	    }
	    return new Unadvanceables(allDeadEnds);
	}
	exports.advancePathWithTransition = advancePathWithTransition;
	function isEdgeExcluded(edge, excluded) {
	    return excluded.some(([vIdx, eIdx]) => edge.head.index === vIdx && edge.index === eIdx);
	}
	function sameExcludedEdges(ex1, ex2) {
	    if (ex1 === ex2) {
	        return true;
	    }
	    if (ex1.length !== ex2.length) {
	        return false;
	    }
	    for (let i = 0; i < ex1.length; ++i) {
	        if (ex1[i][0] !== ex2[i][0] || ex1[i][1] !== ex2[i][1]) {
	            return false;
	        }
	    }
	    return true;
	}
	exports.sameExcludedEdges = sameExcludedEdges;
	function addEdgeExclusion(excluded, newExclusion) {
	    return excluded.concat([[newExclusion.head.index, newExclusion.index]]);
	}
	function isConditionExcluded(condition, excluded) {
	    if (!condition) {
	        return false;
	    }
	    return excluded.find(e => condition.equals(e)) !== undefined;
	}
	function addConditionExclusion(excluded, newExclusion) {
	    return newExclusion ? excluded.concat(newExclusion) : excluded;
	}
	exports.addConditionExclusion = addConditionExclusion;
	function popMin(paths) {
	    let minIdx = 0;
	    let minSize = paths[0].size;
	    for (let i = 1; i < paths.length; i++) {
	        if (paths[i].size < minSize) {
	            minSize = paths[i].size;
	            minIdx = i;
	        }
	    }
	    const min = paths[minIdx];
	    paths.splice(minIdx, 1);
	    return min;
	}
	function advancePathWithNonCollectingAndTypePreservingTransitions(path, context, conditionResolver, excludedEdges, excludedConditions, convertTransitionWithCondition, triggerToEdge) {
	    var _a, _b;
	    const isTopLevelPath = path.isOnTopLevelQueryRoot();
	    const typeName = (0, querygraph_1.isFederatedGraphRootType)(path.tail.type) ? undefined : path.tail.type.name;
	    const originalSource = path.tail.source;
	    const bestPathBySource = new Map();
	    const deadEnds = [];
	    const toTry = [path];
	    while (toTry.length > 0) {
	        const toAdvance = popMin(toTry);
	        const nextEdges = toAdvance.nextEdges().filter(e => !e.transition.collectOperationElements);
	        if (nextEdges.length === 0) {
	            debug.log(`Nothing to try for ${toAdvance}: it has no non-collecting outbound edges`);
	            continue;
	        }
	        debug.group(() => `From ${toAdvance}:`);
	        for (const edge of nextEdges) {
	            debug.group(() => `Testing edge ${edge}`);
	            if (isEdgeExcluded(edge, excludedEdges)) {
	                debug.groupEnd(`Ignored: edge is excluded`);
	                continue;
	            }
	            excludedEdges = addEdgeExclusion(excludedEdges, edge);
	            if (isConditionExcluded(edge.conditions, excludedConditions)) {
	                debug.groupEnd(`Ignored: edge condition is excluded`);
	                continue;
	            }
	            const target = edge.tail;
	            if (target.source === originalSource) {
	                debug.groupEnd('Ignored: edge get us back to our original source');
	                continue;
	            }
	            if (typeName && typeName != target.type.name) {
	                debug.groupEnd('Ignored: edge does not get to our target type');
	                continue;
	            }
	            if (isTopLevelPath && edge.transition.kind === 'RootTypeResolution') {
	                debug.groupEnd(`Ignored: edge is a top-level "RootTypeResolution"`);
	                continue;
	            }
	            const prevForSource = bestPathBySource.get(target.source);
	            if (prevForSource === null) {
	                debug.groupEnd(() => `Ignored: we've shown before than going to ${target.source} is not productive`);
	                continue;
	            }
	            if (prevForSource
	                && (prevForSource[0].size < toAdvance.size + 1
	                    || (prevForSource[0].size == toAdvance.size + 1 && prevForSource[1] <= 1))) {
	                debug.groupEnd(`Ignored: a better path to the same subgraph already added`);
	                continue;
	            }
	            debug.group(() => `Validating conditions ${edge.conditions}`);
	            const conditionResolution = canSatisfyConditions(toAdvance, edge, conditionResolver, context, excludedEdges, excludedConditions);
	            if (conditionResolution.satisfied) {
	                debug.groupEnd('Condition satisfied');
	                if (prevForSource && prevForSource[0].size === toAdvance.size + 1 && prevForSource[1] <= conditionResolution.cost) {
	                    debug.groupEnd('Ignored: a better path to the same subgraph already added');
	                    continue;
	                }
	                const subgraphEnteringEdge = toAdvance.subgraphEnteringEdge;
	                if (subgraphEnteringEdge && edge.transition.kind === 'KeyResolution' && subgraphEnteringEdge.tail.type.name !== typeName) {
	                    const prevSubgraphVertex = toAdvance.checkDirectPathFomPreviousSubgraphTo(edge.tail.type.name, triggerToEdge);
	                    const backToPreviousSubgraph = subgraphEnteringEdge.head.source === edge.tail.source;
	                    const maxCost = toAdvance.subgraphEnteringEdgeCost + (backToPreviousSubgraph ? 0 : conditionResolution.cost);
	                    if (prevSubgraphVertex
	                        && (backToPreviousSubgraph
	                            || hasValidDirectKeyEdge(toAdvance.graph, prevSubgraphVertex, edge.tail.source, conditionResolver, maxCost) != undefined)) {
	                        debug.groupEnd(() => `Ignored: edge correspond to a detour by subgraph ${edge.head.source} from subgraph ${subgraphEnteringEdge.head.source}: `
	                            + `we have a direct path from ${subgraphEnteringEdge.head.type} to ${edge.tail.type} in ${subgraphEnteringEdge.head.source}`
	                            + (backToPreviousSubgraph ? '.' : ` and can move to ${edge.tail.source} from there`));
	                        bestPathBySource.set(edge.tail.source, null);
	                        deadEnds.push({
	                            sourceSubgraph: toAdvance.tail.source,
	                            destSubgraph: edge.tail.source,
	                            reason: UnadvanceableReason.IGNORED_INDIRECT_PATH,
	                            details: `ignoring moving to subgraph "${edge.tail.source}" using @key(fields: "${(_a = edge.conditions) === null || _a === void 0 ? void 0 : _a.toString(true, false)}") of "${edge.head.type}" because there is a more direct path in ${edge.tail.source} that avoids ${toAdvance.tail.source} altogether."`
	                        });
	                        continue;
	                    }
	                }
	                const updatedPath = toAdvance.add(convertTransitionWithCondition(edge.transition, context), edge, conditionResolution);
	                debug.log(() => `Using edge, advance path: ${updatedPath}`);
	                bestPathBySource.set(target.source, [updatedPath, conditionResolution.cost]);
	                if (edge.transition.kind === 'KeyResolution') {
	                    toTry.push(updatedPath);
	                }
	            }
	            else {
	                debug.groupEnd('Condition unsatisfiable');
	                deadEnds.push({
	                    sourceSubgraph: toAdvance.tail.source,
	                    destSubgraph: edge.tail.source,
	                    reason: UnadvanceableReason.UNSATISFIABLE_KEY_CONDITION,
	                    details: `cannot move to subgraph "${edge.tail.source}" using @key(fields: "${(_b = edge.conditions) === null || _b === void 0 ? void 0 : _b.toString(true, false)}") of "${edge.head.type}", the key field(s) cannot be resolved from subgraph "${toAdvance.tail.source}"`
	                });
	            }
	            debug.groupEnd();
	        }
	        debug.groupEnd();
	    }
	    return {
	        paths: (0, federation_internals_1.mapValues)(bestPathBySource).filter(p => p !== null).map(b => b[0]),
	        deadEnds: new Unadvanceables(deadEnds)
	    };
	}
	function hasValidDirectKeyEdge(graph, from, to, conditionResolver, maxCost) {
	    for (const edge of graph.outEdges(from)) {
	        if (edge.transition.kind !== 'KeyResolution' || edge.tail.source !== to) {
	            continue;
	        }
	        const resolution = conditionResolver(edge, pathContext_1.emptyContext, [], []);
	        if (!resolution.satisfied) {
	            continue;
	        }
	        if (resolution.cost <= maxCost) {
	            return true;
	        }
	    }
	    return false;
	}
	function advancePathWithDirectTransition(supergraph, path, transition, conditionResolver) {
	    const options = [];
	    const deadEnds = [];
	    for (const edge of path.nextEdges()) {
	        if (!transition.collectOperationElements || !edge.matchesSupergraphTransition(supergraph, transition)) {
	            continue;
	        }
	        const conditionResolution = canSatisfyConditions(path, edge, conditionResolver, pathContext_1.emptyContext, [], []);
	        if (conditionResolution.satisfied) {
	            options.push(path.add(transition, edge, conditionResolution));
	        }
	        else {
	            (0, federation_internals_1.assert)(transition.kind === 'FieldCollection', () => `Shouldn't have conditions on direct transition ${transition}`);
	            const field = transition.definition;
	            const parentTypeInSubgraph = path.graph.sources.get(edge.head.source).type(field.parent.name);
	            const details = conditionResolution.unsatisfiedConditionReason === UnsatisfiedConditionReason.NO_POST_REQUIRE_KEY
	                ? `@require condition on field "${field.coordinate}" can be satisfied but missing usable key on "${parentTypeInSubgraph}" in subgraph "${edge.head.source}" to resume query`
	                : `cannot satisfy @require conditions on field "${field.coordinate}"${warnOnKeyFieldsMarkedExternal(parentTypeInSubgraph)}`;
	            deadEnds.push({
	                sourceSubgraph: edge.head.source,
	                destSubgraph: edge.head.source,
	                reason: UnadvanceableReason.UNSATISFIABLE_REQUIRES_CONDITION,
	                details
	            });
	        }
	    }
	    if (options.length > 0) {
	        return options;
	    }
	    else if (deadEnds.length > 0) {
	        return new Unadvanceables(deadEnds);
	    }
	    else {
	        let details;
	        const subgraph = path.tail.source;
	        if (transition.kind === 'FieldCollection') {
	            const schema = path.graph.sources.get(subgraph);
	            const typeInSubgraph = schema.type(path.tail.type.name);
	            const fieldInSubgraph = typeInSubgraph && (0, federation_internals_1.isCompositeType)(typeInSubgraph)
	                ? typeInSubgraph.field(transition.definition.name)
	                : undefined;
	            if (fieldInSubgraph) {
	                (0, federation_internals_1.assert)(fieldInSubgraph.hasAppliedDirective('external'), () => `${fieldInSubgraph.coordinate} in ${subgraph} is not external but there is no corresponding edge (edges from ${path} = [${path.nextEdges().join(', ')}])`);
	                details = `field "${transition.definition.coordinate}" is not resolvable because marked @external`;
	            }
	            else {
	                details = `cannot find field "${transition.definition.coordinate}"`;
	            }
	        }
	        else {
	            (0, federation_internals_1.assert)(transition.kind === 'DownCast', () => `Unhandled direct transition ${transition} of kind ${transition.kind}`);
	            details = `cannot find type "${transition.castedType}"`;
	        }
	        return new Unadvanceables([{
	                sourceSubgraph: subgraph,
	                destSubgraph: subgraph,
	                reason: UnadvanceableReason.NO_MATCHING_TRANSITION,
	                details
	            }]);
	    }
	}
	function warnOnKeyFieldsMarkedExternal(type) {
	    const keyDirective = federation_internals_1.federationBuiltIns.keyDirective(type.schema());
	    const keys = type.appliedDirectivesOf(keyDirective);
	    if (keys.length === 0) {
	        return "";
	    }
	    const keyFieldMarkedExternal = [];
	    for (const key of keys) {
	        const fieldSet = (0, federation_internals_1.parseFieldSetArgument)(type, key);
	        for (const selection of fieldSet.selections()) {
	            if (selection.kind === 'FieldSelection' && selection.field.definition.hasAppliedDirective(federation_internals_1.externalDirectiveName)) {
	                const fieldName = selection.field.name;
	                if (!keyFieldMarkedExternal.includes(fieldName)) {
	                    keyFieldMarkedExternal.push(fieldName);
	                }
	            }
	        }
	    }
	    if (keyFieldMarkedExternal.length === 0) {
	        return "";
	    }
	    const printedFields = keyFieldMarkedExternal.map(f => `"${f}"`).join(', ');
	    const fieldWithPlural = keyFieldMarkedExternal.length === 1 ? 'field' : 'fields';
	    return ` (please ensure that this is not due to key ${fieldWithPlural} ${printedFields} being accidentally marked @external)`;
	}
	function getLocallySatisfiableKey(graph, typeVertex) {
	    const type = typeVertex.type;
	    const externalTester = graph.externalTester(typeVertex.source);
	    const keyDirective = federation_internals_1.federationBuiltIns.keyDirective(type.schema());
	    for (const key of type.appliedDirectivesOf(keyDirective)) {
	        const selection = (0, federation_internals_1.parseFieldSetArgument)(type, key);
	        if (!externalTester.selectsAnyExternalField(selection)) {
	            return selection;
	        }
	    }
	    return undefined;
	}
	exports.getLocallySatisfiableKey = getLocallySatisfiableKey;
	function canSatisfyConditions(path, edge, conditionResolver, context, excludedEdges, excludedConditions) {
	    const conditions = edge.conditions;
	    if (!conditions) {
	        return exports.noConditionsResolution;
	    }
	    const resolution = conditionResolver(edge, context, excludedEdges, excludedConditions);
	    if (!resolution.satisfied) {
	        return exports.unsatisfiedConditionsResolution;
	    }
	    const pathTree = resolution.pathTree;
	    const lastEdge = path.lastEdge();
	    if (edge.transition.kind === 'FieldCollection'
	        && lastEdge !== null
	        && (lastEdge === null || lastEdge === void 0 ? void 0 : lastEdge.transition.kind) !== 'KeyResolution'
	        && (!pathTree || pathTree.isAllInSameSubgraph())) {
	        const postRequireKeyCondition = getLocallySatisfiableKey(path.graph, edge.head);
	        if (!postRequireKeyCondition) {
	            return { ...exports.unsatisfiedConditionsResolution, unsatisfiedConditionReason: UnsatisfiedConditionReason.NO_POST_REQUIRE_KEY };
	        }
	    }
	    return resolution;
	}
	function isTerminalOperation(operation) {
	    return operation.kind === 'Field' && (0, federation_internals_1.isLeafType)((0, federation_internals_1.baseType)(operation.definition.type));
	}
	class SimultaneousPathsWithLazyIndirectPaths {
	    constructor(paths, context, conditionResolver, excludedNonCollectingEdges = [], excludedConditionsOnNonCollectingEdges = []) {
	        this.paths = paths;
	        this.context = context;
	        this.conditionResolver = conditionResolver;
	        this.excludedNonCollectingEdges = excludedNonCollectingEdges;
	        this.excludedConditionsOnNonCollectingEdges = excludedConditionsOnNonCollectingEdges;
	        this.lazilyComputedIndirectPaths = new Array(paths.length);
	    }
	    indirectOptions(updatedContext, pathIdx) {
	        if (updatedContext !== this.context) {
	            return this.computeIndirectPaths(pathIdx);
	        }
	        if (!this.lazilyComputedIndirectPaths[pathIdx]) {
	            this.lazilyComputedIndirectPaths[pathIdx] = this.computeIndirectPaths(pathIdx);
	        }
	        return this.lazilyComputedIndirectPaths[pathIdx];
	    }
	    computeIndirectPaths(idx) {
	        return advancePathWithNonCollectingAndTypePreservingTransitions(this.paths[idx], this.context, this.conditionResolver, this.excludedNonCollectingEdges, this.excludedConditionsOnNonCollectingEdges, (_t, context) => context, opPathTriggerToEdge);
	    }
	    toString() {
	        return simultaneousPathsToString(this.paths);
	    }
	}
	exports.SimultaneousPathsWithLazyIndirectPaths = SimultaneousPathsWithLazyIndirectPaths;
	function simultaneousPathsToString(simultaneousPaths, indentOnNewLine = "") {
	    const paths = Array.isArray(simultaneousPaths) ? simultaneousPaths : simultaneousPaths.paths;
	    if (paths.length === 0) {
	        return '<no path>';
	    }
	    if (paths.length === 1) {
	        return paths[0].toString();
	    }
	    return `{\n${indentOnNewLine}  ` + paths.join(`\n${indentOnNewLine}  `) + `\n${indentOnNewLine}}`;
	}
	exports.simultaneousPathsToString = simultaneousPathsToString;
	function advanceOptionsToString(options) {
	    if (!options) {
	        return '<no options>';
	    }
	    if (options.length === 0) {
	        return '<unsatisfiable branch>';
	    }
	    if (options.length === 1) {
	        return '[' + options[0] + ']';
	    }
	    return '[\n  ' + options.map(opt => Array.isArray(opt) ? simultaneousPathsToString(opt, "  ") : opt.toString()).join('\n  ') + '\n]';
	}
	exports.advanceOptionsToString = advanceOptionsToString;
	function advanceSimultaneousPathsWithOperation(supergraphSchema, subgraphSimultaneousPaths, operation) {
	    debug.group(() => `Trying to advance ${simultaneousPathsToString(subgraphSimultaneousPaths)} for ${operation}`);
	    const updatedContext = subgraphSimultaneousPaths.context.withContextOf(operation);
	    const optionsForEachPath = [];
	    for (const [i, path] of subgraphSimultaneousPaths.paths.entries()) {
	        debug.group(() => `Computing options for ${path}`);
	        debug.group(() => `Direct options`);
	        let options = advanceWithOperation(supergraphSchema, path, operation, updatedContext, subgraphSimultaneousPaths.conditionResolver);
	        debug.groupEnd(() => advanceOptionsToString(options));
	        if (options && (options.length === 0 || isTerminalOperation(operation) || operation.kind === 'FragmentElement')) {
	            debug.groupEnd(() => `Final options for ${path}: ${advanceOptionsToString(options)}`);
	            if (options.length > 0) {
	                optionsForEachPath.push(options);
	            }
	            continue;
	        }
	        options = options !== null && options !== void 0 ? options : [];
	        debug.group(`Computing indirect paths:`);
	        const pathsWithNonCollecting = subgraphSimultaneousPaths.indirectOptions(updatedContext, i);
	        debug.groupEnd(() => pathsWithNonCollecting.paths.length == 0 ? `no indirect paths` : `${pathsWithNonCollecting.paths.length} indirect paths`);
	        if (pathsWithNonCollecting.paths.length > 0) {
	            debug.group('Validating indirect options:');
	            for (const pathWithNonCollecting of pathsWithNonCollecting.paths) {
	                debug.group(() => `For indirect path ${pathWithNonCollecting}:`);
	                const pathWithOperation = advanceWithOperation(supergraphSchema, pathWithNonCollecting, operation, updatedContext, subgraphSimultaneousPaths.conditionResolver);
	                if (!pathWithOperation) {
	                    debug.groupEnd(() => `Ignoring: cannot be advanced with ${operation}`);
	                    continue;
	                }
	                debug.groupEnd(() => `Adding valid option: ${pathWithOperation}`);
	                (0, federation_internals_1.assert)(pathWithOperation.length > 0, () => `Unexpected empty options after non-collecting path ${pathWithNonCollecting} for ${operation}`);
	                options = options.concat(pathWithOperation);
	            }
	            debug.groupEnd();
	        }
	        if (options.length === 0) {
	            debug.groupEnd();
	            debug.groupEnd(() => `No valid options for ${operation}, aborting operation ${operation}`);
	            return undefined;
	        }
	        else {
	            debug.groupEnd(() => advanceOptionsToString(options));
	            optionsForEachPath.push(options);
	        }
	    }
	    const allOptions = flatCartesianProduct(optionsForEachPath);
	    debug.groupEnd(() => advanceOptionsToString(allOptions));
	    return createLazyOptions(allOptions, subgraphSimultaneousPaths, updatedContext);
	}
	exports.advanceSimultaneousPathsWithOperation = advanceSimultaneousPathsWithOperation;
	function createLazyOptions(options, origin, context) {
	    return options.map(option => new SimultaneousPathsWithLazyIndirectPaths(option, context, origin.conditionResolver, origin.excludedNonCollectingEdges, origin.excludedConditionsOnNonCollectingEdges));
	}
	function opPathTriggerToEdge(graph, vertex, trigger) {
	    if (trigger instanceof pathContext_1.PathContext) {
	        return undefined;
	    }
	    if (trigger.kind === 'Field') {
	        return edgeForField(graph, vertex, trigger);
	    }
	    else {
	        return trigger.typeCondition ? edgeForTypeCast(graph, vertex, trigger.typeCondition.name) : null;
	    }
	}
	function flatCartesianProduct(arr) {
	    const size = arr.length;
	    if (size === 0) {
	        return [];
	    }
	    const eltIndexes = new Array(size);
	    let totalCombinations = 1;
	    for (let i = 0; i < size; ++i) {
	        const eltSize = arr[i].length;
	        if (!eltSize) {
	            totalCombinations = 0;
	            break;
	        }
	        eltIndexes[i] = 0;
	        totalCombinations *= eltSize;
	    }
	    const product = new Array(totalCombinations);
	    for (let i = 0; i < totalCombinations; ++i) {
	        let itemSize = 0;
	        for (let j = 0; j < size; ++j) {
	            itemSize += arr[j][eltIndexes[j]].length;
	        }
	        const item = new Array(itemSize);
	        let k = 0;
	        for (let j = 0; j < size; ++j) {
	            for (const v of arr[j][eltIndexes[j]]) {
	                item[k++] = v;
	            }
	        }
	        product[i] = item;
	        for (let idx = 0; idx < size; ++idx) {
	            if (eltIndexes[idx] == arr[idx].length - 1) {
	                eltIndexes[idx] = 0;
	            }
	            else {
	                eltIndexes[idx] += 1;
	                break;
	            }
	        }
	    }
	    return product;
	}
	function anImplementationHasAProvides(fieldName, itf) {
	    for (const implem of itf.possibleRuntimeTypes()) {
	        const field = implem.field(fieldName);
	        if (field && field.hasAppliedDirective(federation_internals_1.providesDirectiveName)) {
	            return true;
	        }
	    }
	    return false;
	}
	function isProvidedEdge(edge) {
	    return edge.transition.kind === 'FieldCollection' && edge.transition.isPartOfProvide;
	}
	function advanceWithOperation(supergraphSchema, path, operation, context, conditionResolver) {
	    debug.group(() => `Trying to advance ${path} directly with ${operation}`);
	    const currentType = path.tail.type;
	    if ((0, querygraph_1.isFederatedGraphRootType)(currentType)) {
	        debug.groupEnd('Cannot advance federated graph root with direct operations');
	        return undefined;
	    }
	    if (operation.kind === 'Field') {
	        const field = operation.definition;
	        switch (currentType.kind) {
	            case 'ObjectType':
	                const edge = nextEdgeForField(path, operation);
	                if (!edge) {
	                    debug.groupEnd(() => `No edge for field ${field} on object type ${currentType}`);
	                    return undefined;
	                }
	                const fieldOptions = addFieldEdge(path, operation, edge, conditionResolver, context);
	                debug.groupEnd(() => fieldOptions
	                    ? `Collected field ${field} on object type ${currentType}`
	                    : `Cannot satisfy @requires on field ${field} for object type ${currentType}`);
	                return fieldOptions;
	            case 'InterfaceType':
	                const itfEdge = nextEdgeForField(path, operation);
	                let itfOptions = undefined;
	                if (itfEdge) {
	                    itfOptions = addFieldEdge(path, operation, itfEdge, conditionResolver, context);
	                    (0, federation_internals_1.assert)(itfOptions, () => `Interface edge ${itfEdge} shouldn't have conditions`);
	                    if (field.name === federation_internals_1.typenameFieldName || (!isProvidedEdge(itfEdge) && !anImplementationHasAProvides(field.name, currentType))) {
	                        debug.groupEnd(() => `Collecting field ${field} on interface ${currentType} without type-exploding`);
	                        return itfOptions;
	                    }
	                    else {
	                        debug.log(() => `Collecting field ${field} on interface ${currentType} as 1st option`);
	                    }
	                }
	                const implementations = path.tailPossibleRuntimeTypes();
	                debug.log(() => itfOptions
	                    ? `No direct edge: type exploding interface ${currentType} into possible runtime types [${implementations.join(', ')}]`
	                    : `Type exploding interface ${currentType} into possible runtime types [${implementations.join(', ')}] as 2nd option`);
	                const optionsByImplems = [];
	                for (const implemType of implementations) {
	                    const castOp = new federation_internals_1.FragmentElement(currentType, implemType.name);
	                    debug.group(() => `Handling implementation ${implemType}`);
	                    const implemOptions = advanceSimultaneousPathsWithOperation(supergraphSchema, new SimultaneousPathsWithLazyIndirectPaths([path], context, conditionResolver), castOp);
	                    if (!implemOptions) {
	                        debug.groupEnd();
	                        debug.groupEnd(() => `Cannot collect field ${field} from ${implemType}: stopping with options ${advanceOptionsToString(itfOptions)}`);
	                        return itfOptions;
	                    }
	                    if (implemOptions.length === 0) {
	                        debug.groupEnd(() => `Cannot ever get ${implemType} from this branch, ignoring it`);
	                        continue;
	                    }
	                    let withField = [];
	                    debug.log(() => `Trying to collect ${field} from options ${advanceOptionsToString(implemOptions)}`);
	                    for (const optPaths of implemOptions) {
	                        debug.group(() => `For ${simultaneousPathsToString(optPaths)}`);
	                        const withFieldOptions = advanceSimultaneousPathsWithOperation(supergraphSchema, optPaths, operation);
	                        if (!withFieldOptions) {
	                            debug.groupEnd(() => `Cannot collect ${field}`);
	                            continue;
	                        }
	                        (0, federation_internals_1.assert)(withFieldOptions.length > 0, () => `Unexpected unsatisfiable path after ${optPaths} for ${operation}`);
	                        debug.groupEnd(() => `Collected field ${field}: adding ${advanceOptionsToString(withFieldOptions)}`);
	                        withField = withField.concat(withFieldOptions.map(opt => opt.paths));
	                    }
	                    if (withField.length === 0) {
	                        debug.groupEnd();
	                        debug.groupEnd(() => `Cannot collect field ${field} from ${implemType}: stopping with options ${advanceOptionsToString(itfOptions)}`);
	                        return itfOptions;
	                    }
	                    debug.groupEnd(() => `Collected field ${field} from ${implemType}`);
	                    optionsByImplems.push(withField);
	                }
	                const implemOptions = flatCartesianProduct(optionsByImplems);
	                const allOptions = itfOptions ? itfOptions.concat(implemOptions) : implemOptions;
	                debug.groupEnd(() => `With type-exploded options: ${advanceOptionsToString(allOptions)}`);
	                return allOptions;
	            case 'UnionType':
	                (0, federation_internals_1.assert)(field.name === federation_internals_1.typenameFieldName, () => `Invalid field selection ${operation} for union type ${currentType}`);
	                const typenameEdge = nextEdgeForField(path, operation);
	                (0, federation_internals_1.assert)(typenameEdge, `Should always have an edge for __typename edge on an union`);
	                debug.groupEnd(() => `Trivial collection of __typename for union ${currentType}`);
	                return addFieldEdge(path, operation, typenameEdge, conditionResolver, context);
	            default:
	                (0, federation_internals_1.assert)(false, `Unexpected ${currentType.kind} type ${currentType} from ${path.tail} given operation ${operation}`);
	        }
	    }
	    else {
	        (0, federation_internals_1.assert)(operation.kind === 'FragmentElement', () => "Unhandled operation kind: " + operation.kind);
	        if (!operation.typeCondition || currentType.name === operation.typeCondition.name) {
	            debug.groupEnd(() => `No edge to take for condition ${operation} from current type ${currentType}`);
	            const updatedPath = operation.appliedDirectives.length > 0
	                ? path.add(operation, null, exports.noConditionsResolution)
	                : path;
	            return [[updatedPath]];
	        }
	        const typeName = operation.typeCondition.name;
	        switch (currentType.kind) {
	            case 'InterfaceType':
	            case 'UnionType':
	                const edge = nextEdgeForTypeCast(path, typeName);
	                if (edge) {
	                    (0, federation_internals_1.assert)(!edge.conditions, "TypeCast collecting edges shouldn't have conditions");
	                    debug.groupEnd(() => `Using type-casting edge for ${typeName} from current type ${currentType}`);
	                    return [[path.add(operation, edge, exports.noConditionsResolution)]];
	                }
	                const parentTypes = path.tailPossibleRuntimeTypes();
	                const castedTypes = (0, federation_internals_1.possibleRuntimeTypes)(supergraphSchema.type(typeName));
	                const intersection = parentTypes.filter(t1 => castedTypes.some(t2 => t1.name === t2.name)).map(t => t.name);
	                debug.log(() => `Trying to type-explode into intersection between ${currentType} and ${typeName} = [${intersection}]`);
	                const optionsByImplems = [];
	                for (const tName of intersection) {
	                    debug.group(() => `Trying ${tName}`);
	                    const castOp = new federation_internals_1.FragmentElement(currentType, tName);
	                    const implemOptions = advanceSimultaneousPathsWithOperation(supergraphSchema, new SimultaneousPathsWithLazyIndirectPaths([path], context, conditionResolver), castOp);
	                    if (!implemOptions) {
	                        debug.groupEnd();
	                        debug.groupEnd(() => `Cannot advance into ${tName} from ${currentType}: no options for ${operation}.`);
	                        return undefined;
	                    }
	                    if (implemOptions.length === 0) {
	                        debug.groupEnd(() => `Cannot ever get ${tName} from this branch, ignoring it`);
	                        continue;
	                    }
	                    debug.groupEnd(() => `Advanced into ${tName} from ${currentType}: ${advanceOptionsToString(implemOptions)}`);
	                    optionsByImplems.push(implemOptions.map(opt => opt.paths));
	                }
	                const allCastOptions = flatCartesianProduct(optionsByImplems);
	                debug.groupEnd(() => `Type-exploded options: ${advanceOptionsToString(allCastOptions)}`);
	                return allCastOptions;
	            case 'ObjectType':
	                const conditionType = supergraphSchema.type(typeName);
	                if ((0, federation_internals_1.isAbstractType)(conditionType) && (0, federation_internals_1.possibleRuntimeTypes)(conditionType).some(t => t.name == currentType.name)) {
	                    debug.groupEnd(() => `${typeName} is a super-type of current type ${currentType}: no edge to take`);
	                    const updatedPath = operation.appliedDirectives.length > 0
	                        ? path.add(operation, null, exports.noConditionsResolution)
	                        : path;
	                    return [[updatedPath]];
	                }
	                debug.groupEnd(() => `Cannot ever get ${typeName} from current type ${currentType}: returning empty branch`);
	                return [];
	            default:
	                (0, federation_internals_1.assert)(false, `Unexpected ${currentType.kind} type ${currentType} from ${path.tail} given operation ${operation}`);
	        }
	    }
	}
	function addFieldEdge(path, fieldOperation, edge, conditionResolver, context) {
	    const conditionResolution = canSatisfyConditions(path, edge, conditionResolver, context, [], []);
	    return conditionResolution.satisfied ? [[path.add(fieldOperation, edge, conditionResolution)]] : undefined;
	}
	function nextEdgeForField(path, field) {
	    return edgeForField(path.graph, path.tail, field);
	}
	function edgeForField(graph, vertex, field) {
	    const candidates = graph.outEdges(vertex).filter(e => e.transition.kind === 'FieldCollection' && field.selects(e.transition.definition, true));
	    (0, federation_internals_1.assert)(candidates.length <= 1, () => `Vertex ${vertex} has multiple edges matching ${field} (${candidates})`);
	    return candidates.length === 0 ? undefined : candidates[0];
	}
	function nextEdgeForTypeCast(path, typeName) {
	    return edgeForTypeCast(path.graph, path.tail, typeName);
	}
	function edgeForTypeCast(graph, vertex, typeName) {
	    const candidates = graph.outEdges(vertex).filter(e => e.transition.kind === 'DownCast' && typeName === e.transition.castedType.name);
	    (0, federation_internals_1.assert)(candidates.length <= 1, () => `Vertex ${vertex} has multiple edges matching ${typeName} (${candidates})`);
	    return candidates.length === 0 ? undefined : candidates[0];
	}

	}(graphPath));

	var graphviz = {};

	var lib = {};

	(function (exports) {
	var t;Object.defineProperty(exports,"__esModule",{value:!0}),exports.attribute=void 0,(t=exports.attribute||(exports.attribute={})).Damping="Damping",t.K="K",t.URL="URL",t._background="_background",t.area="area",t.arrowhead="arrowhead",t.arrowsize="arrowsize",t.arrowtail="arrowtail",t.bb="bb",t.bgcolor="bgcolor",t.center="center",t.charset="charset",t.clusterrank="clusterrank",t.color="color",t.colorscheme="colorscheme",t.comment="comment",t.compound="compound",t.concentrate="concentrate",t.constraint="constraint",t.decorate="decorate",t.defaultdist="defaultdist",t.dim="dim",t.dimen="dimen",t.dir="dir",t.diredgeconstraints="diredgeconstraints",t.distortion="distortion",t.dpi="dpi",t.edgeURL="edgeURL",t.edgehref="edgehref",t.edgetarget="edgetarget",t.edgetooltip="edgetooltip",t.epsilon="epsilon",t.esep="esep",t.fillcolor="fillcolor",t.fixedsize="fixedsize",t.fontcolor="fontcolor",t.fontname="fontname",t.fontnames="fontnames",t.fontpath="fontpath",t.fontsize="fontsize",t.forcelabels="forcelabels",t.gradientangle="gradientangle",t.group="group",t.headURL="headURL",t.head_lp="head_lp",t.headclip="headclip",t.headhref="headhref",t.headlabel="headlabel",t.headport="headport",t.headtarget="headtarget",t.headtooltip="headtooltip",t.height="height",t.href="href",t.id="id",t.image="image",t.imagepath="imagepath",t.imagepos="imagepos",t.imagescale="imagescale",t.inputscale="inputscale",t.label="label",t.labelURL="labelURL",t.label_scheme="label_scheme",t.labelangle="labelangle",t.labeldistance="labeldistance",t.labelfloat="labelfloat",t.labelfontcolor="labelfontcolor",t.labelfontname="labelfontname",t.labelfontsize="labelfontsize",t.labelhref="labelhref",t.labeljust="labeljust",t.labelloc="labelloc",t.labeltarget="labeltarget",t.labeltooltip="labeltooltip",t.landscape="landscape",t.layer="layer",t.layerlistsep="layerlistsep",t.layers="layers",t.layerselect="layerselect",t.layersep="layersep",t.layout="layout",t.len="len",t.levels="levels",t.levelsgap="levelsgap",t.lhead="lhead",t.lheight="lheight",t.lp="lp",t.ltail="ltail",t.lwidth="lwidth",t.margin="margin",t.maxiter="maxiter",t.mclimit="mclimit",t.mindist="mindist",t.minlen="minlen",t.mode="mode",t.model="model",t.mosek="mosek",t.newrank="newrank",t.nodesep="nodesep",t.nojustify="nojustify",t.normalize="normalize",t.notranslate="notranslate",t.nslimit="nslimit",t.nslimit1="nslimit1",t.ordering="ordering",t.orientation="orientation",t.outputorder="outputorder",t.overlap="overlap",t.overlap_scaling="overlap_scaling",t.overlap_shrink="overlap_shrink",t.pack="pack",t.packmode="packmode",t.pad="pad",t.page="page",t.pagedir="pagedir",t.pencolor="pencolor",t.penwidth="penwidth",t.peripheries="peripheries",t.pin="pin",t.pos="pos",t.quadtree="quadtree",t.quantum="quantum",t.rank="rank",t.rankdir="rankdir",t.ranksep="ranksep",t.ratio="ratio",t.rects="rects",t.regular="regular",t.remincross="remincross",t.repulsiveforce="repulsiveforce",t.resolution="resolution",t.root="root",t.rotate="rotate",t.rotation="rotation",t.samehead="samehead",t.sametail="sametail",t.samplepoints="samplepoints",t.scale="scale",t.searchsize="searchsize",t.sep="sep",t.shape="shape",t.shapefile="shapefile",t.showboxes="showboxes",t.sides="sides",t.size="size",t.skew="skew",t.smoothing="smoothing",t.sortv="sortv",t.splines="splines",t.start="start",t.style="style",t.stylesheet="stylesheet",t.tailURL="tailURL",t.tail_lp="tail_lp",t.tailclip="tailclip",t.tailhref="tailhref",t.taillabel="taillabel",t.tailport="tailport",t.tailtarget="tailtarget",t.tailtooltip="tailtooltip",t.target="target",t.tooltip="tooltip",t.truecolor="truecolor",t.vertices="vertices",t.viewport="viewport",t.voro_margin="voro_margin",t.weight="weight",t.width="width",t.xdotversion="xdotversion",t.xlabel="xlabel",t.xlp="xlp",t.z="z",exports.Compass=void 0,function(t){t.n="n",t.ne="ne",t.e="e",t.se="se",t.s="s",t.sw="sw",t.w="w",t.nw="nw",t.c="c";var e=[t.n,t.ne,t.e,t.se,t.s,t.sw,t.w,t.nw,t.c];t.is=function(t){return e.includes(t)};}(exports.Compass||(exports.Compass={}));
	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	var e=function(t,r){return (e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e;}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);})(t,r)};function r(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t;}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n);}var n=function(){return (n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function o(t,e){for(var r=0,n=e.length,o=t.length;r<n;r++,o++)t[o]=e[r];return t}var i=function(){},a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(i),s=function(t){function e(e){var r=t.call(this)||this;return r.attrs=new Map,void 0!==e&&r.apply(e),r}return r(e,t),Object.defineProperty(e.prototype,"values",{get:function(){return Array.from(this.attrs.entries())},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){return this.attrs.size},enumerable:!1,configurable:!0}),e.prototype.get=function(t){return this.attrs.get(t)},e.prototype.set=function(t,e){null!=e&&this.attrs.set(t,e);},e.prototype.delete=function(t){this.attrs.delete(t);},e.prototype.apply=function(t){for(var e=0,r=Array.isArray(t)?t:Object.entries(t);e<r.length;e++){var n=r[e],o=n[0],i=n[1];this.set(o,i);}},e.prototype.clear=function(){this.attrs.clear();},e}(a),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(s),l=function(t){function e(e,r){var n=t.call(this)||this;return n.id=e,n.attributes=new u(r),n}return r(e,t),e.prototype.port=function(t){return "string"==typeof t?{id:this.id,port:t}:n({id:this.id},t)},e}(a);function p(t){return "object"==typeof t&&null!==t&&"string"==typeof t.id}function c(t){return t instanceof l||p(t)}function f(t){return "string"==typeof t||c(t)}function d(t){if(c(t))return t;var e=t.split(":"),r=e[0],n=e[1],o=e[2];return exports.Compass.is(o)?{id:r,port:n,compass:o}:{id:r,port:n}}var h=function(t){function e(e,r){var n=t.call(this)||this;if(n.targets=e,e.length<2&&!1===(f(e[0])&&f(e[1])))throw Error("The element of Edge target is missing or not satisfied as Edge target.");return n.attributes=new u(r),n}return r(e,t),e}(a),g=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.objects={nodes:new Map,edges:new Set,subgraphs:new Set},e}return r(e,t),Object.defineProperty(e.prototype,"nodes",{get:function(){return Array.from(this.objects.nodes.values())},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"edges",{get:function(){return Array.from(this.objects.edges.values())},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"subgraphs",{get:function(){return Array.from(this.objects.subgraphs.values())},enumerable:!1,configurable:!0}),e.prototype.addNode=function(t){this.objects.nodes.set(t.id,t);},e.prototype.addEdge=function(t){this.objects.edges.add(t);},e.prototype.addSubgraph=function(t){this.objects.subgraphs.add(t);},e.prototype.existNode=function(t){return this.objects.nodes.has(t)},e.prototype.existEdge=function(t){return this.objects.edges.has(t)},e.prototype.existSubgraph=function(t){return this.objects.subgraphs.has(t)},e.prototype.createSubgraph=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.find((function(t){return "string"==typeof t})),n=t.find((function(t){return "object"==typeof t})),o=new b(r,n);return this.objects.subgraphs.add(o),o},e.prototype.removeNode=function(t){this.objects.nodes.delete("string"==typeof t?t:t.id);},e.prototype.removeEdge=function(t){this.objects.edges.delete(t);},e.prototype.removeSubgraph=function(t){this.objects.subgraphs.delete(t);},e.prototype.createNode=function(t,e){var r=new l(t,e);return this.objects.nodes.set(t,r),r},e.prototype.getSubgraph=function(t){return Array.from(this.objects.subgraphs.values()).find((function(e){return e.id===t}))},e.prototype.getNode=function(t){return this.objects.nodes.get(t)},e.prototype.createEdge=function(t,e){var r=t.map((function(t){return e=t,Array.isArray(e)&&e.every(f)?function(t){if(t.length<2&&!1===(f(t[0])&&f(t[1])))throw Error("EdgeTargets must have at least 2 elements.");return t.map((function(t){return d(t)}))}(t):d(t);var e;})),n=new h(r,e);return this.objects.edges.add(n),n},e.prototype.subgraph=function(){for(var t,e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var n=e.find((function(t){return "string"==typeof t})),o=e.find((function(t){return "object"==typeof t&&null!==t})),i=e.find((function(t){return "function"==typeof t})),a=n?null!==(t=this.getSubgraph(n))&&void 0!==t?t:this.createSubgraph(n):this.createSubgraph();return void 0!==o&&a.apply(o),void 0!==i&&i(a),a},e.prototype.node=function(t){for(var e,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];if("string"==typeof t){var o=t,i=r.find((function(t){return "object"==typeof t&&null!==t})),a=r.find((function(t){return "function"==typeof t})),s=null!==(e=this.getNode(o))&&void 0!==e?e:this.createNode(o);return void 0!==i&&s.attributes.apply(i),void 0!==a&&a(s),s}"object"==typeof t&&null!==t&&this.attributes.node.apply(t);},e.prototype.edge=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];if(Array.isArray(t)){var n=t,o=e.find((function(t){return "object"==typeof t})),i=e.find((function(t){return "function"==typeof t})),a=this.createEdge(n,o);return void 0!==i&&i(a),a}"object"==typeof t&&null!==t&&this.attributes.edge.apply(t);},e.prototype.graph=function(t){this.attributes.graph.apply(t);},e}(s),b=function(t){function e(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var n=t.call(this)||this;n.attributes={graph:new u,edge:new u,node:new u},n.id=e.find((function(t){return "string"==typeof t}));var o=e.find((function(t){return "object"==typeof t&&null!==t}));return void 0!==o&&n.apply(o),n}return r(e,t),e.prototype.isSubgraphCluster=function(){return "string"==typeof this.id&&this.id.startsWith("cluster")},e}(g),y=function(t){function e(){for(var e,r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];var o=t.call(this)||this;o.attributes={graph:new u,edge:new u,node:new u},o.id=r.find((function(t){return "string"==typeof t})),o.strict=null!==(e=r.find((function(t){return "boolean"==typeof t})))&&void 0!==e&&e;var i=r.find((function(t){return "object"==typeof t&&null!==t}));return void 0!==i&&o.apply(i),o}return r(e,t),e}(g),v=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(y),m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(y);function w(t,e){return void 0===e&&(e=!1),function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];var o=r.find((function(t){return "string"==typeof t})),i=r.find((function(t){return "object"==typeof t})),a=r.find((function(t){return "function"==typeof t})),s=new t(o,i,e);return "function"==typeof a&&a(s),s}}var j=w(m),x=w(v),_={digraph:w(m,!0),graph:w(v,!0)};var z,k,O=(z='"',function(t){return function(t,e){return ""+e+t+e}(t,z)}),S=(k=" ",function(t){if("string"==typeof t)return function(t,e){return ""+e+t}(t,k)});function E(t){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return e.filter((function(t){return "string"==typeof t})).join(t)}}var A=E(" "),C=E(":"),R=E("\n"),N=E("");function L(t){return t.split("\n").map((function(t){return N("  ",t)})).join("\n")}function U(t){return "string"==typeof t?function(t){return t.split("\n").map((function(t){return N("// ",t).trim()})).join("\n")}(t):void 0}function P(t){return t instanceof b}function D(t){return t instanceof l}function q(t){return t instanceof v}function M(t){return t instanceof m?"digraph":q(t)?"graph":P(t)?"subgraph":void 0}function T(t){var e="string"!=typeof t,r=!1,n=!1,o="string"==typeof t?t:t.toString();if(e)r=!1;else {var i=o.trim();(r=/^<.+>$/ms.test(i))?o=i:n=!0;}return e||r?o:n?O(o.replace(/\n/g,"\\n").replace(/"/g,'\\"')):o}function G(t){return function(e){var r=e[0],n=e[1];return N(r," = ",T(n),t)}}var K=G(";"),B=G(",");function W(t){return 0===t.size?"":R("[",L(R.apply(void 0,o([U(t.comment)],t.values.map(B)))),"]")}function $(t){if(D(t))return T(t.id);if(p(t)){var e=t.id,r=t.port,n=t.compass;return C(T(e),void 0!==r?T(r):void 0,void 0!==n?T(n):void 0)}}var F=function(){function t(){}return t.prototype.renderNode=function(t){var e=U(t.comment),r=$(t),n=t.attributes.size>0?S(W(t.attributes)):void 0,o=N(r,n,";");return R(e,o)},t.prototype.renderEdge=function(t){var e,r=U(t.comment),n=(e=q(this.root)?" -- ":" -> ",t.targets.map((function(t){return c(t)?$(t):(e=t,"{"+A.apply(void 0,e.map($))+"}");var e;})).filter((function(t){return "string"==typeof t})).join(e)),o=t.attributes.size>0?S(W(t.attributes)):void 0,i=N(n,o,";");return R(r,i)},t.prototype.renderCluster=function(t){var e=M(t),r=void 0!==t.id?T(t.id):void 0,n=t.values.map(K),i=Object.entries(t.attributes).filter((function(t){return t[1].size>0})).map((function(t){var e=t[0],r=t[1];return N(e," ",W(r),";")})),a=t.nodes.map(this.renderNode.bind(this)),s=t.subgraphs.map(this.renderSubgraph.bind(this)),u=t.edges.map(this.renderEdge.bind(this)),l=R.apply(void 0,o(o(o(o(o([],n),i),a),s),u));return R(A(e,r,"{"),l.length>0?L(l):void 0,"}")},t.prototype.renderRootCluster=function(t){var e=U(t.comment),r=this.renderCluster(t);return R(e,A(t.strict?"strict":void 0,r))},t.prototype.renderSubgraph=function(t){var e=U(t.comment),r=this.renderCluster(t);return R(e,r)},t.prototype.render=function(t){return D(t)?this.renderNode(t):function(t){return t instanceof h}(t)?this.renderEdge(t):function(t){return t instanceof u}(t)?W(t):P(t)?this.renderSubgraph(t):function(t){return t instanceof y}(t)?(this.root=t,this.renderRootCluster(t)):T(t)},t}();exports.Attributes=u,exports.AttributesBase=s,exports.Cluster=g,exports.Digraph=m,exports.DotObject=a,exports.Edge=h,exports.Graph=v,exports.GraphvizObject=i,exports.Node=l,exports.RootCluster=y,exports.Subgraph=b,exports.digraph=j,exports.graph=x,exports.strict=_,exports.toDot=function(t){return (new F).render(t)};
	}(lib));

	Object.defineProperty(graphviz, "__esModule", { value: true });
	graphviz.pickHighlights = graphviz.groupToDot = graphviz.toDot = void 0;
	const querygraph_1$1 = querygraph;
	const ts_graphviz_1 = lib;
	const graphPath_1$1 = graphPath;
	function toDot(graph, config) {
	    const vizGraph = (0, ts_graphviz_1.digraph)(graph.name);
	    addToVizGraphAndHighlight(graph, vizGraph, config);
	    return (0, ts_graphviz_1.toDot)(vizGraph);
	}
	graphviz.toDot = toDot;
	function groupToDot(name, graphs, configs = new Map()) {
	    const vizGraph = (0, ts_graphviz_1.digraph)(name);
	    for (const [group, graph] of graphs.entries()) {
	        const cluster = vizGraph.createSubgraph(`cluster_${group}`, {
	            [ts_graphviz_1.attribute.label]: `${group}`,
	            [ts_graphviz_1.attribute.style]: "filled",
	            [ts_graphviz_1.attribute.color]: "grey95"
	        });
	        addToVizGraphAndHighlight(graph, cluster, configs.get(group));
	    }
	    return (0, ts_graphviz_1.toDot)(vizGraph);
	}
	graphviz.groupToDot = groupToDot;
	function addToVizGraphAndHighlight(graph, vizGraph, config) {
	    const state = addToVizGraph(graph, vizGraph, config === null || config === void 0 ? void 0 : config.noTerminal);
	    highlightPaths(state, config === null || config === void 0 ? void 0 : config.highlightedPaths);
	}
	const colors = [
	    'blue',
	    'darkgreen',
	    'red',
	    'yellow',
	    'orange',
	    'lightseagreen'
	];
	function pickHighlights(paths, excluded = []) {
	    const usableColors = colors.filter(c => !excluded.includes(c));
	    return paths.map((path, i) => { return { path, color: usableColors[i % usableColors.length] }; });
	}
	graphviz.pickHighlights = pickHighlights;
	function addToVizGraph(graph, vizGraph, noTerminal = false) {
	    const vizSubGraphs = new Map();
	    for (const source of graph.sources.keys()) {
	        if (source != graph.name) {
	            vizSubGraphs.set(source, vizGraph.createSubgraph(`cluster_${source}`, {
	                [ts_graphviz_1.attribute.label]: `Subgraph "${source}"`,
	                [ts_graphviz_1.attribute.color]: "black",
	                [ts_graphviz_1.attribute.style]: ""
	            }));
	        }
	    }
	    const getNode = function (vertex) {
	        const existingNode = state.getVertexState(vertex);
	        if (existingNode) {
	            return existingNode;
	        }
	        let newNode;
	        if (vertex.source == graph.name) {
	            newNode = vizGraph.createNode(vertex.type.name);
	        }
	        else {
	            const vizSubGraph = vizSubGraphs.get(vertex.source);
	            newNode = vizSubGraph.createNode(`${vertex.type.name}@${vertex.source}`);
	        }
	        state.setVertexState(vertex, newNode);
	        return newNode;
	    };
	    const pickGraphForEdge = function (head, tail) {
	        if (head.source == tail.source && head.source != graph.name) {
	            return vizSubGraphs.get(head.source);
	        }
	        return vizGraph;
	    };
	    const state = new querygraph_1$1.QueryGraphState(graph);
	    const onEdge = function (edge) {
	        const head = edge.head;
	        const tail = edge.tail;
	        if (noTerminal && graph.isTerminal(tail)) {
	            return false;
	        }
	        const headNode = getNode(head);
	        const tailNode = getNode(tail);
	        const attributes = {
	            [ts_graphviz_1.attribute.label]: edge.label(),
	        };
	        state.setEdgeState(edge, pickGraphForEdge(head, tail).createEdge([headNode, tailNode], attributes));
	        return true;
	    };
	    (0, querygraph_1$1.simpleTraversal)(graph, _ => undefined, onEdge);
	    return state;
	}
	function highlightPaths(state, toHighlights) {
	    toHighlights === null || toHighlights === void 0 ? void 0 : toHighlights.forEach(h => highlightPath(state, h));
	}
	function highlightPath(state, toHighlight) {
	    (0, graphPath_1$1.traversePath)(toHighlight.path, e => {
	        var _a, _b, _c;
	        for (const vAttrs of [(_a = state.getVertexState(e.head)) === null || _a === void 0 ? void 0 : _a.attributes, (_b = state.getVertexState(e.tail)) === null || _b === void 0 ? void 0 : _b.attributes]) {
	            vAttrs === null || vAttrs === void 0 ? void 0 : vAttrs.set(ts_graphviz_1.attribute.color, toHighlight.color);
	            vAttrs === null || vAttrs === void 0 ? void 0 : vAttrs.set(ts_graphviz_1.attribute.fontcolor, toHighlight.color);
	        }
	        const eAttrs = (_c = state.getEdgeState(e)) === null || _c === void 0 ? void 0 : _c.attributes;
	        eAttrs === null || eAttrs === void 0 ? void 0 : eAttrs.set(ts_graphviz_1.attribute.color, toHighlight.color);
	        eAttrs === null || eAttrs === void 0 ? void 0 : eAttrs.set(ts_graphviz_1.attribute.fontcolor, toHighlight.color);
	    });
	}

	var conditionsCaching = {};

	Object.defineProperty(conditionsCaching, "__esModule", { value: true });
	conditionsCaching.cachingConditionResolver = void 0;
	const federation_internals_1$3 = dist$2;
	const graphPath_1 = graphPath;
	const querygraph_1 = querygraph;
	function cachingConditionResolver(graph, resolver) {
	    const cache = new querygraph_1.QueryGraphState(graph);
	    return (edge, context, excludedEdges, excludedConditions) => {
	        (0, federation_internals_1$3.assert)(edge.conditions, 'Should not have been called for edge without conditions');
	        if (!context.isEmpty() || excludedConditions.length > 0) {
	            return resolver(edge, context, excludedEdges, excludedConditions);
	        }
	        const cachedResolutionAndExcludedEdges = cache.getEdgeState(edge);
	        if (cachedResolutionAndExcludedEdges) {
	            const [cachedResolution, forExcludedEdges] = cachedResolutionAndExcludedEdges;
	            return (0, graphPath_1.sameExcludedEdges)(forExcludedEdges, excludedEdges)
	                ? cachedResolution
	                : resolver(edge, context, excludedEdges, excludedConditions);
	        }
	        else {
	            const resolution = resolver(edge, context, excludedEdges, excludedConditions);
	            cache.setEdgeState(edge, [resolution, excludedEdges]);
	            return resolution;
	        }
	    };
	}
	conditionsCaching.cachingConditionResolver = cachingConditionResolver;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(querygraph, exports);
	__exportStar(graphPath, exports);
	__exportStar(pathTree, exports);
	__exportStar(graphviz, exports);
	__exportStar(structuralSubtyping, exports);
	__exportStar(transition, exports);
	__exportStar(pathContext, exports);
	__exportStar(conditionsCaching, exports);

	}(dist));

	var merging = {};

	var merge = {};

	var hints = {};

	Object.defineProperty(hints, "__esModule", { value: true });
	hints.printHint = hints.CompositionHint = hints.hintInconsistentArgumentPresence = hints.hintInconsistentDescription = hints.hintInconsistentExecutionDirectiveLocations = hints.hintInconsistentExecutionDirectiveRepeatable = hints.hintNoExecutionDirectiveLocationsIntersection = hints.hintInconsistentExecutionDirectivePresence = hints.hintInconsistentTypeSystemDirectiveLocations = hints.hintInconsistentTypeSystemDirectiveRepeatable = hints.hintInconsistentEnumValue = hints.hintInconsistentUnionMember = hints.hintInconsistentInputObjectField = hints.hintInconsistentInterfaceValueTypeField = hints.hintInconsistentObjectValueTypeField = hints.hintInconsistentEntity = hints.hintInconsistentDefaultValue = hints.hintInconsistentArgumentType = hints.hintInconsistentFieldType = hints.HintID = void 0;
	const graphql_1$1 = require$$2$2;
	class HintID {
	    constructor(code, description, mainElementDescription) {
	        this.code = code;
	        this.description = description;
	        this.mainElementDescription = mainElementDescription;
	    }
	    toString() {
	        return `${this.code}: ${this.description}`;
	    }
	}
	hints.HintID = HintID;
	hints.hintInconsistentFieldType = new HintID('InconsistentFieldType', 'Indicates that a field does not have the exact same types in all subgraphs, but that the types are "compatible"'
	    + ' (2 types are compatible if one is a non-nullable version of the other, a list version, a subtype, or a'
	    + ' combination of the former).', 'the field with mismatched types');
	hints.hintInconsistentArgumentType = new HintID('InconsistentArgumentType', 'Indicates that an argument type (of a field/input field/directive definition) does not have the exact same types'
	    + ' in all subgraphs, but that the types are "compatible" (2 types are compatible if one is a non-nullable'
	    + ' version of the other, a list version, a subtype, or a combination of the former).', 'the argument with mismatched types');
	hints.hintInconsistentDefaultValue = new HintID('InconsistentDefaultValuePresence', 'Indicates that an argument definition (of a field/input field/directive definition) has a default value in only'
	    + ' some of the subgraphs that define the argument.', 'the argument with default values in only some subgraphs');
	hints.hintInconsistentEntity = new HintID('InconsistentEntity', 'Indicates that an object is declared as an entity (has a `@key`) in only some of the subgraphs in which the object is defined', 'the object that is an entity in only some subgraphs');
	hints.hintInconsistentObjectValueTypeField = new HintID('InconsistentObjectValueTypeField', 'Indicates that a field of an object "value type" (has no `@key` in any subgraph) is not defined in all the subgraphs that declare the type', 'the field that is inconsistently declared between subgraphs');
	hints.hintInconsistentInterfaceValueTypeField = new HintID('InconsistentInterfaceValueTypeField', 'Indicates that a field of an interface "value type" (has no  `@key` in any subgraph) is not defined in all the subgraphs that declare the type', 'the field that is inconsistently declared between subgraphs');
	hints.hintInconsistentInputObjectField = new HintID('InconsistentInputObjectField', 'Indicates that a field of an input object type definition is only defined in a subset of the subgraphs that declare the input object', 'the field that is inconsistently declared between subgraphs');
	hints.hintInconsistentUnionMember = new HintID('InconsistentUnionMember', 'Indicates that a member of a union type definition is only defined in a subset of the subgraphs that declare the union', 'the union type which has an inconsistent member');
	hints.hintInconsistentEnumValue = new HintID('InconsistentEnumValue', 'Indicates that a value of an enum type definition is defined in only a subset of the subgraphs that declare the enum', 'the union type which has an inconsistent member');
	hints.hintInconsistentTypeSystemDirectiveRepeatable = new HintID('InconsistentTypeSystemDirectiveRepeatable', 'Indicates that a type system directive definition is marked repeatable in only a subset of the subgraphs that declare the directive (and will be repeatable in the supergraph)', 'the inconsistent directive');
	hints.hintInconsistentTypeSystemDirectiveLocations = new HintID('InconsistentTypeSystemDirectiveLocations', 'Indicates that a type system directive definition is declared with inconsistent locations across subgraphs (and will use the union of all locations in the supergraph)', 'the inconsistent directive');
	hints.hintInconsistentExecutionDirectivePresence = new HintID('InconsistentExecutionDirectivePresence', 'Indicates that an execution directive definition is declared in only some of the subgraphs', 'the inconsistent directive');
	hints.hintNoExecutionDirectiveLocationsIntersection = new HintID('NoExecutionDirectiveIntersection', 'Indicates that, for an execution directive definition, no location for it appears in all subgraphs', 'the inconsistent directive');
	hints.hintInconsistentExecutionDirectiveRepeatable = new HintID('InconsistentExecutionDirectiveRepeatable', 'Indicates that an execution directive definition is marked repeatable in only a subset of the subgraphs (and will not be repeatable in the supergraph)', 'the inconsistent directive');
	hints.hintInconsistentExecutionDirectiveLocations = new HintID('InconsistentExecutionDirectiveLocations', 'Indicates that an execution directive definition is declared with inconsistent locations across subgraphs (and will use the intersection of all locations in the supergraph)', 'the inconsistent directive');
	hints.hintInconsistentDescription = new HintID('InconsistentDescription', 'Indicates that an element has a description in more than one subgraph, and the descriptions are not equal', 'the element with inconsistent description');
	hints.hintInconsistentArgumentPresence = new HintID('InconsistentArgumentPresence', 'Indicates that an argument of an execution directive definition is not present in all subgraphs '
	    + 'and will not be part of the supergraph', 'the argument with mismatched types');
	class CompositionHint {
	    constructor(id, message, elementCoordinate, nodes) {
	        this.id = id;
	        this.message = message;
	        this.elementCoordinate = elementCoordinate;
	        this.nodes = nodes
	            ? (Array.isArray(nodes) ? (nodes.length === 0 ? undefined : nodes) : [nodes])
	            : undefined;
	    }
	    toString() {
	        return `[${this.id.code}]: ${this.message}`;
	    }
	}
	hints.CompositionHint = CompositionHint;
	function printHint(hint) {
	    let output = hint.toString();
	    if (hint.nodes) {
	        for (const node of hint.nodes) {
	            if (node.loc) {
	                output += '\n\n' + (0, graphql_1$1.printLocation)(node.loc);
	            }
	        }
	    }
	    return output;
	}
	hints.printHint = printHint;

	Object.defineProperty(merge, "__esModule", { value: true });
	merge.mergeSubgraphs = merge.isMergeFailure = merge.isMergeSuccessful = void 0;
	const federation_internals_1$2 = dist$2;
	const hints_1 = hints;
	const coreSpec = federation_internals_1$2.CORE_VERSIONS.latest();
	const joinSpec = federation_internals_1$2.JOIN_VERSIONS.latest();
	const tagSpec = federation_internals_1$2.TAG_VERSIONS.latest();
	const MAX_HUMAN_READABLE_LIST_LENGTH = 100;
	const MERGED_TYPE_SYSTEM_DIRECTIVES = ['inaccessible', 'deprecated', 'specifiedBy', 'tag'];
	const defaultCompositionOptions = {
	    allowedFieldTypeMergingSubtypingRules: federation_internals_1$2.DEFAULT_SUBTYPING_RULES
	};
	function isMergeSuccessful(mergeResult) {
	    return !isMergeFailure(mergeResult);
	}
	merge.isMergeSuccessful = isMergeSuccessful;
	function isMergeFailure(mergeResult) {
	    return !!mergeResult.errors;
	}
	merge.isMergeFailure = isMergeFailure;
	function mergeSubgraphs(subgraphs, options = {}) {
	    return new Merger(subgraphs, { ...defaultCompositionOptions, ...options }).merge();
	}
	merge.mergeSubgraphs = mergeSubgraphs;
	function printHumanReadableList(names, prefixSingle, prefixPlural) {
	    (0, federation_internals_1$2.assert)(names.length > 0, 'Should not have been called with no names');
	    if (names.length == 1) {
	        return prefixSingle ? prefixSingle + ' ' + names[0] : names[0];
	    }
	    let toDisplay = names;
	    let totalLength = toDisplay.reduce((count, name) => count + name.length, 0);
	    while (totalLength > MAX_HUMAN_READABLE_LIST_LENGTH && toDisplay.length > 1) {
	        toDisplay = toDisplay.slice(0, toDisplay.length - 1);
	        totalLength = toDisplay.reduce((count, name) => count + name.length, 0);
	    }
	    const prefix = prefixPlural
	        ? prefixPlural + ' '
	        : (prefixSingle ? prefixSingle + ' ' : '');
	    if (toDisplay.length === names.length) {
	        return prefix + (0, federation_internals_1$2.joinStrings)(toDisplay);
	    }
	    else {
	        return prefix + toDisplay.join(', ') + ', ...';
	    }
	}
	function printSubgraphNames(names) {
	    return printHumanReadableList(names.map(n => `"${n}"`), 'subgraph', 'subgraphs');
	}
	function copyTypeReference(source, dest) {
	    switch (source.kind) {
	        case 'ListType':
	            return new federation_internals_1$2.ListType(copyTypeReference(source.ofType, dest));
	        case 'NonNullType':
	            return new federation_internals_1$2.NonNullType(copyTypeReference(source.ofType, dest));
	        default:
	            const type = dest.type(source.name);
	            (0, federation_internals_1$2.assert)(type, () => `Cannot find type ${source} in destination schema (with types: ${dest.types().join(', ')})`);
	            return type;
	    }
	}
	function isMergedType(type) {
	    return !(0, federation_internals_1$2.isFederationType)(type) && !type.isIntrospectionType();
	}
	function isMergedField(field) {
	    return field.kind !== 'FieldDefinition' || !(0, federation_internals_1$2.isFederationField)(field);
	}
	function isMergedDirective(definition) {
	    if (MERGED_TYPE_SYSTEM_DIRECTIVES.includes(definition.name)) {
	        return true;
	    }
	    if (definition instanceof federation_internals_1$2.Directive) {
	        return false;
	    }
	    return definition.locations.some(loc => federation_internals_1$2.executableDirectiveLocations.includes(loc));
	}
	function filteredRoot(def, rootKind) {
	    var _a;
	    const type = (_a = def.root(rootKind)) === null || _a === void 0 ? void 0 : _a.type;
	    return type && hasMergedFields(type) ? type : undefined;
	}
	function hasMergedFields(type) {
	    for (const field of type.fields()) {
	        if (isMergedField(field)) {
	            return true;
	        }
	    }
	    return false;
	}
	function indexOfMax(arr) {
	    if (arr.length === 0) {
	        return -1;
	    }
	    let indexOfMax = 0;
	    for (let i = 1; i < arr.length; i++) {
	        if (arr[i] > arr[indexOfMax]) {
	            indexOfMax = i;
	        }
	    }
	    return indexOfMax;
	}
	function descriptionString(toIndent, indentation) {
	    return indentation + '"""\n' + indentation + toIndent.replace('\n', '\n' + indentation) + '\n' + indentation + '"""';
	}
	function typeKindToString(t) {
	    return t.kind.replace("Type", " Type");
	}
	function hasTagUsage(subgraph) {
	    const directive = subgraph.directive(federation_internals_1$2.tagDirectiveName);
	    return !!directive && directive.applications().length > 0;
	}
	function locationString(locations) {
	    if (locations.length === 0) {
	        return "";
	    }
	    return (locations.length === 1 ? 'location ' : 'locations ') + '"' + locations.join(', ') + '"';
	}
	class Merger {
	    constructor(subgraphs, options) {
	        this.subgraphs = subgraphs;
	        this.options = options;
	        this.errors = [];
	        this.hints = [];
	        this.merged = new federation_internals_1$2.Schema();
	        this.names = subgraphs.names();
	        this.subgraphsSchema = subgraphs.values().map(subgraph => subgraph.schema);
	        this.subgraphNamesToJoinSpecName = this.prepareSupergraph();
	        this.externalTesters = this.subgraphsSchema.map(schema => new federation_internals_1$2.ExternalTester(schema));
	    }
	    prepareSupergraph() {
	        coreSpec.addToSchema(this.merged);
	        coreSpec.applyFeatureToSchema(this.merged, joinSpec, undefined, 'EXECUTION');
	        if (this.subgraphsSchema.some(hasTagUsage)) {
	            coreSpec.applyFeatureToSchema(this.merged, tagSpec);
	        }
	        return joinSpec.populateGraphEnum(this.merged, this.subgraphs);
	    }
	    joinSpecName(subgraphIndex) {
	        return this.subgraphNamesToJoinSpecName.get(this.names[subgraphIndex]);
	    }
	    merge() {
	        this.addTypesShallow();
	        this.addDirectivesShallow();
	        for (const objectType of this.merged.types('ObjectType')) {
	            this.mergeImplements(this.subgraphsTypes(objectType), objectType);
	        }
	        for (const interfaceType of this.merged.types('InterfaceType')) {
	            this.mergeImplements(this.subgraphsTypes(interfaceType), interfaceType);
	        }
	        for (const unionType of this.merged.types('UnionType')) {
	            this.mergeType(this.subgraphsTypes(unionType), unionType);
	        }
	        this.mergeSchemaDefinition(this.subgraphsSchema.map(s => s.schemaDefinition), this.merged.schemaDefinition);
	        for (const type of this.merged.types()) {
	            if (type.kind === 'UnionType' || joinSpec.isSpecType(type)) {
	                continue;
	            }
	            this.mergeType(this.subgraphsTypes(type), type);
	        }
	        for (const definition of this.merged.directives()) {
	            if (coreSpec.isSpecDirective(definition) || joinSpec.isSpecDirective(definition)) {
	                continue;
	            }
	            this.mergeDirectiveDefinition(this.subgraphsSchema.map(s => s.directive(definition.name)), definition);
	        }
	        for (const federationDirective of MERGED_TYPE_SYSTEM_DIRECTIVES) {
	            const directive = this.merged.directive(federationDirective);
	            if (directive && !directive.isBuiltIn && directive.applications().length === 0) {
	                directive.remove();
	            }
	        }
	        if (!this.merged.schemaDefinition.rootType('query')) {
	            this.errors.push(federation_internals_1$2.ERRORS.NO_QUERIES.err({ message: "No queries found in any subgraph: a supergraph must have a query root type." }));
	        }
	        if (this.errors.length === 0) {
	            this.postMergeValidations();
	            if (this.errors.length === 0) {
	                try {
	                    this.merged.validate();
	                }
	                catch (e) {
	                    const causes = (0, federation_internals_1$2.errorCauses)(e);
	                    if (causes) {
	                        this.errors.push(...causes);
	                    }
	                    else {
	                        throw e;
	                    }
	                }
	            }
	        }
	        if (this.errors.length > 0) {
	            return { errors: this.errors };
	        }
	        else {
	            return {
	                supergraph: this.merged,
	                hints: this.hints
	            };
	        }
	    }
	    addTypesShallow() {
	        const mismatchedTypes = new Set();
	        for (const subgraph of this.subgraphsSchema) {
	            for (const type of subgraph.allTypes()) {
	                if (!isMergedType(type)) {
	                    continue;
	                }
	                const previous = this.merged.type(type.name);
	                if (!previous) {
	                    this.merged.addType((0, federation_internals_1$2.newNamedType)(type.kind, type.name));
	                }
	                else if (previous.kind !== type.kind) {
	                    mismatchedTypes.add(type.name);
	                }
	            }
	        }
	        mismatchedTypes.forEach(t => this.reportMismatchedTypeDefinitions(t));
	    }
	    addDirectivesShallow() {
	        for (const subgraph of this.subgraphsSchema) {
	            for (const directive of subgraph.allDirectives()) {
	                if (!isMergedDirective(directive)) {
	                    continue;
	                }
	                if (!this.merged.directive(directive.name)) {
	                    this.merged.addDirectiveDefinition(new federation_internals_1$2.DirectiveDefinition(directive.name));
	                }
	            }
	        }
	    }
	    reportMismatchedTypeDefinitions(mismatchedType) {
	        const supergraphType = this.merged.type(mismatchedType);
	        this.reportMismatchError(federation_internals_1$2.ERRORS.TYPE_KIND_MISMATCH, `Type "${mismatchedType}" has mismatched kind: it is defined as `, supergraphType, this.subgraphsSchema.map(s => s.type(mismatchedType)), typeKindToString);
	    }
	    reportMismatchError(code, message, mismatchedElement, subgraphElements, mismatchAccessor) {
	        this.reportMismatch(mismatchedElement, subgraphElements, mismatchAccessor, (elt, names) => `${elt} in ${names}`, (elt, names) => `${elt} in ${names}`, (distribution, nodes) => {
	            this.errors.push(code.err({
	                message: message + (0, federation_internals_1$2.joinStrings)(distribution, ' and ', ' but '),
	                nodes
	            }));
	        }, elt => !elt);
	    }
	    reportMismatchErrorWithSpecifics(code, message, mismatchedElement, subgraphElements, mismatchAccessor, supergraphElementPrinter, otherElementsPrinter, ignorePredicate, includeMissingSources = false) {
	        this.reportMismatch(mismatchedElement, subgraphElements, mismatchAccessor, supergraphElementPrinter, otherElementsPrinter, (distribution, nodes) => {
	            this.errors.push(code.err({
	                message: message + distribution[0] + (0, federation_internals_1$2.joinStrings)(distribution.slice(1), ' and '),
	                nodes
	            }));
	        }, ignorePredicate, includeMissingSources);
	    }
	    reportMismatchHint(hintId, message, supergraphElement, subgraphElements, mismatchAccessor, supergraphElementPrinter, otherElementsPrinter, ignorePredicate, includeMissingSources = false, noEndOfMessageDot = false) {
	        this.reportMismatch(supergraphElement, subgraphElements, mismatchAccessor, supergraphElementPrinter, otherElementsPrinter, (distribution, astNodes) => {
	            this.hints.push(new hints_1.CompositionHint(hintId, message + distribution[0] + (0, federation_internals_1$2.joinStrings)(distribution.slice(1), ' and ') + (noEndOfMessageDot ? '' : '.'), supergraphElement instanceof federation_internals_1$2.NamedSchemaElement ? supergraphElement.coordinate : '<schema>', astNodes));
	        }, ignorePredicate, includeMissingSources);
	    }
	    reportMismatch(supergraphElement, subgraphElements, mismatchAccessor, supergraphElementPrinter, otherElementsPrinter, reporter, ignorePredicate, includeMissingSources = false) {
	        var _a;
	        const distributionMap = new federation_internals_1$2.MultiMap();
	        const astNodes = [];
	        for (const [i, subgraphElt] of subgraphElements.entries()) {
	            if (!subgraphElt) {
	                if (includeMissingSources) {
	                    distributionMap.add('', this.names[i]);
	                }
	                continue;
	            }
	            if (ignorePredicate && ignorePredicate(subgraphElt)) {
	                continue;
	            }
	            const elt = mismatchAccessor(subgraphElt, false);
	            distributionMap.add(elt !== null && elt !== void 0 ? elt : '', this.names[i]);
	            if (subgraphElt.sourceAST) {
	                astNodes.push((0, federation_internals_1$2.addSubgraphToASTNode)(subgraphElt.sourceAST, this.names[i]));
	            }
	        }
	        const supergraphMismatch = (_a = mismatchAccessor(supergraphElement, true)) !== null && _a !== void 0 ? _a : '';
	        (0, federation_internals_1$2.assert)(distributionMap.size > 1, () => `Should not have been called for ${supergraphElement}`);
	        const distribution = [];
	        const subgraphsLikeSupergraph = distributionMap.get(supergraphMismatch);
	        distribution.push(supergraphElementPrinter(supergraphMismatch, subgraphsLikeSupergraph ? printSubgraphNames(subgraphsLikeSupergraph) : undefined));
	        for (const [v, names] of distributionMap.entries()) {
	            if (v === supergraphMismatch) {
	                continue;
	            }
	            distribution.push(otherElementsPrinter(v === '' ? undefined : v, printSubgraphNames(names)));
	        }
	        reporter(distribution, astNodes);
	    }
	    subgraphsTypes(supergraphType) {
	        return this.subgraphsSchema.map((subgraph) => {
	            const type = subgraph.type(supergraphType.name);
	            if (!type || type.kind !== supergraphType.kind) {
	                return undefined;
	            }
	            return type;
	        });
	    }
	    mergeImplements(sources, dest) {
	        const implemented = new Set();
	        const joinImplementsDirective = joinSpec.implementsDirective(this.merged);
	        for (const [idx, source] of sources.entries()) {
	            if (source) {
	                const name = this.joinSpecName(idx);
	                for (const itf of source.interfaces()) {
	                    implemented.add(itf.name);
	                    dest.applyDirective(joinImplementsDirective, { graph: name, interface: itf.name });
	                }
	            }
	        }
	        implemented.forEach(itf => dest.addImplementedInterface(itf));
	    }
	    mergeDescription(sources, dest) {
	        const descriptions = [];
	        const counts = [];
	        for (const source of sources) {
	            if (!source || source.description === undefined) {
	                continue;
	            }
	            const idx = descriptions.indexOf(source.description);
	            if (idx < 0) {
	                descriptions.push(source.description);
	                counts.push(source.description === '' ? Number.MIN_SAFE_INTEGER : 1);
	            }
	            else {
	                counts[idx]++;
	            }
	        }
	        if (descriptions.length > 0) {
	            if (descriptions.length === 1) {
	                dest.description = descriptions[0];
	            }
	            else {
	                const idx = indexOfMax(counts);
	                dest.description = descriptions[idx];
	                const name = dest instanceof federation_internals_1$2.NamedSchemaElement ? `Element "${dest.coordinate}"` : 'The schema definition';
	                this.reportMismatchHint(hints_1.hintInconsistentDescription, `${name} has inconsistent descriptions across subgraphs. `, dest, sources, elt => elt.description, (desc, subgraphs) => `The supergraph will use description (from ${subgraphs}):\n${descriptionString(desc, '  ')}`, (desc, subgraphs) => `\nIn ${subgraphs}, the description is:\n${descriptionString(desc, '  ')}`, elt => (elt === null || elt === void 0 ? void 0 : elt.description) === undefined, false, true);
	            }
	        }
	    }
	    mergeType(sources, dest) {
	        this.checkForExtensionWithNoBase(sources, dest);
	        this.mergeDescription(sources, dest);
	        this.addJoinType(sources, dest);
	        this.mergeAppliedDirectives(sources, dest);
	        switch (dest.kind) {
	            case 'ScalarType':
	                break;
	            case 'ObjectType':
	                this.mergeObject(sources, dest);
	                break;
	            case 'InterfaceType':
	                this.mergeInterface(sources, dest);
	                break;
	            case 'UnionType':
	                this.mergeUnion(sources, dest);
	                break;
	            case 'EnumType':
	                this.mergeEnum(sources, dest);
	                break;
	            case 'InputObjectType':
	                this.mergeInput(sources, dest);
	                break;
	        }
	    }
	    checkForExtensionWithNoBase(sources, dest) {
	        if ((0, federation_internals_1$2.isObjectType)(dest) && dest.isRootType()) {
	            return;
	        }
	        const defSubgraphs = [];
	        const extensionSubgraphs = [];
	        const extensionASTs = [];
	        for (const [i, source] of sources.entries()) {
	            if (!source) {
	                continue;
	            }
	            if (source.hasNonExtensionElements()) {
	                defSubgraphs.push(this.names[i]);
	            }
	            if (source.hasExtensionElements()) {
	                extensionSubgraphs.push(this.names[i]);
	                extensionASTs.push((0, federation_internals_1$2.firstOf)(source.extensions().values()).sourceAST);
	            }
	        }
	        if (extensionSubgraphs.length > 0 && defSubgraphs.length === 0) {
	            for (const [i, subgraph] of extensionSubgraphs.entries()) {
	                this.errors.push(federation_internals_1$2.ERRORS.EXTENSION_WITH_NO_BASE.err({
	                    message: `[${subgraph}] Type "${dest}" is an extension type, but there is no type definition for "${dest}" in any subgraph.`,
	                    nodes: extensionASTs[i],
	                }));
	            }
	        }
	    }
	    addJoinType(sources, dest) {
	        const joinTypeDirective = joinSpec.typeDirective(this.merged);
	        for (const [idx, source] of sources.entries()) {
	            if (!source) {
	                continue;
	            }
	            const sourceSchema = this.subgraphsSchema[idx];
	            const keys = source.appliedDirectivesOf(federation_internals_1$2.federationBuiltIns.keyDirective(sourceSchema));
	            const name = this.joinSpecName(idx);
	            if (!keys.length) {
	                dest.applyDirective(joinTypeDirective, { graph: name });
	            }
	            else {
	                for (const key of keys) {
	                    const extension = key.ofExtension() || source.hasAppliedDirective(federation_internals_1$2.federationBuiltIns.extendsDirective(sourceSchema)) ? true : undefined;
	                    dest.applyDirective(joinTypeDirective, { graph: name, key: key.arguments().fields, extension });
	                }
	            }
	        }
	    }
	    mergeObject(sources, dest) {
	        const isEntity = this.hintOnInconsistentEntity(sources, dest);
	        const isValueType = !isEntity && !dest.isRootType();
	        this.addFieldsShallow(sources, dest);
	        if (!dest.hasFields()) {
	            dest.remove();
	        }
	        else {
	            for (const destField of dest.fields()) {
	                if (isValueType) {
	                    this.hintOnInconsistentValueTypeField(sources, dest, destField);
	                }
	                const subgraphFields = sources.map(t => t === null || t === void 0 ? void 0 : t.field(destField.name));
	                this.mergeField(subgraphFields, destField);
	            }
	        }
	    }
	    hintOnInconsistentEntity(sources, dest) {
	        const sourceAsEntity = [];
	        const sourceAsNonEntity = [];
	        for (const source of sources) {
	            if (!source) {
	                continue;
	            }
	            if (source.hasAppliedDirective('key')) {
	                sourceAsEntity.push(source);
	            }
	            else {
	                sourceAsNonEntity.push(source);
	            }
	        }
	        if (sourceAsEntity.length > 0 && sourceAsNonEntity.length > 0) {
	            this.reportMismatchHint(hints_1.hintInconsistentEntity, `Type "${dest}" is declared as an entity (has a @key applied) in only some subgraphs: `, dest, sources, type => type.hasAppliedDirective('key') ? 'yes' : 'no', (_, subgraphs) => `it has no key in ${subgraphs}`, (_, subgraphs) => ` but has one in ${subgraphs}`);
	        }
	        return sourceAsEntity.length > 0;
	    }
	    hintOnInconsistentValueTypeField(sources, dest, field) {
	        let hintId;
	        let typeDescription;
	        switch (dest.kind) {
	            case 'ObjectType':
	                hintId = hints_1.hintInconsistentObjectValueTypeField;
	                typeDescription = 'non-entity object';
	                break;
	            case 'InterfaceType':
	                hintId = hints_1.hintInconsistentInterfaceValueTypeField;
	                typeDescription = 'interface';
	                break;
	            case 'InputObjectType':
	                hintId = hints_1.hintInconsistentInputObjectField;
	                typeDescription = 'input object';
	                break;
	        }
	        for (const source of sources) {
	            if (source && !source.field(field.name)) {
	                this.reportMismatchHint(hintId, `Field "${field.coordinate}" of ${typeDescription} type "${dest}" is not defined in all the subgraphs defining "${dest}" (but can always be resolved from these subgraphs): `, dest, sources, type => type.field(field.name) ? 'yes' : 'no', (_, subgraphs) => `"${field.coordinate}" is defined in ${subgraphs}`, (_, subgraphs) => ` but not in ${subgraphs}`);
	            }
	        }
	    }
	    addFieldsShallow(sources, dest) {
	        for (const source of sources) {
	            if (!source) {
	                continue;
	            }
	            for (const field of source.fields()) {
	                if (!isMergedField(field)) {
	                    continue;
	                }
	                if (!dest.field(field.name)) {
	                    dest.addField(field.name);
	                }
	            }
	        }
	    }
	    isExternal(sourceIdx, field) {
	        return this.externalTesters[sourceIdx].isExternal(field);
	    }
	    withoutExternal(sources) {
	        return sources.map((s, i) => s !== undefined && this.isExternal(i, s) ? undefined : s);
	    }
	    hasExternal(sources) {
	        return sources.some((s, i) => s !== undefined && this.isExternal(i, s));
	    }
	    mergeField(sources, dest) {
	        if (sources.every((s, i) => s === undefined || this.isExternal(i, s))) {
	            const definingSubgraphs = sources.map((source, i) => source ? this.names[i] : undefined).filter(s => s !== undefined);
	            const nodes = sources.map(source => source === null || source === void 0 ? void 0 : source.sourceAST).filter(s => s !== undefined);
	            this.errors.push(federation_internals_1$2.ERRORS.EXTERNAL_MISSING_ON_BASE.err({
	                message: `Field "${dest.coordinate}" is marked @external on all the subgraphs in which it is listed (${printSubgraphNames(definingSubgraphs)}).`,
	                nodes
	            }));
	            return;
	        }
	        const withoutExternal = this.withoutExternal(sources);
	        this.mergeDescription(withoutExternal, dest);
	        this.mergeAppliedDirectives(withoutExternal, dest);
	        this.addArgumentsShallow(withoutExternal, dest);
	        for (const destArg of dest.arguments()) {
	            const subgraphArgs = withoutExternal.map(f => f === null || f === void 0 ? void 0 : f.argument(destArg.name));
	            this.mergeArgument(subgraphArgs, destArg);
	        }
	        const allTypesEqual = this.mergeTypeReference(withoutExternal, dest);
	        if (this.hasExternal(sources)) {
	            this.validateExternalFields(sources, dest, allTypesEqual);
	        }
	        this.addJoinField(sources, dest, allTypesEqual);
	    }
	    validateExternalFields(sources, dest, allTypesEqual) {
	        let hasInvalidTypes = false;
	        const invalidArgsPresence = new Set();
	        const invalidArgsTypes = new Set();
	        const invalidArgsDefaults = new Set();
	        for (const [i, source] of sources.entries()) {
	            if (!source || !this.isExternal(i, source)) {
	                continue;
	            }
	            if (!((0, federation_internals_1$2.sameType)(dest.type, source.type) || (!allTypesEqual && this.isStrictSubtype(dest.type, source.type)))) {
	                hasInvalidTypes = true;
	            }
	            for (const destArg of dest.arguments()) {
	                const name = destArg.name;
	                const arg = source.argument(name);
	                if (!arg) {
	                    invalidArgsPresence.add(name);
	                    continue;
	                }
	                if (!(0, federation_internals_1$2.sameType)(destArg.type, arg.type) && !this.isStrictSubtype(arg.type, destArg.type)) {
	                    invalidArgsTypes.add(name);
	                }
	                if (destArg.defaultValue !== arg.defaultValue) {
	                    invalidArgsDefaults.add(name);
	                }
	            }
	        }
	        if (hasInvalidTypes) {
	            this.reportMismatchError(federation_internals_1$2.ERRORS.EXTERNAL_TYPE_MISMATCH, `Field "${dest.coordinate}" has incompatible types across subgraphs (where marked @external): it has `, dest, sources, field => `type "${field.type}"`);
	        }
	        for (const arg of invalidArgsPresence) {
	            const destArg = dest.argument(arg);
	            this.reportMismatchErrorWithSpecifics(federation_internals_1$2.ERRORS.EXTERNAL_ARGUMENT_MISSING, `Field "${dest.coordinate}" is missing argument "${destArg.coordinate}" in some subgraphs where it is marked @external: `, destArg, sources.map(s => s === null || s === void 0 ? void 0 : s.argument(destArg.name)), arg => arg ? `argument "${arg.coordinate}"` : undefined, (elt, subgraphs) => `${elt} is declared in ${subgraphs}`, (_, subgraphs) => ` but not in ${subgraphs} (where "${dest.coordinate}" is @external).`, undefined, true);
	        }
	        for (const arg of invalidArgsTypes) {
	            const destArg = dest.argument(arg);
	            this.reportMismatchError(federation_internals_1$2.ERRORS.EXTERNAL_ARGUMENT_TYPE_MISMATCH, `Argument "${destArg.coordinate}" has incompatible types across subgraphs (where "${dest.coordinate}" is marked @external): it has `, destArg, sources.map(s => s === null || s === void 0 ? void 0 : s.argument(destArg.name)), arg => `type "${arg.type}"`);
	        }
	        for (const arg of invalidArgsDefaults) {
	            const destArg = dest.argument(arg);
	            this.reportMismatchError(federation_internals_1$2.ERRORS.EXTERNAL_ARGUMENT_DEFAULT_MISMATCH, `Argument "${destArg.coordinate}" has incompatible defaults across subgraphs (where "${dest.coordinate}" is marked @external): it has `, destArg, sources.map(s => s === null || s === void 0 ? void 0 : s.argument(destArg.name)), arg => arg.defaultValue !== undefined ? `default value ${(0, federation_internals_1$2.valueToString)(arg.defaultValue, arg.type)}` : 'no default value');
	        }
	    }
	    needsJoinField(sources, parentName, allTypesEqual) {
	        if (!allTypesEqual) {
	            return true;
	        }
	        for (const [idx, source] of sources.entries()) {
	            if (source) {
	                if (this.isExternal(idx, source)
	                    || source.hasAppliedDirective(federation_internals_1$2.providesDirectiveName)
	                    || source.hasAppliedDirective(federation_internals_1$2.requiresDirectiveName)) {
	                    return true;
	                }
	            }
	            else {
	                if (this.subgraphsSchema[idx].type(parentName)) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }
	    addJoinField(sources, dest, allTypesEqual) {
	        var _a;
	        if (!this.needsJoinField(sources, dest.parent.name, allTypesEqual)) {
	            return;
	        }
	        const joinFieldDirective = joinSpec.fieldDirective(this.merged);
	        for (const [idx, source] of sources.entries()) {
	            if (!source) {
	                continue;
	            }
	            const external = this.isExternal(idx, source);
	            const name = this.joinSpecName(idx);
	            dest.applyDirective(joinFieldDirective, {
	                graph: name,
	                requires: this.getFieldSet(source, federation_internals_1$2.federationBuiltIns.requiresDirective(this.subgraphsSchema[idx])),
	                provides: this.getFieldSet(source, federation_internals_1$2.federationBuiltIns.providesDirective(this.subgraphsSchema[idx])),
	                type: allTypesEqual ? undefined : (_a = source.type) === null || _a === void 0 ? void 0 : _a.toString(),
	                external: external ? true : undefined,
	            });
	        }
	    }
	    getFieldSet(element, directive) {
	        const applications = element.appliedDirectivesOf(directive);
	        (0, federation_internals_1$2.assert)(applications.length <= 1, () => `Found more than one application of ${directive} on ${element}`);
	        return applications.length === 0 ? undefined : applications[0].arguments().fields;
	    }
	    mergeTypeReference(sources, dest, isContravariant = false) {
	        let destType;
	        let hasSubtypes = false;
	        let hasIncompatible = false;
	        for (const source of sources) {
	            if (!source) {
	                continue;
	            }
	            const sourceType = source.type;
	            if (!destType || (0, federation_internals_1$2.sameType)(destType, sourceType)) {
	                destType = sourceType;
	            }
	            else if (this.isStrictSubtype(destType, sourceType)) {
	                hasSubtypes = true;
	                if (isContravariant) {
	                    destType = sourceType;
	                }
	            }
	            else if (this.isStrictSubtype(sourceType, destType)) {
	                hasSubtypes = true;
	                if (!isContravariant) {
	                    destType = sourceType;
	                }
	            }
	            else {
	                hasIncompatible = true;
	            }
	        }
	        (0, federation_internals_1$2.assert)(destType, () => `We should have found at least one subgraph with a type for ${dest.coordinate}`);
	        dest.type = copyTypeReference(destType, this.merged);
	        const isArgument = dest instanceof federation_internals_1$2.ArgumentDefinition;
	        const elementKind = isArgument ? 'Argument' : 'Field';
	        if (hasIncompatible) {
	            this.reportMismatchError(isArgument ? federation_internals_1$2.ERRORS.ARGUMENT_TYPE_MISMATCH : federation_internals_1$2.ERRORS.FIELD_TYPE_MISMATCH, `${elementKind} "${dest.coordinate}" has incompatible types across subgraphs: it has `, dest, sources, field => `type "${field.type}"`);
	            return false;
	        }
	        else if (hasSubtypes) {
	            this.reportMismatchHint(isArgument ? hints_1.hintInconsistentArgumentType : hints_1.hintInconsistentFieldType, `${elementKind} "${dest.coordinate}" has mismatched, but compatible, types across subgraphs: `, dest, sources, field => field.type.toString(), (elt, subgraphs) => `will use type "${elt}" (from ${subgraphs}) in supergraph but "${dest.coordinate}" has `, (elt, subgraphs) => `${isContravariant ? 'supertype' : 'subtype'} "${elt}" in ${subgraphs}`);
	            return false;
	        }
	        return true;
	    }
	    isStrictSubtype(type, maybeSubType) {
	        return (0, federation_internals_1$2.isStrictSubtype)(type, maybeSubType, this.options.allowedFieldTypeMergingSubtypingRules, (union, maybeMember) => this.merged.type(union.name).hasTypeMember(maybeMember.name), (maybeImplementer, itf) => this.merged.type(maybeImplementer.name).implementsInterface(itf));
	    }
	    addArgumentsShallow(sources, dest) {
	        for (const source of sources) {
	            if (!source) {
	                continue;
	            }
	            for (const argument of source.arguments()) {
	                if (!dest.argument(argument.name)) {
	                    dest.addArgument(argument.name);
	                }
	            }
	        }
	    }
	    mergeArgument(sources, dest, useIntersection = false) {
	        if (useIntersection) {
	            for (const source of sources) {
	                if (!source) {
	                    this.reportMismatchHint(hints_1.hintInconsistentArgumentPresence, `Argument "${dest.coordinate}" will not be added to "${dest.parent}" in the supergraph as it does not appear in all subgraphs: `, dest, sources, _ => 'yes', (_, subgraphs) => `it is defined in ${subgraphs}`, (_, subgraphs) => ` but not in ${subgraphs}`, undefined, true);
	                    dest.remove();
	                    return;
	                }
	            }
	        }
	        this.mergeDescription(sources, dest);
	        this.mergeAppliedDirectives(sources, dest);
	        this.mergeTypeReference(sources, dest, true);
	        this.mergeDefaultValue(sources, dest, 'Argument');
	    }
	    mergeDefaultValue(sources, dest, kind) {
	        let destDefault;
	        let hasSeenSource = false;
	        let isInconsistent = false;
	        let isIncompatible = false;
	        for (const source of sources) {
	            if (!source) {
	                continue;
	            }
	            const sourceDefault = source.defaultValue;
	            if (destDefault === undefined) {
	                destDefault = sourceDefault;
	                if (hasSeenSource && sourceDefault !== undefined) {
	                    isInconsistent = true;
	                }
	            }
	            else if (!(0, federation_internals_1$2.valueEquals)(destDefault, sourceDefault)) {
	                isInconsistent = true;
	                if (sourceDefault !== undefined) {
	                    isIncompatible = true;
	                }
	            }
	            hasSeenSource = true;
	        }
	        if (!isInconsistent || isIncompatible) {
	            dest.defaultValue = destDefault;
	        }
	        if (isIncompatible) {
	            this.reportMismatchError(kind === 'Argument' ? federation_internals_1$2.ERRORS.ARGUMENT_DEFAULT_MISMATCH : federation_internals_1$2.ERRORS.INPUT_FIELD_DEFAULT_MISMATCH, `${kind} "${dest.coordinate}" has incompatible default values across subgraphs: it has `, dest, sources, arg => arg.defaultValue !== undefined ? `default value ${(0, federation_internals_1$2.valueToString)(arg.defaultValue, arg.type)}` : 'no default value');
	        }
	        else if (isInconsistent) {
	            this.reportMismatchHint(hints_1.hintInconsistentDefaultValue, `${kind} "${dest.coordinate}" has a default value in only some subgraphs: `, dest, sources, arg => arg.defaultValue !== undefined ? (0, federation_internals_1$2.valueToString)(arg.defaultValue, arg.type) : undefined, (_, subgraphs) => `will not use a default in the supergraph (there is no default in ${subgraphs}) but `, (elt, subgraphs) => `"${dest.coordinate}" has default value ${elt} in ${subgraphs}`);
	        }
	    }
	    mergeInterface(sources, dest) {
	        this.addFieldsShallow(sources, dest);
	        for (const destField of dest.fields()) {
	            this.hintOnInconsistentValueTypeField(sources, dest, destField);
	            const subgraphFields = sources.map(t => t === null || t === void 0 ? void 0 : t.field(destField.name));
	            this.mergeField(subgraphFields, destField);
	        }
	    }
	    mergeUnion(sources, dest) {
	        this.mergeDescription(sources, dest);
	        for (const source of sources) {
	            if (!source) {
	                continue;
	            }
	            for (const type of source.types()) {
	                if (!dest.hasTypeMember(type.name)) {
	                    dest.addType(type.name);
	                }
	            }
	        }
	        for (const type of dest.types()) {
	            this.hintOnInconsistentUnionMember(sources, dest, type.name);
	        }
	    }
	    hintOnInconsistentUnionMember(sources, dest, memberName) {
	        for (const source of sources) {
	            if (source && !source.hasTypeMember(memberName)) {
	                this.reportMismatchHint(hints_1.hintInconsistentUnionMember, `Member type "${memberName}" in union type "${dest}" is only defined in a subset of subgraphs defining "${dest}" (but can always be resolved from these subgraphs): `, dest, sources, type => type.hasTypeMember(memberName) ? 'yes' : 'no', (_, subgraphs) => `"${memberName}" is defined in ${subgraphs}`, (_, subgraphs) => ` but not in ${subgraphs}`);
	            }
	        }
	    }
	    mergeEnum(sources, dest) {
	        for (const source of sources) {
	            if (!source) {
	                continue;
	            }
	            for (const value of source.values) {
	                if (!dest.value(value.name)) {
	                    dest.addValue(value.name);
	                }
	            }
	        }
	        for (const value of dest.values) {
	            const valueSources = sources.map(s => s === null || s === void 0 ? void 0 : s.value(value.name));
	            this.mergeDescription(valueSources, value);
	            this.mergeAppliedDirectives(valueSources, value);
	            this.hintOnInconsistentEnumValue(sources, dest, value.name);
	        }
	    }
	    hintOnInconsistentEnumValue(sources, dest, valueName) {
	        for (const source of sources) {
	            if (source && !source.value(valueName)) {
	                this.reportMismatchHint(hints_1.hintInconsistentEnumValue, `Value "${valueName}" of enum type "${dest}" is only defined in a subset of the subgraphs defining "${dest}" (but can always be resolved from these subgraphs): `, dest, sources, type => type.value(valueName) ? 'yes' : 'no', (_, subgraphs) => `"${valueName}" is defined in ${subgraphs}`, (_, subgraphs) => ` but not in ${subgraphs}`);
	            }
	        }
	    }
	    mergeInput(sources, dest) {
	        this.addFieldsShallow(sources, dest);
	        for (const destField of dest.fields()) {
	            this.hintOnInconsistentValueTypeField(sources, dest, destField);
	            const subgraphFields = sources.map(t => t === null || t === void 0 ? void 0 : t.field(destField.name));
	            this.mergeInputField(subgraphFields, destField);
	        }
	    }
	    mergeInputField(sources, dest) {
	        this.mergeDescription(sources, dest);
	        this.mergeAppliedDirectives(sources, dest);
	        const allTypesEqual = this.mergeTypeReference(sources, dest, true);
	        this.addJoinField(sources, dest, allTypesEqual);
	        this.mergeDefaultValue(sources, dest, 'Input field');
	    }
	    mergeDirectiveDefinition(sources, dest) {
	        this.mergeDescription(sources, dest);
	        if (MERGED_TYPE_SYSTEM_DIRECTIVES.includes(dest.name)) {
	            this.mergeTypeSystemDirectiveDefinition(sources, dest);
	        }
	        else {
	            this.mergeExecutionDirectiveDefinition(sources, dest);
	        }
	    }
	    mergeTypeSystemDirectiveDefinition(sources, dest) {
	        this.addArgumentsShallow(sources, dest);
	        for (const destArg of dest.arguments()) {
	            const subgraphArgs = sources.map(f => f === null || f === void 0 ? void 0 : f.argument(destArg.name));
	            this.mergeArgument(subgraphArgs, destArg);
	        }
	        let repeatable = undefined;
	        let inconsistentRepeatable = false;
	        let locations = undefined;
	        let inconsistentLocations = false;
	        for (const source of sources) {
	            if (!source) {
	                continue;
	            }
	            if (repeatable === undefined) {
	                repeatable = source.repeatable;
	            }
	            else if (repeatable !== source.repeatable) {
	                inconsistentRepeatable = true;
	            }
	            const sourceLocations = this.extractLocations(source);
	            if (!locations) {
	                locations = sourceLocations;
	            }
	            else {
	                if (!(0, federation_internals_1$2.arrayEquals)(locations, sourceLocations)) {
	                    inconsistentLocations = true;
	                }
	                sourceLocations.forEach(loc => {
	                    if (!locations.includes(loc)) {
	                        locations.push(loc);
	                    }
	                });
	            }
	        }
	        dest.repeatable = repeatable;
	        dest.addLocations(...locations);
	        if (inconsistentRepeatable) {
	            this.reportMismatchHint(hints_1.hintInconsistentTypeSystemDirectiveRepeatable, `Type system directive "${dest}" is marked repeatable in the supergraph but it is inconsistently marked repeatable in subgraphs: `, dest, sources, directive => directive.repeatable ? 'yes' : 'no', (_, subgraphs) => `it is repeatable in ${subgraphs}`, (_, subgraphs) => ` but not in ${subgraphs}`);
	        }
	        if (inconsistentLocations) {
	            this.reportMismatchHint(hints_1.hintInconsistentTypeSystemDirectiveLocations, `Type system directive "${dest}" has inconsistent locations across subgraphs `, dest, sources, directive => locationString(this.extractLocations(directive)), (locs, subgraphs) => `and will use ${locs} (union of all subgraphs) in the supergraph, but has: ${subgraphs ? `${locs} in ${subgraphs} and ` : ''}`, (locs, subgraphs) => `${locs} in ${subgraphs}`);
	        }
	    }
	    mergeExecutionDirectiveDefinition(sources, dest) {
	        let repeatable = undefined;
	        let inconsistentRepeatable = false;
	        let locations = undefined;
	        let inconsistentLocations = false;
	        for (const source of sources) {
	            if (!source) {
	                const usages = dest.remove();
	                (0, federation_internals_1$2.assert)(usages.length === 0, () => `Found usages of execution directive ${dest}: ${usages}`);
	                this.reportMismatchHint(hints_1.hintInconsistentExecutionDirectivePresence, `Execution directive "${dest}" will not be part of the supergraph as it does not appear in all subgraphs: `, dest, sources, _ => 'yes', (_, subgraphs) => `it is defined in ${subgraphs}`, (_, subgraphs) => ` but not in ${subgraphs}`, undefined, true);
	                return;
	            }
	            if (repeatable === undefined) {
	                repeatable = source.repeatable;
	            }
	            else if (repeatable !== source.repeatable) {
	                inconsistentRepeatable = true;
	                repeatable = false;
	            }
	            const sourceLocations = this.extractLocations(source);
	            if (!locations) {
	                locations = sourceLocations;
	            }
	            else {
	                if (!(0, federation_internals_1$2.arrayEquals)(locations, sourceLocations)) {
	                    inconsistentLocations = true;
	                }
	                locations = locations.filter(loc => sourceLocations.includes(loc));
	                if (locations.length === 0) {
	                    const usages = dest.remove();
	                    (0, federation_internals_1$2.assert)(usages.length === 0, () => `Found usages of execution directive ${dest}: ${usages}`);
	                    this.reportMismatchHint(hints_1.hintNoExecutionDirectiveLocationsIntersection, `Execution directive "${dest}" has no location that is common to all subgraphs: `, dest, sources, directive => locationString(this.extractLocations(directive)), () => `it will not appear in the subgraph as there no intersection between `, (locs, subgraphs) => `${locs} in ${subgraphs}`);
	                    return;
	                }
	            }
	        }
	        dest.repeatable = repeatable;
	        dest.addLocations(...locations);
	        if (inconsistentRepeatable) {
	            this.reportMismatchHint(hints_1.hintInconsistentExecutionDirectiveRepeatable, `Execution directive "${dest}" will not be marked repeatable in the supergraph as it is inconsistently marked repeatable in subgraphs: `, dest, sources, directive => directive.repeatable ? 'yes' : 'no', (_, subgraphs) => `it is not repeatable in ${subgraphs}`, (_, subgraphs) => ` but is repeatable in ${subgraphs}`);
	        }
	        if (inconsistentLocations) {
	            this.reportMismatchHint(hints_1.hintInconsistentExecutionDirectiveLocations, `Execution directive "${dest}" has inconsistent locations across subgraphs `, dest, sources, directive => locationString(this.extractLocations(directive)), (locs, subgraphs) => `and will use ${locs} (intersection of all subgraphs) in the supergraph, but has: ${subgraphs ? `${locs} in ${subgraphs} and ` : ''}`, (locs, subgraphs) => `${locs} in ${subgraphs}`);
	        }
	        this.addArgumentsShallow(sources, dest);
	        for (const destArg of dest.arguments()) {
	            const subgraphArgs = sources.map(f => f === null || f === void 0 ? void 0 : f.argument(destArg.name));
	            this.mergeArgument(subgraphArgs, destArg, true);
	        }
	    }
	    extractLocations(source) {
	        return this.filterExecutableDirectiveLocations(source).concat().sort();
	    }
	    filterExecutableDirectiveLocations(source) {
	        if (MERGED_TYPE_SYSTEM_DIRECTIVES.includes(source.name)) {
	            return source.locations;
	        }
	        return source.locations.filter(loc => federation_internals_1$2.executableDirectiveLocations.includes(loc));
	    }
	    mergeAppliedDirectives(sources, dest) {
	        const names = this.gatherAppliedDirectiveNames(sources);
	        for (const name of names) {
	            this.mergeAppliedDirective(name, sources, dest);
	        }
	    }
	    gatherAppliedDirectiveNames(sources) {
	        const names = new Set();
	        for (const source of sources) {
	            if (source) {
	                for (const directive of source.appliedDirectives) {
	                    if (isMergedDirective(directive)) {
	                        names.add(directive.name);
	                    }
	                }
	            }
	        }
	        return names;
	    }
	    mergeAppliedDirective(name, sources, dest) {
	        let perSource = [];
	        for (const source of sources) {
	            if (!source) {
	                continue;
	            }
	            const directives = source.appliedDirectivesOf(name);
	            if (directives.length) {
	                perSource.push(directives);
	            }
	        }
	        while (perSource.length > 0) {
	            const directive = this.pickNextDirective(perSource);
	            dest.applyDirective(directive.name, directive.arguments(false));
	            perSource = this.removeDirective(directive, perSource);
	        }
	    }
	    pickNextDirective(directives) {
	        return directives[0][0];
	    }
	    removeDirective(toRemove, directives) {
	        return directives
	            .map(ds => ds.filter(d => !(0, federation_internals_1$2.valueEquals)(toRemove.arguments(), d.arguments()))).
	            filter(ds => ds.length);
	    }
	    mergeSchemaDefinition(sources, dest) {
	        this.mergeDescription(sources, dest);
	        this.mergeAppliedDirectives(sources, dest);
	        for (const rootKind of federation_internals_1$2.allSchemaRootKinds) {
	            let rootType;
	            let isIncompatible = false;
	            for (const sourceType of sources.map(s => filteredRoot(s, rootKind))) {
	                if (!sourceType) {
	                    continue;
	                }
	                if (rootType) {
	                    isIncompatible = isIncompatible || rootType !== sourceType.name;
	                }
	                else {
	                    rootType = sourceType.name;
	                }
	            }
	            if (!rootType) {
	                continue;
	            }
	            dest.setRoot(rootKind, rootType);
	            (0, federation_internals_1$2.assert)(!isIncompatible, () => `Should not have incompatible root type for ${rootKind}`);
	        }
	    }
	    filterSubgraphs(predicate) {
	        return this.subgraphsSchema.map((s, i) => predicate(s) ? this.names[i] : undefined).filter(n => n !== undefined);
	    }
	    subgraphByName(name) {
	        return this.subgraphsSchema[this.names.indexOf(name)];
	    }
	    postMergeValidations() {
	        for (const type of this.merged.types()) {
	            if (!(0, federation_internals_1$2.isObjectType)(type) && !(0, federation_internals_1$2.isInterfaceType)(type)) {
	                continue;
	            }
	            for (const itf of type.interfaces()) {
	                for (const itfField of itf.fields()) {
	                    const field = type.field(itfField.name);
	                    if (!field) {
	                        const subgraphsWithTheField = this.filterSubgraphs(s => { var _a; return ((_a = s.typeOfKind(itf.name, 'InterfaceType')) === null || _a === void 0 ? void 0 : _a.field(itfField.name)) !== undefined; });
	                        const subgraphsWithTypeImplementingItf = this.filterSubgraphs(s => {
	                            const typeInSubgraph = s.type(type.name);
	                            return typeInSubgraph !== undefined && typeInSubgraph.implementsInterface(itf.name);
	                        });
	                        this.errors.push(federation_internals_1$2.ERRORS.INTERFACE_FIELD_NO_IMPLEM.err({
	                            message: `Interface field "${itfField.coordinate}" is declared in ${printSubgraphNames(subgraphsWithTheField)} but type "${type}", `
	                                + `which implements "${itf}" only in ${printSubgraphNames(subgraphsWithTypeImplementingItf)} does not have field "${itfField.name}".`,
	                            nodes: (0, federation_internals_1$2.sourceASTs)(...subgraphsWithTheField.map(s => { var _a; return (_a = this.subgraphByName(s).typeOfKind(itf.name, 'InterfaceType')) === null || _a === void 0 ? void 0 : _a.field(itfField.name); }), ...subgraphsWithTypeImplementingItf.map(s => this.subgraphByName(s).type(type.name)))
	                        }));
	                        continue;
	                    }
	                }
	            }
	        }
	    }
	}

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(merge, exports);

	}(merging));

	var validate = {};

	Object.defineProperty(validate, "__esModule", { value: true });
	validate.ValidationState = validate.computeSubgraphPaths = validate.validateGraphComposition = validate.ValidationError = void 0;
	const federation_internals_1$1 = dist$2;
	const query_graphs_1$1 = dist;
	const graphql_1 = require$$2$2;
	const debug = (0, federation_internals_1$1.newDebugLogger)('validation');
	class ValidationError extends Error {
	    constructor(message, supergraphUnsatisfiablePath, subgraphsPaths, witness) {
	        super(message);
	        this.supergraphUnsatisfiablePath = supergraphUnsatisfiablePath;
	        this.subgraphsPaths = subgraphsPaths;
	        this.witness = witness;
	        this.name = 'ValidationError';
	    }
	}
	validate.ValidationError = ValidationError;
	function validationError(unsatisfiablePath, subgraphsPaths, subgraphsPathsUnadvanceables) {
	    const witness = buildWitnessOperation(unsatisfiablePath);
	    const operation = (0, graphql_1.print)((0, federation_internals_1$1.operationToDocument)(witness));
	    const message = `The following supergraph API query:\n${operation}\n`
	        + 'cannot be satisfied by the subgraphs because:\n'
	        + displayReasons(subgraphsPathsUnadvanceables);
	    return new ValidationError(message, unsatisfiablePath, subgraphsPaths, witness);
	}
	function isValidationError(e) {
	    return e instanceof ValidationError;
	}
	function displayReasons(reasons) {
	    const bySubgraph = new federation_internals_1$1.MultiMap();
	    for (const reason of reasons) {
	        for (const unadvanceable of reason.reasons) {
	            bySubgraph.add(unadvanceable.sourceSubgraph, unadvanceable);
	        }
	    }
	    return [...bySubgraph.entries()].map(([subgraph, reasons]) => {
	        let msg = `- from subgraph "${subgraph}":`;
	        if (reasons.length === 1) {
	            msg += ' ' + reasons[0].details + '.';
	        }
	        else {
	            for (const reason of reasons) {
	                msg += '\n  - ' + reason.details + '.';
	            }
	        }
	        return msg;
	    }).join('\n');
	}
	function buildWitnessOperation(witness) {
	    (0, federation_internals_1$1.assert)(witness.size > 0, "unsatisfiablePath should contain at least one edge/transition");
	    const root = witness.root;
	    return new federation_internals_1$1.Operation(root.rootKind, buildWitnessNextStep([...witness].map(e => e[0]), 0), new federation_internals_1$1.VariableDefinitions());
	}
	function buildWitnessNextStep(edges, index) {
	    if (index >= edges.length) {
	        const lastType = edges[edges.length - 1].tail.type;
	        return (0, federation_internals_1$1.isLeafType)(lastType) ? undefined : new federation_internals_1$1.SelectionSet(lastType);
	    }
	    const edge = edges[index];
	    let selection;
	    const subSelection = buildWitnessNextStep(edges, index + 1);
	    switch (edge.transition.kind) {
	        case 'DownCast':
	            const type = edge.transition.castedType;
	            selection = (0, federation_internals_1$1.selectionOfElement)(new federation_internals_1$1.FragmentElement(edge.transition.sourceType, type.name), subSelection);
	            break;
	        case 'FieldCollection':
	            const field = edge.transition.definition;
	            selection = new federation_internals_1$1.FieldSelection(buildWitnessField(field), subSelection);
	            break;
	        case 'SubgraphEnteringTransition':
	        case 'KeyResolution':
	        case 'RootTypeResolution':
	            return subSelection;
	    }
	    const selectionSet = new federation_internals_1$1.SelectionSet(edge.head.type);
	    selectionSet.add(selection);
	    return selectionSet;
	}
	function buildWitnessField(definition) {
	    const args = Object.create(null);
	    for (const argDef of definition.arguments()) {
	        args[argDef.name] = generateWitnessValue(argDef.type);
	    }
	    return new federation_internals_1$1.Field(definition, args, new federation_internals_1$1.VariableDefinitions());
	}
	function generateWitnessValue(type) {
	    switch (type.kind) {
	        case 'ScalarType':
	            switch (type.name) {
	                case 'Int':
	                    return 0;
	                case 'Float':
	                    return 3.14;
	                case 'Boolean':
	                    return true;
	                case 'String':
	                    return 'A string value';
	                case 'ID':
	                    return '<any id>';
	                default:
	                    return '<some value>';
	            }
	        case 'EnumType':
	            return type.values[0].name;
	        case 'InputObjectType':
	            const obj = Object.create(null);
	            for (const field of type.fields()) {
	                if (field.defaultValue || (0, federation_internals_1$1.isNullableType)(field.type)) {
	                    continue;
	                }
	                obj[field.name] = generateWitnessValue(field.type);
	            }
	            return obj;
	        case 'ListType':
	            return [];
	        case 'NonNullType':
	            return generateWitnessValue(type.ofType);
	        default:
	            (0, federation_internals_1$1.assert)(false, `Unhandled input type ${type}`);
	    }
	}
	function validateGraphComposition(supergraph, subgraphs) {
	    const errors = new ValidationTraversal(supergraph, subgraphs).validate();
	    return errors.length > 0 ? { errors } : {};
	}
	validate.validateGraphComposition = validateGraphComposition;
	function computeSubgraphPaths(supergraphPath, subgraphs) {
	    try {
	        (0, federation_internals_1$1.assert)(!supergraphPath.hasAnyEdgeConditions(), () => `A supergraph path should not have edge condition paths (as supergraph edges should not have conditions): ${supergraphPath}`);
	        const supergraphSchema = (0, federation_internals_1$1.firstOf)(supergraphPath.graph.sources.values());
	        const initialState = ValidationState.initial(supergraphPath.graph, supergraphPath.root.rootKind, subgraphs);
	        const conditionResolver = new ConditionValidationResolver(supergraphSchema, subgraphs);
	        let state = initialState;
	        let isIncomplete = false;
	        for (const [edge] of supergraphPath) {
	            const updated = state.validateTransition(supergraphSchema, edge, conditionResolver);
	            if (!updated) {
	                isIncomplete = true;
	                break;
	            }
	            if (isValidationError(updated)) {
	                throw updated;
	            }
	            state = updated;
	        }
	        return { traversal: state, isComplete: !isIncomplete };
	    }
	    catch (error) {
	        if (error instanceof ValidationError) {
	            return { error };
	        }
	        throw error;
	    }
	}
	validate.computeSubgraphPaths = computeSubgraphPaths;
	function initialSubgraphPaths(kind, subgraphs) {
	    const root = subgraphs.root(kind);
	    (0, federation_internals_1$1.assert)(root, () => `The supergraph shouldn't have a ${kind} root if no subgraphs have one`);
	    (0, federation_internals_1$1.assert)(root.type.name == (0, query_graphs_1$1.federatedGraphRootTypeName)(kind), () => `Unexpected type ${root.type} for subgraphs root type (expected ${(0, query_graphs_1$1.federatedGraphRootTypeName)(kind)}`);
	    const initialState = query_graphs_1$1.GraphPath.fromGraphRoot(subgraphs, kind);
	    return subgraphs.outEdges(root).map(e => initialState.add(query_graphs_1$1.subgraphEnteringTransition, e, query_graphs_1$1.noConditionsResolution));
	}
	class ValidationState {
	    constructor(supergraphPath, subgraphPaths) {
	        this.supergraphPath = supergraphPath;
	        this.subgraphPaths = subgraphPaths;
	    }
	    static initial(supergraph, kind, subgraphs) {
	        return new ValidationState(query_graphs_1$1.GraphPath.fromGraphRoot(supergraph, kind), initialSubgraphPaths(kind, subgraphs));
	    }
	    validateTransition(supergraphSchema, supergraphEdge, conditionResolver) {
	        (0, federation_internals_1$1.assert)(!supergraphEdge.conditions, () => `Supergraph edges should not have conditions (${supergraphEdge})`);
	        const transition = supergraphEdge.transition;
	        const targetType = supergraphEdge.tail.type;
	        const newSubgraphPaths = [];
	        const deadEnds = [];
	        for (const path of this.subgraphPaths) {
	            const options = (0, query_graphs_1$1.advancePathWithTransition)(supergraphSchema, path, transition, targetType, conditionResolver.resolver);
	            if ((0, query_graphs_1$1.isUnadvanceable)(options)) {
	                deadEnds.push(options);
	                continue;
	            }
	            if (options.length === 0) {
	                return undefined;
	            }
	            newSubgraphPaths.push(...options);
	        }
	        const newPath = this.supergraphPath.add(transition, supergraphEdge, query_graphs_1$1.noConditionsResolution);
	        if (newSubgraphPaths.length === 0) {
	            return validationError(newPath, this.subgraphPaths, deadEnds);
	        }
	        return new ValidationState(newPath, newSubgraphPaths);
	    }
	    currentSubgraphs() {
	        const subgraphs = [];
	        for (const path of this.subgraphPaths) {
	            const source = path.tail.source;
	            if (!subgraphs.includes(source)) {
	                subgraphs.push(source);
	            }
	        }
	        return subgraphs;
	    }
	    toString() {
	        return `${this.supergraphPath} <=> [${this.subgraphPaths.map(s => s.toString()).join(', ')}]`;
	    }
	}
	validate.ValidationState = ValidationState;
	function isSupersetOrEqual(maybeSuperset, other) {
	    return other.every(v => maybeSuperset.includes(v));
	}
	class ValidationTraversal {
	    constructor(supergraph, subgraphs) {
	        this.stack = [];
	        this.validationErrors = [];
	        this.supergraphSchema = (0, federation_internals_1$1.firstOf)(supergraph.sources.values());
	        this.conditionResolver = new ConditionValidationResolver(this.supergraphSchema, subgraphs);
	        supergraph.rootKinds().forEach(k => this.stack.push(ValidationState.initial(supergraph, k, subgraphs)));
	        this.previousVisits = new query_graphs_1$1.QueryGraphState(supergraph);
	    }
	    validate() {
	        while (this.stack.length > 0) {
	            this.handleState(this.stack.pop());
	        }
	        return this.validationErrors;
	    }
	    handleState(state) {
	        debug.group(() => `Validation: ${this.stack.length + 1} open states. Validating ${state}`);
	        const vertex = state.supergraphPath.tail;
	        const currentSources = state.currentSubgraphs();
	        const previousSeenSources = this.previousVisits.getVertexState(vertex);
	        if (previousSeenSources) {
	            for (const previousSources of previousSeenSources) {
	                if (isSupersetOrEqual(currentSources, previousSources)) {
	                    debug.groupEnd(`Has already validated this vertex.`);
	                    return;
	                }
	            }
	            previousSeenSources.push(currentSources);
	        }
	        else {
	            this.previousVisits.setVertexState(vertex, [currentSources]);
	        }
	        for (const edge of state.supergraphPath.nextEdges()) {
	            if (edge.isEdgeForField(federation_internals_1$1.typenameFieldName)) {
	                continue;
	            }
	            debug.group(() => `Validating supergraph edge ${edge}`);
	            const newState = state.validateTransition(this.supergraphSchema, edge, this.conditionResolver);
	            if (isValidationError(newState)) {
	                debug.groupEnd(`Validation error!`);
	                this.validationErrors.push(newState);
	                continue;
	            }
	            if (newState && !newState.supergraphPath.isTerminal()) {
	                this.stack.push(newState);
	                debug.groupEnd(() => `Reached new state ${newState}`);
	            }
	            else {
	                debug.groupEnd(`Reached terminal vertex/cycle`);
	            }
	        }
	        debug.groupEnd();
	    }
	}
	class ConditionValidationState {
	    constructor(selection, subgraphOptions) {
	        this.selection = selection;
	        this.subgraphOptions = subgraphOptions;
	    }
	    toString() {
	        return `${this.selection} <=> ${(0, query_graphs_1$1.advanceOptionsToString)(this.subgraphOptions)}`;
	    }
	}
	class ConditionValidationResolver {
	    constructor(supergraphSchema, federatedQueryGraph) {
	        this.supergraphSchema = supergraphSchema;
	        this.federatedQueryGraph = federatedQueryGraph;
	        this.resolver = (0, query_graphs_1$1.cachingConditionResolver)(federatedQueryGraph, (edge, context, excludedEdges, excludedConditions) => this.validateConditions(edge, context, excludedEdges, excludedConditions));
	    }
	    validateConditions(edge, context, excludedEdges, excludedConditions) {
	        const conditions = edge.conditions;
	        excludedConditions = (0, query_graphs_1$1.addConditionExclusion)(excludedConditions, conditions);
	        const initialPath = query_graphs_1$1.GraphPath.create(this.federatedQueryGraph, edge.head);
	        const initialOptions = [new query_graphs_1$1.SimultaneousPathsWithLazyIndirectPaths([initialPath], context, this.resolver, excludedEdges, excludedConditions)];
	        const stack = [];
	        for (const selection of conditions.selections()) {
	            stack.push(new ConditionValidationState(selection, initialOptions));
	        }
	        while (stack.length > 0) {
	            const state = stack.pop();
	            const newStates = this.advanceState(state);
	            if (newStates === null) {
	                return query_graphs_1$1.unsatisfiedConditionsResolution;
	            }
	            newStates.forEach(s => stack.push(s));
	        }
	        return { satisfied: true, cost: 1 };
	    }
	    advanceState(state) {
	        let newOptions = [];
	        for (const paths of state.subgraphOptions) {
	            const pathsOptions = (0, query_graphs_1$1.advanceSimultaneousPathsWithOperation)(this.supergraphSchema, paths, state.selection.element());
	            if (!pathsOptions) {
	                continue;
	            }
	            newOptions = newOptions.concat(pathsOptions);
	        }
	        if (newOptions.length === 0) {
	            return null;
	        }
	        return state.selection.selectionSet ? state.selection.selectionSet.selections().map(s => new ConditionValidationState(s, newOptions)) : [];
	    }
	}

	Object.defineProperty(compose$1, "__esModule", { value: true });
	compose$1.composeServices = compose$1.compose = void 0;
	const federation_internals_1 = dist$2;
	const query_graphs_1 = dist;
	const merging_1 = merging;
	const validate_1 = validate;
	function compose(subgraphs) {
	    const mergeResult = (0, merging_1.mergeSubgraphs)(subgraphs);
	    if (mergeResult.errors) {
	        return { errors: mergeResult.errors };
	    }
	    const supergraphSchema = mergeResult.supergraph;
	    const supergraphQueryGraph = (0, query_graphs_1.buildSupergraphAPIQueryGraph)(supergraphSchema);
	    const federatedQueryGraph = (0, query_graphs_1.buildFederatedQueryGraph)(supergraphSchema, false);
	    const validationResult = (0, validate_1.validateGraphComposition)(supergraphQueryGraph, federatedQueryGraph);
	    if (validationResult.errors) {
	        return { errors: validationResult.errors.map(e => federation_internals_1.ERRORS.SATISFIABILITY_ERROR.err({ message: e.message })) };
	    }
	    let supergraphSdl;
	    try {
	        supergraphSdl = (0, federation_internals_1.printSchema)(supergraphSchema, (0, federation_internals_1.orderPrintedDefinitions)(federation_internals_1.defaultPrintOptions));
	    }
	    catch (err) {
	        return { errors: [err] };
	    }
	    return {
	        schema: supergraphSchema,
	        supergraphSdl,
	        hints: mergeResult.hints
	    };
	}
	compose$1.compose = compose;
	function composeServices(services) {
	    const subgraphs = (0, federation_internals_1.subgraphsFromServiceList)(services);
	    if (Array.isArray(subgraphs)) {
	        return { errors: subgraphs };
	    }
	    return compose(subgraphs);
	}
	compose$1.composeServices = composeServices;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(compose$1, exports);
	__exportStar(merging, exports);
	__exportStar(validate, exports);

	}(dist$3));

	exports.composeServices = dist$3.composeServices;
	exports.parseGraphqlDocument = parse;

	Object.defineProperty(exports, '__esModule', { value: true });

	return exports;

})({}, whatwg_url_1);
//# sourceMappingURL=composition.js.map
